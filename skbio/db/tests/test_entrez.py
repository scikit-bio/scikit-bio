# ----------------------------------------------------------------------------
# Copyright (c) 2013--, scikit-bio development team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
# ----------------------------------------------------------------------------

import unittest
from types import GeneratorType
from unittest import mock
from xml.etree import ElementTree as ET

from skbio import DNA
from skbio.db import entrez
from skbio.util import get_data_path


def get_url_from_patch(patch: mock.Mock):
    args, kwargs = patch.call_args
    request = args[0]
    return request.full_url + request.data.decode("ascii")


def urlopen_patch(response_code=200, parse_mode="text", multiple_seqs=False):
    """Interjects the urlopen function to return a mocked (but parseble)
    HTTPResponse."""
    mocked_response = mock.NonCallableMagicMock()
    mocked_response.code = response_code
    # Fills the mocked response to simulate data format
    if parse_mode == "json":
        content = "{}"
        content_header = "application/json"
    elif parse_mode == "xml":
        content = "<Element></Element>"
        content_header = "text/xml"
    else:
        content_header = "text/plain"
        if parse_mode == "fasta":
            if multiple_seqs:
                content = ">\nA\n>\nA"
            else:
                content = ">\nA"
        elif parse_mode == "gb":
            if multiple_seqs:
                with open(get_data_path("genbank_sample2.gb")) as file:
                    content = file.read()
            else:
                with open(get_data_path("genbank_sample.gb")) as file:
                    content = file.read()
        else:
            content = ""
    mocked_response.read.return_value = content.encode("utf8")
    mocked_response.getheader.return_value = content_header
    mocked_response.__enter__.return_value = mocked_response

    return mock.patch("skbio.db.entrez.urlopen", return_value=mocked_response)


class TestOffline(unittest.TestCase):
    """Set os tests that can be performed offline.

    These tests ensure a correspondence between the URL generated by the
    entrez functions and the
    expected tested URL. They also test if `entrez._parse_response` can
    correctly convert between
    types (doesn't test if the content of the response is correct though).
    """

    def test_parsing(self):
        """Tests that `entrez._parse_response` can correctly interpret an
        empty response in various
        data formats."""
        # The call to the entrez function doesn't need to conform to an
        # actually valid call since
        # it's going to be filled with urlopen_patch anyway
        with urlopen_patch(parse_mode="xml"):
            xml_result = entrez.einfo(parse=True)
        with urlopen_patch(parse_mode="json"):
            json_result = entrez.einfo(parse=True)
        with urlopen_patch(parse_mode="fasta", multiple_seqs=False):
            single_fasta_result = entrez.efetch(db="", id="", rettype="fasta",
                                                parse=True)
        with urlopen_patch(parse_mode="fasta", multiple_seqs=True):
            multiple_fasta_result = entrez.efetch(db="", id="",
                                                  rettype="fasta", parse=True)
        with urlopen_patch(parse_mode="gb", multiple_seqs=False):
            single_gb_result = entrez.efetch(db="", id="", rettype="gb",
                                             parse=True)
        with urlopen_patch(parse_mode="gb", multiple_seqs=True):
            multiple_gb_result = entrez.efetch(db="", id="", rettype="gb",
                                               parse=True)
        with urlopen_patch(parse_mode="text"):
            text_result = entrez.einfo(parse=True)

        self.assertIsInstance(xml_result, ET.Element)
        self.assertIsInstance(json_result, dict)
        self.assertIsInstance(single_fasta_result, DNA)
        self.assertIsInstance(multiple_fasta_result, GeneratorType)
        self.assertIsInstance(single_gb_result, DNA)
        self.assertIsInstance(multiple_gb_result, GeneratorType)
        self.assertIsInstance(text_result, str)

    def test_einfo(self):
        # Because the default arguments must be included in the URL,
        # a parameterized URL is
        # inevitable even if we call 'entrez.einfo()' with no arguments
        expected_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/einfo" \
                       ".fcgi?retmode=xml"
        with urlopen_patch() as patch:
            entrez.einfo()
        self.assertEqual(expected_url, get_url_from_patch(patch))

        expected_url_2 = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils" \
                         "/einfo.fcgi?retmode=json"
        with urlopen_patch() as patch:
            entrez.einfo(retmode="json")
        self.assertEqual(expected_url_2, get_url_from_patch(patch))

        expected_url_3 = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils" \
                         "/einfo.fcgi?" \
                         "db=protein&version=2.0&retmode=xml"
        with urlopen_patch() as patch:
            entrez.einfo("protein", version=2)
        self.assertEqual(expected_url_3, get_url_from_patch(patch))

    def test_esearch(self):
        expected_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils" \
                       "/esearch.fcgi?db=pubmed&" \
                       "term=cancer&usehistory=y&retstart=0&retmax=100" \
                       "&rettype=uilist&" \
                       "retmode=xml&datetype=edat&reldate=60"
        with urlopen_patch() as patch:
            entrez.esearch("pubmed", "cancer", reldate=60, datetype="edat",
                           retmax=100,
                           usehistory='y')
        self.assertEqual(expected_url, get_url_from_patch(patch))

        expected_url_2 = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils" \
                         "/esearch.fcgi?" \
                         "db=nucleotide&term=biomol+trna%5Bprop%5D&retstart" \
                         "=0&retmax=20" \
                         "&rettype=uilist&retmode=xml"
        with urlopen_patch() as patch:
            entrez.esearch("nucleotide", "biomol trna[prop]")
        self.assertEqual(expected_url_2, get_url_from_patch(patch))

        expected_url_3 = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils" \
                         "/esearch.fcgi?db=protein" \
                         "&term=70000%3A90000%5Bmolecular+weight%5D&retstart" \
                         "=0&retmax=20" \
                         "&rettype=uilist&retmode=xml"
        with urlopen_patch() as patch:
            entrez.esearch("protein", "70000:90000[molecular weight]")
        self.assertEqual(expected_url_3, get_url_from_patch(patch))

    def test_epost(self):
        expected_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/epost" \
                       ".fcgi?db=pubmed" \
                       "&id=11237011%2C12466850"
        with urlopen_patch() as patch:
            entrez.epost("pubmed", [11237011, 12466850])
        self.assertEqual(expected_url, get_url_from_patch(patch))

    def test_esummary(self):
        expected_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils" \
                       "/esummary.fcgi?db=pubmed" \
                       "&id=11850928%2C11482001&retstart=0&retmode=xml" \
                       "&version=2.0"
        with urlopen_patch() as patch:
            entrez.esummary("pubmed", id=[11850928, 11482001], version=2)
        self.assertEqual(expected_url, get_url_from_patch(patch))

        expected_url_2 = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils" \
                         "/esummary.fcgi?" \
                         "db=nucleotide&id=28864546%2C28800981&retstart=0" \
                         "&retmode=xml"
        with urlopen_patch() as patch:
            entrez.esummary("nucleotide", id=[28864546, 28800981])
        self.assertEqual(expected_url_2, get_url_from_patch(patch))

    def test_efetch(self):
        expected_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/efetch" \
                       ".fcgi?" \
                       "db=pubmed&id=11748933%2C11700088&retmode=xml" \
                       "&retstart=0"
        with urlopen_patch() as patch:
            entrez.efetch("pubmed", id=[11748933, 11700088], retmode="xml")
        self.assertEqual(expected_url, get_url_from_patch(patch))

        expected_url_2 = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils" \
                         "/efetch.fcgi?" \
                         "db=nuccore&id=21614549&retmode=text&rettype=fasta" \
                         "&retstart=0" \
                         "&strand=1&seq_start=1&seq_stop=100"
        with urlopen_patch() as patch:
            entrez.efetch("nuccore", id=21614549, strand=1, seq_start=1,
                          seq_stop=100,
                          rettype="fasta", retmode="text")
        self.assertEqual(expected_url_2, get_url_from_patch(patch))

    def test_elink(self):
        expected_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/elink" \
                       ".fcgi?db=gene&" \
                       "dbfrom=protein&cmd=neighbor&id=15718680%2C157427902" \
                       "&retmode=xml"
        with urlopen_patch() as patch:
            entrez.elink("gene", "protein", id=[15718680, 157427902])
        self.assertEqual(expected_url, get_url_from_patch(patch))

        expected_url_2 = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils" \
                         "/elink.fcgi?" \
                         "db=snp&dbfrom=gene&cmd=neighbor&id=93986&retmode=xml"
        with urlopen_patch() as patch:
            entrez.elink("snp", "gene", id=93986)
        self.assertEqual(expected_url_2, get_url_from_patch(patch))

    def test_egquery(self):
        expected_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils" \
                       "/egquery?term=asthma" \
                       "&retmode=xml"
        with urlopen_patch() as patch:
            entrez.egquery("asthma")
        self.assertEqual(expected_url, get_url_from_patch(patch))

    def test_espell(self):
        expected_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils/espell" \
                       ".fcgi?" \
                       "db=pubmed&term=asthmaa+OR+alergies"
        with urlopen_patch() as patch:
            entrez.espell("pubmed", "asthmaa OR alergies")
        self.assertEqual(expected_url, get_url_from_patch(patch))

    def test_ecitmatch(self):
        expected_url = "https://eutils.ncbi.nlm.nih.gov/entrez/eutils" \
                       "/ecitmatch.cgi?" \
                       "db=pubmed&retmode=xml&bdata=proc+natl+acad+sci+u+s+a" \
                       "%7C1991%" \
                       "7C88%7C3248%7Cmann+bj%7CArt1%7C%0Dscience%7C1987" \
                       "%7C235%7C18" \
                       "2%7Cpalmenberg+ac%7CArt2%7C"
        with urlopen_patch() as patch:
            entrez.ecitmatch(
                "proc natl acad sci u s a|1991|88|3248|mann "
                "bj|Art1|\rscience|1987"
                "|235|182|palmenberg ac|Art2|")
        self.assertEqual(expected_url, get_url_from_patch(patch))


class TestOnline(unittest.TestCase):
    """Set of tests that can only be performed online.

    These tests compare the output of an actual call of entrez functions
    against pre-obtained files
    that represent the expected result. Both the retrieval of text data and
    further parsing by the
    `entrez._parse_response` are tested.
    """

    def test_einfo(self):
        expected_result = ET.parse(get_data_path("einfo.xml")).getroot()
        result = entrez.einfo(parse=True)
        self.assertElementsEqual(expected_result.find(".//DbList"),
                                 result.find(".//DbList"))

        expected_result_2 = ET.parse(get_data_path("einfo2.xml")).getroot()
        result_2 = entrez.einfo("protein", version=2, parse=True)
        self.assertElementsEqual(expected_result_2.find(".//DbInfo"),
                                 result_2.find(".//DbInfo"))

    def test_esearch(self):
        expected_result = ET.parse(get_data_path("esearch.xml")).getroot()
        result = entrez.esearch("pubmed", "cancer", reldate=60,
                                datetype="edat", retmax=100,
                                usehistory='y', parse=True)
        self.assertElementsEqual(expected_result.find(".//IdList"),
                                 result.find(".//IdList"))

        expected_result_2 = ET.parse(get_data_path("esearch2.xml")).getroot()
        result_2 = entrez.esearch("nucleotide", "biomol trna[prop]",
                                  parse=True)
        self.assertElementsEqual(expected_result_2.find(".//IdList"),
                                 result_2.find(".//IdList"))

        expected_result_3 = ET.parse(get_data_path("esearch3.xml")).getroot()
        result_3 = entrez.esearch("protein", "70000:90000[molecular weight]",
                                  parse=True)
        self.assertElementsEqual(expected_result_3.find(".//IdList"),
                                 result_3.find(".//IdList"))

    def test_epost(self):
        expected_result = ET.parse(get_data_path("epost.xml")).getroot()
        result = entrez.epost("pubmed", id=[11237011, 12466850], parse=True)
        self.assertElementsEqual(expected_result.find(".//QueryKey"),
                                 result.find(".//QueryKey"))

    def test_esummary(self):
        expected_result = ET.parse(get_data_path("esummary.xml")).getroot()
        result = entrez.esummary("pubmed", id=[11850928, 11482001], version=2,
                                 parse=True)

        for expected, actual in zip(
                expected_result.findall(".//DocumentSummary"),
                result.findall(".//DocumentSummary")
        ):
            self.assertElementsEqual(expected, actual)

        expected_result_2 = ET.parse(get_data_path("esummary2.xml")).getroot()
        result_2 = entrez.esummary("nucleotide", id=[28864546, 28800981],
                                   parse=True)
        for expected, actual in zip(expected_result_2.findall(".//DocSum"),
                                    result_2.findall(".//DocSum")):
            self.assertElementsEqual(expected, actual)

    def test_efetch(self):
        expected_result = ET.parse(get_data_path("efetch.xml")).getroot()
        result = entrez.efetch("pubmed", id=[11748933, 11700088],
                               retmode="xml", parse=True)
        for expected, actual in zip(expected_result.findall(".//PMID"),
                                    result.findall(".//PMID")):
            self.assertElementsEqual(expected, actual)

        expected_result_2 = DNA.read(get_data_path("efetch2.fasta"))
        result_2 = entrez.efetch("nuccore", id=21614549, strand=1, seq_start=1,
                                 seq_stop=100,
                                 rettype="fasta", retmode="text", parse=True)
        self.assertEqual(expected_result_2, result_2)

    def test_elink(self):
        # Second test downloads too much data to be viable and was omitted
        expected_result = ET.parse(get_data_path("elink.xml")).getroot()
        result = entrez.elink("gene", "protein", id=[15718680, 157427902],
                              parse=True)
        self.assertElementsEqual(expected_result, result)

    def test_egquery(self):
        expected_result = ET.parse(get_data_path("egquery.xml")).getroot()
        result = entrez.egquery("asthma", parse=True)
        self.assertElementsEqual(expected_result.find(".//eGQueryResult"),
                                 result.find(".//eGQueryResult"))

    def test_espell(self):
        expected_result = ET.parse(get_data_path("espell.xml")).getroot()
        result = entrez.espell("pubmed", "asthmaa OR alergies", parse=True)
        self.assertElementsEqual(expected_result.find(".//CorrectedQuery"),
                                 result.find(".//CorrectedQuery"))

    def test_ecitmatch(self):
        with open(get_data_path("ecitmatch.txt")) as file:
            expected_result = file.read()
        result = entrez.ecitmatch(
            "proc natl acad sci u s a|1991|88|3248|mann bj|Art1|\rscience"
            "|1987|235|182|palmenberg ac|Art2|", parse=True)
        self.assertEqual(expected_result, result)

    def assertElementsEqual(self, e1, e2):
        """Compares two xml Elements."""
        e = AssertionError("XML Elements are different")
        if e1.text != e2.text:
            raise e
        for c1, c2 in zip(e1, e2):
            self.assertElementsEqual(c1, c2)


if __name__ == "__main__":
    unittest.main()
