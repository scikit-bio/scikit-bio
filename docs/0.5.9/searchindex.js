Search.setIndex({"docnames": ["alignment", "development/coding_guidelines", "development/new_module", "diversity", "generated/generated/skbio.io.util.open", "generated/generated/skbio.io.util.open_file", "generated/generated/skbio.io.util.open_files", "generated/skbio.alignment.AlignmentStructure", "generated/skbio.alignment.AlignmentStructure.__eq__", "generated/skbio.alignment.AlignmentStructure.__ge__", "generated/skbio.alignment.AlignmentStructure.__getitem__", "generated/skbio.alignment.AlignmentStructure.__gt__", "generated/skbio.alignment.AlignmentStructure.__hash__", "generated/skbio.alignment.AlignmentStructure.__le__", "generated/skbio.alignment.AlignmentStructure.__lt__", "generated/skbio.alignment.AlignmentStructure.__ne__", "generated/skbio.alignment.AlignmentStructure.__setstate__", "generated/skbio.alignment.AlignmentStructure.__str__", "generated/skbio.alignment.AlignmentStructure.is_zero_based", "generated/skbio.alignment.AlignmentStructure.set_zero_based", "generated/skbio.alignment.StripedSmithWaterman", "generated/skbio.alignment.StripedSmithWaterman.__call__", "generated/skbio.alignment.StripedSmithWaterman.__eq__", "generated/skbio.alignment.StripedSmithWaterman.__ge__", "generated/skbio.alignment.StripedSmithWaterman.__gt__", "generated/skbio.alignment.StripedSmithWaterman.__hash__", "generated/skbio.alignment.StripedSmithWaterman.__le__", "generated/skbio.alignment.StripedSmithWaterman.__lt__", "generated/skbio.alignment.StripedSmithWaterman.__ne__", "generated/skbio.alignment.StripedSmithWaterman.__setstate__", "generated/skbio.alignment.StripedSmithWaterman.__str__", "generated/skbio.alignment.TabularMSA", "generated/skbio.alignment.TabularMSA.__bool__", "generated/skbio.alignment.TabularMSA.__contains__", "generated/skbio.alignment.TabularMSA.__copy__", "generated/skbio.alignment.TabularMSA.__deepcopy__", "generated/skbio.alignment.TabularMSA.__eq__", "generated/skbio.alignment.TabularMSA.__ge__", "generated/skbio.alignment.TabularMSA.__getitem__", "generated/skbio.alignment.TabularMSA.__gt__", "generated/skbio.alignment.TabularMSA.__iter__", "generated/skbio.alignment.TabularMSA.__le__", "generated/skbio.alignment.TabularMSA.__len__", "generated/skbio.alignment.TabularMSA.__lt__", "generated/skbio.alignment.TabularMSA.__ne__", "generated/skbio.alignment.TabularMSA.__reversed__", "generated/skbio.alignment.TabularMSA.__str__", "generated/skbio.alignment.TabularMSA.append", "generated/skbio.alignment.TabularMSA.consensus", "generated/skbio.alignment.TabularMSA.conservation", "generated/skbio.alignment.TabularMSA.extend", "generated/skbio.alignment.TabularMSA.from_dict", "generated/skbio.alignment.TabularMSA.gap_frequencies", "generated/skbio.alignment.TabularMSA.has_metadata", "generated/skbio.alignment.TabularMSA.has_positional_metadata", "generated/skbio.alignment.TabularMSA.iter_positions", "generated/skbio.alignment.TabularMSA.join", "generated/skbio.alignment.TabularMSA.read", "generated/skbio.alignment.TabularMSA.reassign_index", "generated/skbio.alignment.TabularMSA.sort", "generated/skbio.alignment.TabularMSA.to_dict", "generated/skbio.alignment.TabularMSA.write", "generated/skbio.alignment.global_pairwise_align", "generated/skbio.alignment.global_pairwise_align_nucleotide", "generated/skbio.alignment.global_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align", "generated/skbio.alignment.local_pairwise_align_nucleotide", "generated/skbio.alignment.local_pairwise_align_protein", "generated/skbio.alignment.local_pairwise_align_ssw", "generated/skbio.alignment.make_identity_substitution_matrix", "generated/skbio.diversity.alpha", "generated/skbio.diversity.alpha.ace", "generated/skbio.diversity.alpha.berger_parker_d", "generated/skbio.diversity.alpha.brillouin_d", "generated/skbio.diversity.alpha.chao1", "generated/skbio.diversity.alpha.chao1_ci", "generated/skbio.diversity.alpha.dominance", "generated/skbio.diversity.alpha.doubles", "generated/skbio.diversity.alpha.enspie", "generated/skbio.diversity.alpha.esty_ci", "generated/skbio.diversity.alpha.faith_pd", "generated/skbio.diversity.alpha.fisher_alpha", "generated/skbio.diversity.alpha.gini_index", "generated/skbio.diversity.alpha.goods_coverage", "generated/skbio.diversity.alpha.heip_e", "generated/skbio.diversity.alpha.kempton_taylor_q", "generated/skbio.diversity.alpha.lladser_ci", "generated/skbio.diversity.alpha.lladser_pe", "generated/skbio.diversity.alpha.margalef", "generated/skbio.diversity.alpha.mcintosh_d", "generated/skbio.diversity.alpha.mcintosh_e", "generated/skbio.diversity.alpha.menhinick", "generated/skbio.diversity.alpha.michaelis_menten_fit", "generated/skbio.diversity.alpha.observed_otus", "generated/skbio.diversity.alpha.osd", "generated/skbio.diversity.alpha.pielou_e", "generated/skbio.diversity.alpha.robbins", "generated/skbio.diversity.alpha.shannon", "generated/skbio.diversity.alpha.simpson", "generated/skbio.diversity.alpha.simpson_e", "generated/skbio.diversity.alpha.singles", "generated/skbio.diversity.alpha.strong", "generated/skbio.diversity.alpha_diversity", "generated/skbio.diversity.beta", "generated/skbio.diversity.beta.unweighted_unifrac", "generated/skbio.diversity.beta.weighted_unifrac", "generated/skbio.diversity.beta_diversity", "generated/skbio.diversity.block_beta_diversity", "generated/skbio.diversity.get_alpha_diversity_metrics", "generated/skbio.diversity.get_beta_diversity_metrics", "generated/skbio.diversity.partial_beta_diversity", "generated/skbio.io.ArgumentOverrideWarning", "generated/skbio.io.BLAST7FormatError", "generated/skbio.io.ClustalFormatError", "generated/skbio.io.EMBLFormatError", "generated/skbio.io.FASTAFormatError", "generated/skbio.io.FASTQFormatError", "generated/skbio.io.FileFormatError", "generated/skbio.io.FormatIdentificationWarning", "generated/skbio.io.GFF3FormatError", "generated/skbio.io.GenBankFormatError", "generated/skbio.io.IOSourceError", "generated/skbio.io.LSMatFormatError", "generated/skbio.io.NewickFormatError", "generated/skbio.io.OrdinationFormatError", "generated/skbio.io.PhylipFormatError", "generated/skbio.io.QSeqFormatError", "generated/skbio.io.QUALFormatError", "generated/skbio.io.StockholmFormatError", "generated/skbio.io.UnrecognizedFormatError", "generated/skbio.io.format.binary_dm", "generated/skbio.io.format.blast6", "generated/skbio.io.format.blast7", "generated/skbio.io.format.clustal", "generated/skbio.io.format.embl", "generated/skbio.io.format.fasta", "generated/skbio.io.format.fastq", "generated/skbio.io.format.genbank", "generated/skbio.io.format.gff3", "generated/skbio.io.format.lsmat", "generated/skbio.io.format.newick", "generated/skbio.io.format.ordination", "generated/skbio.io.format.phylip", "generated/skbio.io.format.qseq", "generated/skbio.io.format.stockholm", "generated/skbio.io.format.taxdump", "generated/skbio.io.registry", "generated/skbio.io.registry.DuplicateRegistrationError", "generated/skbio.io.registry.Format", "generated/skbio.io.registry.Format.__eq__", "generated/skbio.io.registry.Format.__ge__", "generated/skbio.io.registry.Format.__gt__", "generated/skbio.io.registry.Format.__hash__", "generated/skbio.io.registry.Format.__le__", "generated/skbio.io.registry.Format.__lt__", "generated/skbio.io.registry.Format.__ne__", "generated/skbio.io.registry.Format.__str__", "generated/skbio.io.registry.Format.reader", "generated/skbio.io.registry.Format.sniffer", "generated/skbio.io.registry.Format.writer", "generated/skbio.io.registry.IORegistry", "generated/skbio.io.registry.IORegistry.__eq__", "generated/skbio.io.registry.IORegistry.__ge__", "generated/skbio.io.registry.IORegistry.__gt__", "generated/skbio.io.registry.IORegistry.__hash__", "generated/skbio.io.registry.IORegistry.__le__", "generated/skbio.io.registry.IORegistry.__lt__", "generated/skbio.io.registry.IORegistry.__ne__", "generated/skbio.io.registry.IORegistry.__str__", "generated/skbio.io.registry.IORegistry.add_format", "generated/skbio.io.registry.IORegistry.create_format", "generated/skbio.io.registry.IORegistry.get_reader", "generated/skbio.io.registry.IORegistry.get_sniffer", "generated/skbio.io.registry.IORegistry.get_writer", "generated/skbio.io.registry.IORegistry.list_read_formats", "generated/skbio.io.registry.IORegistry.list_write_formats", "generated/skbio.io.registry.IORegistry.monkey_patch", "generated/skbio.io.registry.IORegistry.read", "generated/skbio.io.registry.IORegistry.sniff", "generated/skbio.io.registry.IORegistry.write", "generated/skbio.io.registry.InvalidRegistrationError", "generated/skbio.io.registry.create_format", "generated/skbio.io.registry.read", "generated/skbio.io.registry.sniff", "generated/skbio.io.registry.write", "generated/skbio.io.util", "generated/skbio.metadata.Interval", "generated/skbio.metadata.Interval.__eq__", "generated/skbio.metadata.Interval.__ge__", "generated/skbio.metadata.Interval.__gt__", "generated/skbio.metadata.Interval.__le__", "generated/skbio.metadata.Interval.__lt__", "generated/skbio.metadata.Interval.__ne__", "generated/skbio.metadata.Interval.__str__", "generated/skbio.metadata.Interval.drop", "generated/skbio.metadata.IntervalMetadata", "generated/skbio.metadata.IntervalMetadata.__copy__", "generated/skbio.metadata.IntervalMetadata.__deepcopy__", "generated/skbio.metadata.IntervalMetadata.__eq__", "generated/skbio.metadata.IntervalMetadata.__ge__", "generated/skbio.metadata.IntervalMetadata.__gt__", "generated/skbio.metadata.IntervalMetadata.__le__", "generated/skbio.metadata.IntervalMetadata.__lt__", "generated/skbio.metadata.IntervalMetadata.__ne__", "generated/skbio.metadata.IntervalMetadata.__str__", "generated/skbio.metadata.IntervalMetadata.add", "generated/skbio.metadata.IntervalMetadata.concat", "generated/skbio.metadata.IntervalMetadata.drop", "generated/skbio.metadata.IntervalMetadata.merge", "generated/skbio.metadata.IntervalMetadata.query", "generated/skbio.metadata.IntervalMetadata.read", "generated/skbio.metadata.IntervalMetadata.sort", "generated/skbio.metadata.IntervalMetadata.write", "generated/skbio.sequence.DNA", "generated/skbio.sequence.DNA.__bool__", "generated/skbio.sequence.DNA.__contains__", "generated/skbio.sequence.DNA.__copy__", "generated/skbio.sequence.DNA.__deepcopy__", "generated/skbio.sequence.DNA.__eq__", "generated/skbio.sequence.DNA.__ge__", "generated/skbio.sequence.DNA.__getitem__", "generated/skbio.sequence.DNA.__gt__", "generated/skbio.sequence.DNA.__iter__", "generated/skbio.sequence.DNA.__le__", "generated/skbio.sequence.DNA.__len__", "generated/skbio.sequence.DNA.__lt__", "generated/skbio.sequence.DNA.__ne__", "generated/skbio.sequence.DNA.__reversed__", "generated/skbio.sequence.DNA.__str__", "generated/skbio.sequence.DNA.complement", "generated/skbio.sequence.DNA.concat", "generated/skbio.sequence.DNA.count", "generated/skbio.sequence.DNA.definites", "generated/skbio.sequence.DNA.degap", "generated/skbio.sequence.DNA.degenerates", "generated/skbio.sequence.DNA.distance", "generated/skbio.sequence.DNA.expand_degenerates", "generated/skbio.sequence.DNA.find_motifs", "generated/skbio.sequence.DNA.find_with_regex", "generated/skbio.sequence.DNA.frequencies", "generated/skbio.sequence.DNA.gaps", "generated/skbio.sequence.DNA.gc_content", "generated/skbio.sequence.DNA.gc_frequency", "generated/skbio.sequence.DNA.has_definites", "generated/skbio.sequence.DNA.has_degenerates", "generated/skbio.sequence.DNA.has_gaps", "generated/skbio.sequence.DNA.has_interval_metadata", "generated/skbio.sequence.DNA.has_metadata", "generated/skbio.sequence.DNA.has_nondegenerates", "generated/skbio.sequence.DNA.has_positional_metadata", "generated/skbio.sequence.DNA.index", "generated/skbio.sequence.DNA.is_reverse_complement", "generated/skbio.sequence.DNA.iter_contiguous", "generated/skbio.sequence.DNA.iter_kmers", "generated/skbio.sequence.DNA.kmer_frequencies", "generated/skbio.sequence.DNA.lowercase", "generated/skbio.sequence.DNA.match_frequency", "generated/skbio.sequence.DNA.matches", "generated/skbio.sequence.DNA.mismatch_frequency", "generated/skbio.sequence.DNA.mismatches", "generated/skbio.sequence.DNA.nondegenerates", "generated/skbio.sequence.DNA.read", "generated/skbio.sequence.DNA.replace", "generated/skbio.sequence.DNA.reverse_complement", "generated/skbio.sequence.DNA.to_regex", "generated/skbio.sequence.DNA.transcribe", "generated/skbio.sequence.DNA.translate", "generated/skbio.sequence.DNA.translate_six_frames", "generated/skbio.sequence.DNA.write", "generated/skbio.sequence.GeneticCode", "generated/skbio.sequence.GeneticCode.__eq__", "generated/skbio.sequence.GeneticCode.__ge__", "generated/skbio.sequence.GeneticCode.__gt__", "generated/skbio.sequence.GeneticCode.__le__", "generated/skbio.sequence.GeneticCode.__lt__", "generated/skbio.sequence.GeneticCode.__ne__", "generated/skbio.sequence.GeneticCode.__str__", "generated/skbio.sequence.GeneticCode.from_ncbi", "generated/skbio.sequence.GeneticCode.translate", "generated/skbio.sequence.GeneticCode.translate_six_frames", "generated/skbio.sequence.GrammaredSequence", "generated/skbio.sequence.GrammaredSequence.__bool__", "generated/skbio.sequence.GrammaredSequence.__contains__", "generated/skbio.sequence.GrammaredSequence.__copy__", "generated/skbio.sequence.GrammaredSequence.__deepcopy__", "generated/skbio.sequence.GrammaredSequence.__eq__", "generated/skbio.sequence.GrammaredSequence.__ge__", "generated/skbio.sequence.GrammaredSequence.__getitem__", "generated/skbio.sequence.GrammaredSequence.__gt__", "generated/skbio.sequence.GrammaredSequence.__iter__", "generated/skbio.sequence.GrammaredSequence.__le__", "generated/skbio.sequence.GrammaredSequence.__len__", "generated/skbio.sequence.GrammaredSequence.__lt__", "generated/skbio.sequence.GrammaredSequence.__ne__", "generated/skbio.sequence.GrammaredSequence.__reversed__", "generated/skbio.sequence.GrammaredSequence.__str__", "generated/skbio.sequence.GrammaredSequence.concat", "generated/skbio.sequence.GrammaredSequence.count", "generated/skbio.sequence.GrammaredSequence.definites", "generated/skbio.sequence.GrammaredSequence.degap", "generated/skbio.sequence.GrammaredSequence.degenerates", "generated/skbio.sequence.GrammaredSequence.distance", "generated/skbio.sequence.GrammaredSequence.expand_degenerates", "generated/skbio.sequence.GrammaredSequence.find_motifs", "generated/skbio.sequence.GrammaredSequence.find_with_regex", "generated/skbio.sequence.GrammaredSequence.frequencies", "generated/skbio.sequence.GrammaredSequence.gaps", "generated/skbio.sequence.GrammaredSequence.has_definites", "generated/skbio.sequence.GrammaredSequence.has_degenerates", "generated/skbio.sequence.GrammaredSequence.has_gaps", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata", "generated/skbio.sequence.GrammaredSequence.has_metadata", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata", "generated/skbio.sequence.GrammaredSequence.index", "generated/skbio.sequence.GrammaredSequence.iter_contiguous", "generated/skbio.sequence.GrammaredSequence.iter_kmers", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies", "generated/skbio.sequence.GrammaredSequence.lowercase", "generated/skbio.sequence.GrammaredSequence.match_frequency", "generated/skbio.sequence.GrammaredSequence.matches", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency", "generated/skbio.sequence.GrammaredSequence.mismatches", "generated/skbio.sequence.GrammaredSequence.nondegenerates", "generated/skbio.sequence.GrammaredSequence.read", "generated/skbio.sequence.GrammaredSequence.replace", "generated/skbio.sequence.GrammaredSequence.to_regex", "generated/skbio.sequence.GrammaredSequence.write", "generated/skbio.sequence.Protein", "generated/skbio.sequence.Protein.__bool__", "generated/skbio.sequence.Protein.__contains__", "generated/skbio.sequence.Protein.__copy__", "generated/skbio.sequence.Protein.__deepcopy__", "generated/skbio.sequence.Protein.__eq__", "generated/skbio.sequence.Protein.__ge__", "generated/skbio.sequence.Protein.__getitem__", "generated/skbio.sequence.Protein.__gt__", "generated/skbio.sequence.Protein.__iter__", "generated/skbio.sequence.Protein.__le__", "generated/skbio.sequence.Protein.__len__", "generated/skbio.sequence.Protein.__lt__", "generated/skbio.sequence.Protein.__ne__", "generated/skbio.sequence.Protein.__reversed__", "generated/skbio.sequence.Protein.__str__", "generated/skbio.sequence.Protein.concat", "generated/skbio.sequence.Protein.count", "generated/skbio.sequence.Protein.definites", "generated/skbio.sequence.Protein.degap", "generated/skbio.sequence.Protein.degenerates", "generated/skbio.sequence.Protein.distance", "generated/skbio.sequence.Protein.expand_degenerates", "generated/skbio.sequence.Protein.find_motifs", "generated/skbio.sequence.Protein.find_with_regex", "generated/skbio.sequence.Protein.frequencies", "generated/skbio.sequence.Protein.gaps", "generated/skbio.sequence.Protein.has_definites", "generated/skbio.sequence.Protein.has_degenerates", "generated/skbio.sequence.Protein.has_gaps", "generated/skbio.sequence.Protein.has_interval_metadata", "generated/skbio.sequence.Protein.has_metadata", "generated/skbio.sequence.Protein.has_nondegenerates", "generated/skbio.sequence.Protein.has_positional_metadata", "generated/skbio.sequence.Protein.has_stops", "generated/skbio.sequence.Protein.index", "generated/skbio.sequence.Protein.iter_contiguous", "generated/skbio.sequence.Protein.iter_kmers", "generated/skbio.sequence.Protein.kmer_frequencies", "generated/skbio.sequence.Protein.lowercase", "generated/skbio.sequence.Protein.match_frequency", "generated/skbio.sequence.Protein.matches", "generated/skbio.sequence.Protein.mismatch_frequency", "generated/skbio.sequence.Protein.mismatches", "generated/skbio.sequence.Protein.nondegenerates", "generated/skbio.sequence.Protein.read", "generated/skbio.sequence.Protein.replace", "generated/skbio.sequence.Protein.stops", "generated/skbio.sequence.Protein.to_regex", "generated/skbio.sequence.Protein.write", "generated/skbio.sequence.RNA", "generated/skbio.sequence.RNA.__bool__", "generated/skbio.sequence.RNA.__contains__", "generated/skbio.sequence.RNA.__copy__", "generated/skbio.sequence.RNA.__deepcopy__", "generated/skbio.sequence.RNA.__eq__", "generated/skbio.sequence.RNA.__ge__", "generated/skbio.sequence.RNA.__getitem__", "generated/skbio.sequence.RNA.__gt__", "generated/skbio.sequence.RNA.__iter__", "generated/skbio.sequence.RNA.__le__", "generated/skbio.sequence.RNA.__len__", "generated/skbio.sequence.RNA.__lt__", "generated/skbio.sequence.RNA.__ne__", "generated/skbio.sequence.RNA.__reversed__", "generated/skbio.sequence.RNA.__str__", "generated/skbio.sequence.RNA.complement", "generated/skbio.sequence.RNA.concat", "generated/skbio.sequence.RNA.count", "generated/skbio.sequence.RNA.definites", "generated/skbio.sequence.RNA.degap", "generated/skbio.sequence.RNA.degenerates", "generated/skbio.sequence.RNA.distance", "generated/skbio.sequence.RNA.expand_degenerates", "generated/skbio.sequence.RNA.find_motifs", "generated/skbio.sequence.RNA.find_with_regex", "generated/skbio.sequence.RNA.frequencies", "generated/skbio.sequence.RNA.gaps", "generated/skbio.sequence.RNA.gc_content", "generated/skbio.sequence.RNA.gc_frequency", "generated/skbio.sequence.RNA.has_definites", "generated/skbio.sequence.RNA.has_degenerates", "generated/skbio.sequence.RNA.has_gaps", "generated/skbio.sequence.RNA.has_interval_metadata", "generated/skbio.sequence.RNA.has_metadata", "generated/skbio.sequence.RNA.has_nondegenerates", "generated/skbio.sequence.RNA.has_positional_metadata", "generated/skbio.sequence.RNA.index", "generated/skbio.sequence.RNA.is_reverse_complement", "generated/skbio.sequence.RNA.iter_contiguous", "generated/skbio.sequence.RNA.iter_kmers", "generated/skbio.sequence.RNA.kmer_frequencies", "generated/skbio.sequence.RNA.lowercase", "generated/skbio.sequence.RNA.match_frequency", "generated/skbio.sequence.RNA.matches", "generated/skbio.sequence.RNA.mismatch_frequency", "generated/skbio.sequence.RNA.mismatches", "generated/skbio.sequence.RNA.nondegenerates", "generated/skbio.sequence.RNA.read", "generated/skbio.sequence.RNA.replace", "generated/skbio.sequence.RNA.reverse_complement", "generated/skbio.sequence.RNA.reverse_transcribe", "generated/skbio.sequence.RNA.to_regex", "generated/skbio.sequence.RNA.translate", "generated/skbio.sequence.RNA.translate_six_frames", "generated/skbio.sequence.RNA.write", "generated/skbio.sequence.Sequence", "generated/skbio.sequence.Sequence.__bool__", "generated/skbio.sequence.Sequence.__contains__", "generated/skbio.sequence.Sequence.__copy__", "generated/skbio.sequence.Sequence.__deepcopy__", "generated/skbio.sequence.Sequence.__eq__", "generated/skbio.sequence.Sequence.__ge__", "generated/skbio.sequence.Sequence.__getitem__", "generated/skbio.sequence.Sequence.__gt__", "generated/skbio.sequence.Sequence.__iter__", "generated/skbio.sequence.Sequence.__le__", "generated/skbio.sequence.Sequence.__len__", "generated/skbio.sequence.Sequence.__lt__", "generated/skbio.sequence.Sequence.__ne__", "generated/skbio.sequence.Sequence.__reversed__", "generated/skbio.sequence.Sequence.__str__", "generated/skbio.sequence.Sequence.concat", "generated/skbio.sequence.Sequence.count", "generated/skbio.sequence.Sequence.distance", "generated/skbio.sequence.Sequence.find_with_regex", "generated/skbio.sequence.Sequence.frequencies", "generated/skbio.sequence.Sequence.has_interval_metadata", "generated/skbio.sequence.Sequence.has_metadata", "generated/skbio.sequence.Sequence.has_positional_metadata", "generated/skbio.sequence.Sequence.index", "generated/skbio.sequence.Sequence.iter_contiguous", "generated/skbio.sequence.Sequence.iter_kmers", "generated/skbio.sequence.Sequence.kmer_frequencies", "generated/skbio.sequence.Sequence.lowercase", "generated/skbio.sequence.Sequence.match_frequency", "generated/skbio.sequence.Sequence.matches", "generated/skbio.sequence.Sequence.mismatch_frequency", "generated/skbio.sequence.Sequence.mismatches", "generated/skbio.sequence.Sequence.read", "generated/skbio.sequence.Sequence.replace", "generated/skbio.sequence.Sequence.write", "generated/skbio.sequence.distance", "generated/skbio.sequence.distance.hamming", "generated/skbio.sequence.distance.kmer_distance", "generated/skbio.stats.composition", "generated/skbio.stats.composition.alr", "generated/skbio.stats.composition.alr_inv", "generated/skbio.stats.composition.ancom", "generated/skbio.stats.composition.centralize", "generated/skbio.stats.composition.closure", "generated/skbio.stats.composition.clr", "generated/skbio.stats.composition.clr_inv", "generated/skbio.stats.composition.ilr", "generated/skbio.stats.composition.ilr_inv", "generated/skbio.stats.composition.inner", "generated/skbio.stats.composition.multiplicative_replacement", "generated/skbio.stats.composition.perturb", "generated/skbio.stats.composition.perturb_inv", "generated/skbio.stats.composition.power", "generated/skbio.stats.composition.sbp_basis", "generated/skbio.stats.distance", "generated/skbio.stats.distance.DissimilarityMatrix", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__", "generated/skbio.stats.distance.DissimilarityMatrix.__le__", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__", "generated/skbio.stats.distance.DissimilarityMatrix.__str__", "generated/skbio.stats.distance.DissimilarityMatrix.between", "generated/skbio.stats.distance.DissimilarityMatrix.copy", "generated/skbio.stats.distance.DissimilarityMatrix.filter", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable", "generated/skbio.stats.distance.DissimilarityMatrix.index", "generated/skbio.stats.distance.DissimilarityMatrix.plot", "generated/skbio.stats.distance.DissimilarityMatrix.read", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame", "generated/skbio.stats.distance.DissimilarityMatrix.transpose", "generated/skbio.stats.distance.DissimilarityMatrix.within", "generated/skbio.stats.distance.DissimilarityMatrix.write", "generated/skbio.stats.distance.DissimilarityMatrixError", "generated/skbio.stats.distance.DistanceMatrix", "generated/skbio.stats.distance.DistanceMatrix.__contains__", "generated/skbio.stats.distance.DistanceMatrix.__eq__", "generated/skbio.stats.distance.DistanceMatrix.__ge__", "generated/skbio.stats.distance.DistanceMatrix.__getitem__", "generated/skbio.stats.distance.DistanceMatrix.__gt__", "generated/skbio.stats.distance.DistanceMatrix.__le__", "generated/skbio.stats.distance.DistanceMatrix.__lt__", "generated/skbio.stats.distance.DistanceMatrix.__ne__", "generated/skbio.stats.distance.DistanceMatrix.__str__", "generated/skbio.stats.distance.DistanceMatrix.between", "generated/skbio.stats.distance.DistanceMatrix.condensed_form", "generated/skbio.stats.distance.DistanceMatrix.copy", "generated/skbio.stats.distance.DistanceMatrix.filter", "generated/skbio.stats.distance.DistanceMatrix.from_iterable", "generated/skbio.stats.distance.DistanceMatrix.index", "generated/skbio.stats.distance.DistanceMatrix.permute", "generated/skbio.stats.distance.DistanceMatrix.plot", "generated/skbio.stats.distance.DistanceMatrix.read", "generated/skbio.stats.distance.DistanceMatrix.redundant_form", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame", "generated/skbio.stats.distance.DistanceMatrix.to_series", "generated/skbio.stats.distance.DistanceMatrix.transpose", "generated/skbio.stats.distance.DistanceMatrix.within", "generated/skbio.stats.distance.DistanceMatrix.write", "generated/skbio.stats.distance.DistanceMatrixError", "generated/skbio.stats.distance.MissingIDError", "generated/skbio.stats.distance.anosim", "generated/skbio.stats.distance.bioenv", "generated/skbio.stats.distance.mantel", "generated/skbio.stats.distance.permanova", "generated/skbio.stats.distance.permdisp", "generated/skbio.stats.distance.pwmantel", "generated/skbio.stats.distance.randdm", "generated/skbio.stats.evolve", "generated/skbio.stats.evolve.hommola_cospeciation", "generated/skbio.stats.gradient", "generated/skbio.stats.gradient.AverageGradientANOVA", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.CategoryResults", "generated/skbio.stats.gradient.CategoryResults.__eq__", "generated/skbio.stats.gradient.CategoryResults.__ge__", "generated/skbio.stats.gradient.CategoryResults.__gt__", "generated/skbio.stats.gradient.CategoryResults.__hash__", "generated/skbio.stats.gradient.CategoryResults.__le__", "generated/skbio.stats.gradient.CategoryResults.__lt__", "generated/skbio.stats.gradient.CategoryResults.__ne__", "generated/skbio.stats.gradient.CategoryResults.__str__", "generated/skbio.stats.gradient.CategoryResults.to_files", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVA", "generated/skbio.stats.gradient.GradientANOVA.__eq__", "generated/skbio.stats.gradient.GradientANOVA.__ge__", "generated/skbio.stats.gradient.GradientANOVA.__gt__", "generated/skbio.stats.gradient.GradientANOVA.__hash__", "generated/skbio.stats.gradient.GradientANOVA.__le__", "generated/skbio.stats.gradient.GradientANOVA.__lt__", "generated/skbio.stats.gradient.GradientANOVA.__ne__", "generated/skbio.stats.gradient.GradientANOVA.__str__", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories", "generated/skbio.stats.gradient.GradientANOVAResults", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__", "generated/skbio.stats.gradient.GradientANOVAResults.__le__", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__", "generated/skbio.stats.gradient.GradientANOVAResults.__str__", "generated/skbio.stats.gradient.GradientANOVAResults.to_files", "generated/skbio.stats.gradient.GroupResults", "generated/skbio.stats.gradient.GroupResults.__eq__", "generated/skbio.stats.gradient.GroupResults.__ge__", "generated/skbio.stats.gradient.GroupResults.__gt__", "generated/skbio.stats.gradient.GroupResults.__hash__", "generated/skbio.stats.gradient.GroupResults.__le__", "generated/skbio.stats.gradient.GroupResults.__lt__", "generated/skbio.stats.gradient.GroupResults.__ne__", "generated/skbio.stats.gradient.GroupResults.__str__", "generated/skbio.stats.gradient.GroupResults.to_files", "generated/skbio.stats.gradient.TrajectoryGradientANOVA", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "generated/skbio.stats.isubsample", "generated/skbio.stats.ordination", "generated/skbio.stats.ordination.OrdinationResults", "generated/skbio.stats.ordination.OrdinationResults.__eq__", "generated/skbio.stats.ordination.OrdinationResults.__ge__", "generated/skbio.stats.ordination.OrdinationResults.__gt__", "generated/skbio.stats.ordination.OrdinationResults.__hash__", "generated/skbio.stats.ordination.OrdinationResults.__le__", "generated/skbio.stats.ordination.OrdinationResults.__lt__", "generated/skbio.stats.ordination.OrdinationResults.__ne__", "generated/skbio.stats.ordination.OrdinationResults.__str__", "generated/skbio.stats.ordination.OrdinationResults.plot", "generated/skbio.stats.ordination.OrdinationResults.read", "generated/skbio.stats.ordination.OrdinationResults.write", "generated/skbio.stats.ordination.ca", "generated/skbio.stats.ordination.cca", "generated/skbio.stats.ordination.corr", "generated/skbio.stats.ordination.e_matrix", "generated/skbio.stats.ordination.f_matrix", "generated/skbio.stats.ordination.mean_and_std", "generated/skbio.stats.ordination.pcoa", "generated/skbio.stats.ordination.pcoa_biplot", "generated/skbio.stats.ordination.rda", "generated/skbio.stats.ordination.scale", "generated/skbio.stats.ordination.svd_rank", "generated/skbio.stats.power", "generated/skbio.stats.power.confidence_bound", "generated/skbio.stats.power.paired_subsamples", "generated/skbio.stats.power.subsample_paired_power", "generated/skbio.stats.power.subsample_power", "generated/skbio.stats.subsample_counts", "generated/skbio.tree.DuplicateNodeError", "generated/skbio.tree.MissingNodeError", "generated/skbio.tree.NoLengthError", "generated/skbio.tree.NoParentError", "generated/skbio.tree.TreeError", "generated/skbio.tree.TreeNode", "generated/skbio.tree.TreeNode.__copy__", "generated/skbio.tree.TreeNode.__deepcopy__", "generated/skbio.tree.TreeNode.__eq__", "generated/skbio.tree.TreeNode.__ge__", "generated/skbio.tree.TreeNode.__getitem__", "generated/skbio.tree.TreeNode.__gt__", "generated/skbio.tree.TreeNode.__hash__", "generated/skbio.tree.TreeNode.__iter__", "generated/skbio.tree.TreeNode.__le__", "generated/skbio.tree.TreeNode.__len__", "generated/skbio.tree.TreeNode.__lt__", "generated/skbio.tree.TreeNode.__ne__", "generated/skbio.tree.TreeNode.__str__", "generated/skbio.tree.TreeNode.accumulate_to_ancestor", "generated/skbio.tree.TreeNode.ancestors", "generated/skbio.tree.TreeNode.append", "generated/skbio.tree.TreeNode.ascii_art", "generated/skbio.tree.TreeNode.assign_ids", "generated/skbio.tree.TreeNode.assign_supports", "generated/skbio.tree.TreeNode.bifurcate", "generated/skbio.tree.TreeNode.cache_attr", "generated/skbio.tree.TreeNode.compare_rfd", "generated/skbio.tree.TreeNode.compare_subsets", "generated/skbio.tree.TreeNode.compare_tip_distances", "generated/skbio.tree.TreeNode.copy", "generated/skbio.tree.TreeNode.count", "generated/skbio.tree.TreeNode.create_caches", "generated/skbio.tree.TreeNode.deepcopy", "generated/skbio.tree.TreeNode.descending_branch_length", "generated/skbio.tree.TreeNode.distance", "generated/skbio.tree.TreeNode.extend", "generated/skbio.tree.TreeNode.find", "generated/skbio.tree.TreeNode.find_all", "generated/skbio.tree.TreeNode.find_by_func", "generated/skbio.tree.TreeNode.find_by_id", "generated/skbio.tree.TreeNode.from_linkage_matrix", "generated/skbio.tree.TreeNode.from_taxdump", "generated/skbio.tree.TreeNode.from_taxonomy", "generated/skbio.tree.TreeNode.get_max_distance", "generated/skbio.tree.TreeNode.has_children", "generated/skbio.tree.TreeNode.index_tree", "generated/skbio.tree.TreeNode.invalidate_caches", "generated/skbio.tree.TreeNode.is_root", "generated/skbio.tree.TreeNode.is_tip", "generated/skbio.tree.TreeNode.lca", "generated/skbio.tree.TreeNode.levelorder", "generated/skbio.tree.TreeNode.lowest_common_ancestor", "generated/skbio.tree.TreeNode.neighbors", "generated/skbio.tree.TreeNode.non_tips", "generated/skbio.tree.TreeNode.observed_node_counts", "generated/skbio.tree.TreeNode.pop", "generated/skbio.tree.TreeNode.postorder", "generated/skbio.tree.TreeNode.pre_and_postorder", "generated/skbio.tree.TreeNode.preorder", "generated/skbio.tree.TreeNode.prune", "generated/skbio.tree.TreeNode.read", "generated/skbio.tree.TreeNode.remove", "generated/skbio.tree.TreeNode.remove_deleted", "generated/skbio.tree.TreeNode.root", "generated/skbio.tree.TreeNode.root_at", "generated/skbio.tree.TreeNode.root_at_midpoint", "generated/skbio.tree.TreeNode.shear", "generated/skbio.tree.TreeNode.shuffle", "generated/skbio.tree.TreeNode.siblings", "generated/skbio.tree.TreeNode.subset", "generated/skbio.tree.TreeNode.subsets", "generated/skbio.tree.TreeNode.subtree", "generated/skbio.tree.TreeNode.tip_tip_distances", "generated/skbio.tree.TreeNode.tips", "generated/skbio.tree.TreeNode.to_array", "generated/skbio.tree.TreeNode.to_taxonomy", "generated/skbio.tree.TreeNode.traverse", "generated/skbio.tree.TreeNode.unpack", "generated/skbio.tree.TreeNode.unpack_by_func", "generated/skbio.tree.TreeNode.unrooted_copy", "generated/skbio.tree.TreeNode.unrooted_deepcopy", "generated/skbio.tree.TreeNode.write", "generated/skbio.tree.majority_rule", "generated/skbio.tree.nj", "generated/skbio.util.EfficiencyWarning", "generated/skbio.util.RepresentationWarning", "generated/skbio.util.assert_data_frame_almost_equal", "generated/skbio.util.assert_ordination_results_equal", "generated/skbio.util.cardinal_to_ordinal", "generated/skbio.util.classproperty", "generated/skbio.util.classproperty.__delete__", "generated/skbio.util.classproperty.__eq__", "generated/skbio.util.classproperty.__ge__", "generated/skbio.util.classproperty.__get__", "generated/skbio.util.classproperty.__gt__", "generated/skbio.util.classproperty.__hash__", "generated/skbio.util.classproperty.__le__", "generated/skbio.util.classproperty.__lt__", "generated/skbio.util.classproperty.__ne__", "generated/skbio.util.classproperty.__set__", "generated/skbio.util.classproperty.__set_name__", "generated/skbio.util.classproperty.__str__", "generated/skbio.util.classproperty.deleter", "generated/skbio.util.classproperty.getter", "generated/skbio.util.classproperty.setter", "generated/skbio.util.find_duplicates", "generated/skbio.util.get_data_path", "generated/skbio.util.safe_md5", "generated/skbio.workflow.Workflow", "generated/skbio.workflow.Workflow.__call__", "generated/skbio.workflow.Workflow.__eq__", "generated/skbio.workflow.Workflow.__ge__", "generated/skbio.workflow.Workflow.__gt__", "generated/skbio.workflow.Workflow.__hash__", "generated/skbio.workflow.Workflow.__le__", "generated/skbio.workflow.Workflow.__lt__", "generated/skbio.workflow.Workflow.__ne__", "generated/skbio.workflow.Workflow.__str__", "generated/skbio.workflow.Workflow.initialize_state", "generated/skbio.workflow.method", "generated/skbio.workflow.method.__call__", "generated/skbio.workflow.method.__eq__", "generated/skbio.workflow.method.__ge__", "generated/skbio.workflow.method.__gt__", "generated/skbio.workflow.method.__hash__", "generated/skbio.workflow.method.__le__", "generated/skbio.workflow.method.__lt__", "generated/skbio.workflow.method.__ne__", "generated/skbio.workflow.method.__str__", "generated/skbio.workflow.requires", "generated/skbio.workflow.requires.__call__", "generated/skbio.workflow.requires.__eq__", "generated/skbio.workflow.requires.__ge__", "generated/skbio.workflow.requires.__gt__", "generated/skbio.workflow.requires.__hash__", "generated/skbio.workflow.requires.__le__", "generated/skbio.workflow.requires.__lt__", "generated/skbio.workflow.requires.__ne__", "generated/skbio.workflow.requires.__str__", "index", "io", "metadata", "sequence", "stats", "tree", "user/api_stability", "util", "workflow"], "filenames": ["alignment.rst", "development/coding_guidelines.rst", "development/new_module.rst", "diversity.rst", "generated/generated/skbio.io.util.open.rst", "generated/generated/skbio.io.util.open_file.rst", "generated/generated/skbio.io.util.open_files.rst", "generated/skbio.alignment.AlignmentStructure.rst", "generated/skbio.alignment.AlignmentStructure.__eq__.rst", "generated/skbio.alignment.AlignmentStructure.__ge__.rst", "generated/skbio.alignment.AlignmentStructure.__getitem__.rst", "generated/skbio.alignment.AlignmentStructure.__gt__.rst", "generated/skbio.alignment.AlignmentStructure.__hash__.rst", "generated/skbio.alignment.AlignmentStructure.__le__.rst", "generated/skbio.alignment.AlignmentStructure.__lt__.rst", "generated/skbio.alignment.AlignmentStructure.__ne__.rst", "generated/skbio.alignment.AlignmentStructure.__setstate__.rst", "generated/skbio.alignment.AlignmentStructure.__str__.rst", "generated/skbio.alignment.AlignmentStructure.is_zero_based.rst", "generated/skbio.alignment.AlignmentStructure.set_zero_based.rst", "generated/skbio.alignment.StripedSmithWaterman.rst", "generated/skbio.alignment.StripedSmithWaterman.__call__.rst", "generated/skbio.alignment.StripedSmithWaterman.__eq__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ge__.rst", "generated/skbio.alignment.StripedSmithWaterman.__gt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__hash__.rst", "generated/skbio.alignment.StripedSmithWaterman.__le__.rst", "generated/skbio.alignment.StripedSmithWaterman.__lt__.rst", "generated/skbio.alignment.StripedSmithWaterman.__ne__.rst", "generated/skbio.alignment.StripedSmithWaterman.__setstate__.rst", "generated/skbio.alignment.StripedSmithWaterman.__str__.rst", "generated/skbio.alignment.TabularMSA.rst", "generated/skbio.alignment.TabularMSA.__bool__.rst", "generated/skbio.alignment.TabularMSA.__contains__.rst", "generated/skbio.alignment.TabularMSA.__copy__.rst", "generated/skbio.alignment.TabularMSA.__deepcopy__.rst", "generated/skbio.alignment.TabularMSA.__eq__.rst", "generated/skbio.alignment.TabularMSA.__ge__.rst", "generated/skbio.alignment.TabularMSA.__getitem__.rst", "generated/skbio.alignment.TabularMSA.__gt__.rst", "generated/skbio.alignment.TabularMSA.__iter__.rst", "generated/skbio.alignment.TabularMSA.__le__.rst", "generated/skbio.alignment.TabularMSA.__len__.rst", "generated/skbio.alignment.TabularMSA.__lt__.rst", "generated/skbio.alignment.TabularMSA.__ne__.rst", "generated/skbio.alignment.TabularMSA.__reversed__.rst", "generated/skbio.alignment.TabularMSA.__str__.rst", "generated/skbio.alignment.TabularMSA.append.rst", "generated/skbio.alignment.TabularMSA.consensus.rst", "generated/skbio.alignment.TabularMSA.conservation.rst", "generated/skbio.alignment.TabularMSA.extend.rst", "generated/skbio.alignment.TabularMSA.from_dict.rst", "generated/skbio.alignment.TabularMSA.gap_frequencies.rst", "generated/skbio.alignment.TabularMSA.has_metadata.rst", "generated/skbio.alignment.TabularMSA.has_positional_metadata.rst", "generated/skbio.alignment.TabularMSA.iter_positions.rst", "generated/skbio.alignment.TabularMSA.join.rst", "generated/skbio.alignment.TabularMSA.read.rst", "generated/skbio.alignment.TabularMSA.reassign_index.rst", "generated/skbio.alignment.TabularMSA.sort.rst", "generated/skbio.alignment.TabularMSA.to_dict.rst", "generated/skbio.alignment.TabularMSA.write.rst", "generated/skbio.alignment.global_pairwise_align.rst", "generated/skbio.alignment.global_pairwise_align_nucleotide.rst", "generated/skbio.alignment.global_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align.rst", "generated/skbio.alignment.local_pairwise_align_nucleotide.rst", "generated/skbio.alignment.local_pairwise_align_protein.rst", "generated/skbio.alignment.local_pairwise_align_ssw.rst", "generated/skbio.alignment.make_identity_substitution_matrix.rst", "generated/skbio.diversity.alpha.rst", "generated/skbio.diversity.alpha.ace.rst", "generated/skbio.diversity.alpha.berger_parker_d.rst", "generated/skbio.diversity.alpha.brillouin_d.rst", "generated/skbio.diversity.alpha.chao1.rst", "generated/skbio.diversity.alpha.chao1_ci.rst", "generated/skbio.diversity.alpha.dominance.rst", "generated/skbio.diversity.alpha.doubles.rst", "generated/skbio.diversity.alpha.enspie.rst", "generated/skbio.diversity.alpha.esty_ci.rst", "generated/skbio.diversity.alpha.faith_pd.rst", "generated/skbio.diversity.alpha.fisher_alpha.rst", "generated/skbio.diversity.alpha.gini_index.rst", "generated/skbio.diversity.alpha.goods_coverage.rst", "generated/skbio.diversity.alpha.heip_e.rst", "generated/skbio.diversity.alpha.kempton_taylor_q.rst", "generated/skbio.diversity.alpha.lladser_ci.rst", "generated/skbio.diversity.alpha.lladser_pe.rst", "generated/skbio.diversity.alpha.margalef.rst", "generated/skbio.diversity.alpha.mcintosh_d.rst", "generated/skbio.diversity.alpha.mcintosh_e.rst", "generated/skbio.diversity.alpha.menhinick.rst", "generated/skbio.diversity.alpha.michaelis_menten_fit.rst", "generated/skbio.diversity.alpha.observed_otus.rst", "generated/skbio.diversity.alpha.osd.rst", "generated/skbio.diversity.alpha.pielou_e.rst", "generated/skbio.diversity.alpha.robbins.rst", "generated/skbio.diversity.alpha.shannon.rst", "generated/skbio.diversity.alpha.simpson.rst", "generated/skbio.diversity.alpha.simpson_e.rst", "generated/skbio.diversity.alpha.singles.rst", "generated/skbio.diversity.alpha.strong.rst", "generated/skbio.diversity.alpha_diversity.rst", "generated/skbio.diversity.beta.rst", "generated/skbio.diversity.beta.unweighted_unifrac.rst", "generated/skbio.diversity.beta.weighted_unifrac.rst", "generated/skbio.diversity.beta_diversity.rst", "generated/skbio.diversity.block_beta_diversity.rst", "generated/skbio.diversity.get_alpha_diversity_metrics.rst", "generated/skbio.diversity.get_beta_diversity_metrics.rst", "generated/skbio.diversity.partial_beta_diversity.rst", "generated/skbio.io.ArgumentOverrideWarning.rst", "generated/skbio.io.BLAST7FormatError.rst", "generated/skbio.io.ClustalFormatError.rst", "generated/skbio.io.EMBLFormatError.rst", "generated/skbio.io.FASTAFormatError.rst", "generated/skbio.io.FASTQFormatError.rst", "generated/skbio.io.FileFormatError.rst", "generated/skbio.io.FormatIdentificationWarning.rst", "generated/skbio.io.GFF3FormatError.rst", "generated/skbio.io.GenBankFormatError.rst", "generated/skbio.io.IOSourceError.rst", "generated/skbio.io.LSMatFormatError.rst", "generated/skbio.io.NewickFormatError.rst", "generated/skbio.io.OrdinationFormatError.rst", "generated/skbio.io.PhylipFormatError.rst", "generated/skbio.io.QSeqFormatError.rst", "generated/skbio.io.QUALFormatError.rst", "generated/skbio.io.StockholmFormatError.rst", "generated/skbio.io.UnrecognizedFormatError.rst", "generated/skbio.io.format.binary_dm.rst", "generated/skbio.io.format.blast6.rst", "generated/skbio.io.format.blast7.rst", "generated/skbio.io.format.clustal.rst", "generated/skbio.io.format.embl.rst", "generated/skbio.io.format.fasta.rst", "generated/skbio.io.format.fastq.rst", "generated/skbio.io.format.genbank.rst", "generated/skbio.io.format.gff3.rst", "generated/skbio.io.format.lsmat.rst", "generated/skbio.io.format.newick.rst", "generated/skbio.io.format.ordination.rst", "generated/skbio.io.format.phylip.rst", "generated/skbio.io.format.qseq.rst", "generated/skbio.io.format.stockholm.rst", "generated/skbio.io.format.taxdump.rst", "generated/skbio.io.registry.rst", "generated/skbio.io.registry.DuplicateRegistrationError.rst", "generated/skbio.io.registry.Format.rst", "generated/skbio.io.registry.Format.__eq__.rst", "generated/skbio.io.registry.Format.__ge__.rst", "generated/skbio.io.registry.Format.__gt__.rst", "generated/skbio.io.registry.Format.__hash__.rst", "generated/skbio.io.registry.Format.__le__.rst", "generated/skbio.io.registry.Format.__lt__.rst", "generated/skbio.io.registry.Format.__ne__.rst", "generated/skbio.io.registry.Format.__str__.rst", "generated/skbio.io.registry.Format.reader.rst", "generated/skbio.io.registry.Format.sniffer.rst", "generated/skbio.io.registry.Format.writer.rst", "generated/skbio.io.registry.IORegistry.rst", "generated/skbio.io.registry.IORegistry.__eq__.rst", "generated/skbio.io.registry.IORegistry.__ge__.rst", "generated/skbio.io.registry.IORegistry.__gt__.rst", "generated/skbio.io.registry.IORegistry.__hash__.rst", "generated/skbio.io.registry.IORegistry.__le__.rst", "generated/skbio.io.registry.IORegistry.__lt__.rst", "generated/skbio.io.registry.IORegistry.__ne__.rst", "generated/skbio.io.registry.IORegistry.__str__.rst", "generated/skbio.io.registry.IORegistry.add_format.rst", "generated/skbio.io.registry.IORegistry.create_format.rst", "generated/skbio.io.registry.IORegistry.get_reader.rst", "generated/skbio.io.registry.IORegistry.get_sniffer.rst", "generated/skbio.io.registry.IORegistry.get_writer.rst", "generated/skbio.io.registry.IORegistry.list_read_formats.rst", "generated/skbio.io.registry.IORegistry.list_write_formats.rst", "generated/skbio.io.registry.IORegistry.monkey_patch.rst", "generated/skbio.io.registry.IORegistry.read.rst", "generated/skbio.io.registry.IORegistry.sniff.rst", "generated/skbio.io.registry.IORegistry.write.rst", "generated/skbio.io.registry.InvalidRegistrationError.rst", "generated/skbio.io.registry.create_format.rst", "generated/skbio.io.registry.read.rst", "generated/skbio.io.registry.sniff.rst", "generated/skbio.io.registry.write.rst", "generated/skbio.io.util.rst", "generated/skbio.metadata.Interval.rst", "generated/skbio.metadata.Interval.__eq__.rst", "generated/skbio.metadata.Interval.__ge__.rst", "generated/skbio.metadata.Interval.__gt__.rst", "generated/skbio.metadata.Interval.__le__.rst", "generated/skbio.metadata.Interval.__lt__.rst", "generated/skbio.metadata.Interval.__ne__.rst", "generated/skbio.metadata.Interval.__str__.rst", "generated/skbio.metadata.Interval.drop.rst", "generated/skbio.metadata.IntervalMetadata.rst", "generated/skbio.metadata.IntervalMetadata.__copy__.rst", "generated/skbio.metadata.IntervalMetadata.__deepcopy__.rst", "generated/skbio.metadata.IntervalMetadata.__eq__.rst", "generated/skbio.metadata.IntervalMetadata.__ge__.rst", "generated/skbio.metadata.IntervalMetadata.__gt__.rst", "generated/skbio.metadata.IntervalMetadata.__le__.rst", "generated/skbio.metadata.IntervalMetadata.__lt__.rst", "generated/skbio.metadata.IntervalMetadata.__ne__.rst", "generated/skbio.metadata.IntervalMetadata.__str__.rst", "generated/skbio.metadata.IntervalMetadata.add.rst", "generated/skbio.metadata.IntervalMetadata.concat.rst", "generated/skbio.metadata.IntervalMetadata.drop.rst", "generated/skbio.metadata.IntervalMetadata.merge.rst", "generated/skbio.metadata.IntervalMetadata.query.rst", "generated/skbio.metadata.IntervalMetadata.read.rst", "generated/skbio.metadata.IntervalMetadata.sort.rst", "generated/skbio.metadata.IntervalMetadata.write.rst", "generated/skbio.sequence.DNA.rst", "generated/skbio.sequence.DNA.__bool__.rst", "generated/skbio.sequence.DNA.__contains__.rst", "generated/skbio.sequence.DNA.__copy__.rst", "generated/skbio.sequence.DNA.__deepcopy__.rst", "generated/skbio.sequence.DNA.__eq__.rst", "generated/skbio.sequence.DNA.__ge__.rst", "generated/skbio.sequence.DNA.__getitem__.rst", "generated/skbio.sequence.DNA.__gt__.rst", "generated/skbio.sequence.DNA.__iter__.rst", "generated/skbio.sequence.DNA.__le__.rst", "generated/skbio.sequence.DNA.__len__.rst", "generated/skbio.sequence.DNA.__lt__.rst", "generated/skbio.sequence.DNA.__ne__.rst", "generated/skbio.sequence.DNA.__reversed__.rst", "generated/skbio.sequence.DNA.__str__.rst", "generated/skbio.sequence.DNA.complement.rst", "generated/skbio.sequence.DNA.concat.rst", "generated/skbio.sequence.DNA.count.rst", "generated/skbio.sequence.DNA.definites.rst", "generated/skbio.sequence.DNA.degap.rst", "generated/skbio.sequence.DNA.degenerates.rst", "generated/skbio.sequence.DNA.distance.rst", "generated/skbio.sequence.DNA.expand_degenerates.rst", "generated/skbio.sequence.DNA.find_motifs.rst", "generated/skbio.sequence.DNA.find_with_regex.rst", "generated/skbio.sequence.DNA.frequencies.rst", "generated/skbio.sequence.DNA.gaps.rst", "generated/skbio.sequence.DNA.gc_content.rst", "generated/skbio.sequence.DNA.gc_frequency.rst", "generated/skbio.sequence.DNA.has_definites.rst", "generated/skbio.sequence.DNA.has_degenerates.rst", "generated/skbio.sequence.DNA.has_gaps.rst", "generated/skbio.sequence.DNA.has_interval_metadata.rst", "generated/skbio.sequence.DNA.has_metadata.rst", "generated/skbio.sequence.DNA.has_nondegenerates.rst", "generated/skbio.sequence.DNA.has_positional_metadata.rst", "generated/skbio.sequence.DNA.index.rst", "generated/skbio.sequence.DNA.is_reverse_complement.rst", "generated/skbio.sequence.DNA.iter_contiguous.rst", "generated/skbio.sequence.DNA.iter_kmers.rst", "generated/skbio.sequence.DNA.kmer_frequencies.rst", "generated/skbio.sequence.DNA.lowercase.rst", "generated/skbio.sequence.DNA.match_frequency.rst", "generated/skbio.sequence.DNA.matches.rst", "generated/skbio.sequence.DNA.mismatch_frequency.rst", "generated/skbio.sequence.DNA.mismatches.rst", "generated/skbio.sequence.DNA.nondegenerates.rst", "generated/skbio.sequence.DNA.read.rst", "generated/skbio.sequence.DNA.replace.rst", "generated/skbio.sequence.DNA.reverse_complement.rst", "generated/skbio.sequence.DNA.to_regex.rst", "generated/skbio.sequence.DNA.transcribe.rst", "generated/skbio.sequence.DNA.translate.rst", "generated/skbio.sequence.DNA.translate_six_frames.rst", "generated/skbio.sequence.DNA.write.rst", "generated/skbio.sequence.GeneticCode.rst", "generated/skbio.sequence.GeneticCode.__eq__.rst", "generated/skbio.sequence.GeneticCode.__ge__.rst", "generated/skbio.sequence.GeneticCode.__gt__.rst", "generated/skbio.sequence.GeneticCode.__le__.rst", "generated/skbio.sequence.GeneticCode.__lt__.rst", "generated/skbio.sequence.GeneticCode.__ne__.rst", "generated/skbio.sequence.GeneticCode.__str__.rst", "generated/skbio.sequence.GeneticCode.from_ncbi.rst", "generated/skbio.sequence.GeneticCode.translate.rst", "generated/skbio.sequence.GeneticCode.translate_six_frames.rst", "generated/skbio.sequence.GrammaredSequence.rst", "generated/skbio.sequence.GrammaredSequence.__bool__.rst", "generated/skbio.sequence.GrammaredSequence.__contains__.rst", "generated/skbio.sequence.GrammaredSequence.__copy__.rst", "generated/skbio.sequence.GrammaredSequence.__deepcopy__.rst", "generated/skbio.sequence.GrammaredSequence.__eq__.rst", "generated/skbio.sequence.GrammaredSequence.__ge__.rst", "generated/skbio.sequence.GrammaredSequence.__getitem__.rst", "generated/skbio.sequence.GrammaredSequence.__gt__.rst", "generated/skbio.sequence.GrammaredSequence.__iter__.rst", "generated/skbio.sequence.GrammaredSequence.__le__.rst", "generated/skbio.sequence.GrammaredSequence.__len__.rst", "generated/skbio.sequence.GrammaredSequence.__lt__.rst", "generated/skbio.sequence.GrammaredSequence.__ne__.rst", "generated/skbio.sequence.GrammaredSequence.__reversed__.rst", "generated/skbio.sequence.GrammaredSequence.__str__.rst", "generated/skbio.sequence.GrammaredSequence.concat.rst", "generated/skbio.sequence.GrammaredSequence.count.rst", "generated/skbio.sequence.GrammaredSequence.definites.rst", "generated/skbio.sequence.GrammaredSequence.degap.rst", "generated/skbio.sequence.GrammaredSequence.degenerates.rst", "generated/skbio.sequence.GrammaredSequence.distance.rst", "generated/skbio.sequence.GrammaredSequence.expand_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.find_motifs.rst", "generated/skbio.sequence.GrammaredSequence.find_with_regex.rst", "generated/skbio.sequence.GrammaredSequence.frequencies.rst", "generated/skbio.sequence.GrammaredSequence.gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_definites.rst", "generated/skbio.sequence.GrammaredSequence.has_degenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_gaps.rst", "generated/skbio.sequence.GrammaredSequence.has_interval_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_metadata.rst", "generated/skbio.sequence.GrammaredSequence.has_nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.has_positional_metadata.rst", "generated/skbio.sequence.GrammaredSequence.index.rst", "generated/skbio.sequence.GrammaredSequence.iter_contiguous.rst", "generated/skbio.sequence.GrammaredSequence.iter_kmers.rst", "generated/skbio.sequence.GrammaredSequence.kmer_frequencies.rst", "generated/skbio.sequence.GrammaredSequence.lowercase.rst", "generated/skbio.sequence.GrammaredSequence.match_frequency.rst", "generated/skbio.sequence.GrammaredSequence.matches.rst", "generated/skbio.sequence.GrammaredSequence.mismatch_frequency.rst", "generated/skbio.sequence.GrammaredSequence.mismatches.rst", "generated/skbio.sequence.GrammaredSequence.nondegenerates.rst", "generated/skbio.sequence.GrammaredSequence.read.rst", "generated/skbio.sequence.GrammaredSequence.replace.rst", "generated/skbio.sequence.GrammaredSequence.to_regex.rst", "generated/skbio.sequence.GrammaredSequence.write.rst", "generated/skbio.sequence.Protein.rst", "generated/skbio.sequence.Protein.__bool__.rst", "generated/skbio.sequence.Protein.__contains__.rst", "generated/skbio.sequence.Protein.__copy__.rst", "generated/skbio.sequence.Protein.__deepcopy__.rst", "generated/skbio.sequence.Protein.__eq__.rst", "generated/skbio.sequence.Protein.__ge__.rst", "generated/skbio.sequence.Protein.__getitem__.rst", "generated/skbio.sequence.Protein.__gt__.rst", "generated/skbio.sequence.Protein.__iter__.rst", "generated/skbio.sequence.Protein.__le__.rst", "generated/skbio.sequence.Protein.__len__.rst", "generated/skbio.sequence.Protein.__lt__.rst", "generated/skbio.sequence.Protein.__ne__.rst", "generated/skbio.sequence.Protein.__reversed__.rst", "generated/skbio.sequence.Protein.__str__.rst", "generated/skbio.sequence.Protein.concat.rst", "generated/skbio.sequence.Protein.count.rst", "generated/skbio.sequence.Protein.definites.rst", "generated/skbio.sequence.Protein.degap.rst", "generated/skbio.sequence.Protein.degenerates.rst", "generated/skbio.sequence.Protein.distance.rst", "generated/skbio.sequence.Protein.expand_degenerates.rst", "generated/skbio.sequence.Protein.find_motifs.rst", "generated/skbio.sequence.Protein.find_with_regex.rst", "generated/skbio.sequence.Protein.frequencies.rst", "generated/skbio.sequence.Protein.gaps.rst", "generated/skbio.sequence.Protein.has_definites.rst", "generated/skbio.sequence.Protein.has_degenerates.rst", "generated/skbio.sequence.Protein.has_gaps.rst", "generated/skbio.sequence.Protein.has_interval_metadata.rst", "generated/skbio.sequence.Protein.has_metadata.rst", "generated/skbio.sequence.Protein.has_nondegenerates.rst", "generated/skbio.sequence.Protein.has_positional_metadata.rst", "generated/skbio.sequence.Protein.has_stops.rst", "generated/skbio.sequence.Protein.index.rst", "generated/skbio.sequence.Protein.iter_contiguous.rst", "generated/skbio.sequence.Protein.iter_kmers.rst", "generated/skbio.sequence.Protein.kmer_frequencies.rst", "generated/skbio.sequence.Protein.lowercase.rst", "generated/skbio.sequence.Protein.match_frequency.rst", "generated/skbio.sequence.Protein.matches.rst", "generated/skbio.sequence.Protein.mismatch_frequency.rst", "generated/skbio.sequence.Protein.mismatches.rst", "generated/skbio.sequence.Protein.nondegenerates.rst", "generated/skbio.sequence.Protein.read.rst", "generated/skbio.sequence.Protein.replace.rst", "generated/skbio.sequence.Protein.stops.rst", "generated/skbio.sequence.Protein.to_regex.rst", "generated/skbio.sequence.Protein.write.rst", "generated/skbio.sequence.RNA.rst", "generated/skbio.sequence.RNA.__bool__.rst", "generated/skbio.sequence.RNA.__contains__.rst", "generated/skbio.sequence.RNA.__copy__.rst", "generated/skbio.sequence.RNA.__deepcopy__.rst", "generated/skbio.sequence.RNA.__eq__.rst", "generated/skbio.sequence.RNA.__ge__.rst", "generated/skbio.sequence.RNA.__getitem__.rst", "generated/skbio.sequence.RNA.__gt__.rst", "generated/skbio.sequence.RNA.__iter__.rst", "generated/skbio.sequence.RNA.__le__.rst", "generated/skbio.sequence.RNA.__len__.rst", "generated/skbio.sequence.RNA.__lt__.rst", "generated/skbio.sequence.RNA.__ne__.rst", "generated/skbio.sequence.RNA.__reversed__.rst", "generated/skbio.sequence.RNA.__str__.rst", "generated/skbio.sequence.RNA.complement.rst", "generated/skbio.sequence.RNA.concat.rst", "generated/skbio.sequence.RNA.count.rst", "generated/skbio.sequence.RNA.definites.rst", "generated/skbio.sequence.RNA.degap.rst", "generated/skbio.sequence.RNA.degenerates.rst", "generated/skbio.sequence.RNA.distance.rst", "generated/skbio.sequence.RNA.expand_degenerates.rst", "generated/skbio.sequence.RNA.find_motifs.rst", "generated/skbio.sequence.RNA.find_with_regex.rst", "generated/skbio.sequence.RNA.frequencies.rst", "generated/skbio.sequence.RNA.gaps.rst", "generated/skbio.sequence.RNA.gc_content.rst", "generated/skbio.sequence.RNA.gc_frequency.rst", "generated/skbio.sequence.RNA.has_definites.rst", "generated/skbio.sequence.RNA.has_degenerates.rst", "generated/skbio.sequence.RNA.has_gaps.rst", "generated/skbio.sequence.RNA.has_interval_metadata.rst", "generated/skbio.sequence.RNA.has_metadata.rst", "generated/skbio.sequence.RNA.has_nondegenerates.rst", "generated/skbio.sequence.RNA.has_positional_metadata.rst", "generated/skbio.sequence.RNA.index.rst", "generated/skbio.sequence.RNA.is_reverse_complement.rst", "generated/skbio.sequence.RNA.iter_contiguous.rst", "generated/skbio.sequence.RNA.iter_kmers.rst", "generated/skbio.sequence.RNA.kmer_frequencies.rst", "generated/skbio.sequence.RNA.lowercase.rst", "generated/skbio.sequence.RNA.match_frequency.rst", "generated/skbio.sequence.RNA.matches.rst", "generated/skbio.sequence.RNA.mismatch_frequency.rst", "generated/skbio.sequence.RNA.mismatches.rst", "generated/skbio.sequence.RNA.nondegenerates.rst", "generated/skbio.sequence.RNA.read.rst", "generated/skbio.sequence.RNA.replace.rst", "generated/skbio.sequence.RNA.reverse_complement.rst", "generated/skbio.sequence.RNA.reverse_transcribe.rst", "generated/skbio.sequence.RNA.to_regex.rst", "generated/skbio.sequence.RNA.translate.rst", "generated/skbio.sequence.RNA.translate_six_frames.rst", "generated/skbio.sequence.RNA.write.rst", "generated/skbio.sequence.Sequence.rst", "generated/skbio.sequence.Sequence.__bool__.rst", "generated/skbio.sequence.Sequence.__contains__.rst", "generated/skbio.sequence.Sequence.__copy__.rst", "generated/skbio.sequence.Sequence.__deepcopy__.rst", "generated/skbio.sequence.Sequence.__eq__.rst", "generated/skbio.sequence.Sequence.__ge__.rst", "generated/skbio.sequence.Sequence.__getitem__.rst", "generated/skbio.sequence.Sequence.__gt__.rst", "generated/skbio.sequence.Sequence.__iter__.rst", "generated/skbio.sequence.Sequence.__le__.rst", "generated/skbio.sequence.Sequence.__len__.rst", "generated/skbio.sequence.Sequence.__lt__.rst", "generated/skbio.sequence.Sequence.__ne__.rst", "generated/skbio.sequence.Sequence.__reversed__.rst", "generated/skbio.sequence.Sequence.__str__.rst", "generated/skbio.sequence.Sequence.concat.rst", "generated/skbio.sequence.Sequence.count.rst", "generated/skbio.sequence.Sequence.distance.rst", "generated/skbio.sequence.Sequence.find_with_regex.rst", "generated/skbio.sequence.Sequence.frequencies.rst", "generated/skbio.sequence.Sequence.has_interval_metadata.rst", "generated/skbio.sequence.Sequence.has_metadata.rst", "generated/skbio.sequence.Sequence.has_positional_metadata.rst", "generated/skbio.sequence.Sequence.index.rst", "generated/skbio.sequence.Sequence.iter_contiguous.rst", "generated/skbio.sequence.Sequence.iter_kmers.rst", "generated/skbio.sequence.Sequence.kmer_frequencies.rst", "generated/skbio.sequence.Sequence.lowercase.rst", "generated/skbio.sequence.Sequence.match_frequency.rst", "generated/skbio.sequence.Sequence.matches.rst", "generated/skbio.sequence.Sequence.mismatch_frequency.rst", "generated/skbio.sequence.Sequence.mismatches.rst", "generated/skbio.sequence.Sequence.read.rst", "generated/skbio.sequence.Sequence.replace.rst", "generated/skbio.sequence.Sequence.write.rst", "generated/skbio.sequence.distance.rst", "generated/skbio.sequence.distance.hamming.rst", "generated/skbio.sequence.distance.kmer_distance.rst", "generated/skbio.stats.composition.rst", "generated/skbio.stats.composition.alr.rst", "generated/skbio.stats.composition.alr_inv.rst", "generated/skbio.stats.composition.ancom.rst", "generated/skbio.stats.composition.centralize.rst", "generated/skbio.stats.composition.closure.rst", "generated/skbio.stats.composition.clr.rst", "generated/skbio.stats.composition.clr_inv.rst", "generated/skbio.stats.composition.ilr.rst", "generated/skbio.stats.composition.ilr_inv.rst", "generated/skbio.stats.composition.inner.rst", "generated/skbio.stats.composition.multiplicative_replacement.rst", "generated/skbio.stats.composition.perturb.rst", "generated/skbio.stats.composition.perturb_inv.rst", "generated/skbio.stats.composition.power.rst", "generated/skbio.stats.composition.sbp_basis.rst", "generated/skbio.stats.distance.rst", "generated/skbio.stats.distance.DissimilarityMatrix.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__contains__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__eq__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ge__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__getitem__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__gt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__le__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__lt__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__ne__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.__str__.rst", "generated/skbio.stats.distance.DissimilarityMatrix.between.rst", "generated/skbio.stats.distance.DissimilarityMatrix.copy.rst", "generated/skbio.stats.distance.DissimilarityMatrix.filter.rst", "generated/skbio.stats.distance.DissimilarityMatrix.from_iterable.rst", "generated/skbio.stats.distance.DissimilarityMatrix.index.rst", "generated/skbio.stats.distance.DissimilarityMatrix.plot.rst", "generated/skbio.stats.distance.DissimilarityMatrix.read.rst", "generated/skbio.stats.distance.DissimilarityMatrix.redundant_form.rst", "generated/skbio.stats.distance.DissimilarityMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DissimilarityMatrix.transpose.rst", "generated/skbio.stats.distance.DissimilarityMatrix.within.rst", "generated/skbio.stats.distance.DissimilarityMatrix.write.rst", "generated/skbio.stats.distance.DissimilarityMatrixError.rst", "generated/skbio.stats.distance.DistanceMatrix.rst", "generated/skbio.stats.distance.DistanceMatrix.__contains__.rst", "generated/skbio.stats.distance.DistanceMatrix.__eq__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ge__.rst", "generated/skbio.stats.distance.DistanceMatrix.__getitem__.rst", "generated/skbio.stats.distance.DistanceMatrix.__gt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__le__.rst", "generated/skbio.stats.distance.DistanceMatrix.__lt__.rst", "generated/skbio.stats.distance.DistanceMatrix.__ne__.rst", "generated/skbio.stats.distance.DistanceMatrix.__str__.rst", "generated/skbio.stats.distance.DistanceMatrix.between.rst", "generated/skbio.stats.distance.DistanceMatrix.condensed_form.rst", "generated/skbio.stats.distance.DistanceMatrix.copy.rst", "generated/skbio.stats.distance.DistanceMatrix.filter.rst", "generated/skbio.stats.distance.DistanceMatrix.from_iterable.rst", "generated/skbio.stats.distance.DistanceMatrix.index.rst", "generated/skbio.stats.distance.DistanceMatrix.permute.rst", "generated/skbio.stats.distance.DistanceMatrix.plot.rst", "generated/skbio.stats.distance.DistanceMatrix.read.rst", "generated/skbio.stats.distance.DistanceMatrix.redundant_form.rst", "generated/skbio.stats.distance.DistanceMatrix.to_data_frame.rst", "generated/skbio.stats.distance.DistanceMatrix.to_series.rst", "generated/skbio.stats.distance.DistanceMatrix.transpose.rst", "generated/skbio.stats.distance.DistanceMatrix.within.rst", "generated/skbio.stats.distance.DistanceMatrix.write.rst", "generated/skbio.stats.distance.DistanceMatrixError.rst", "generated/skbio.stats.distance.MissingIDError.rst", "generated/skbio.stats.distance.anosim.rst", "generated/skbio.stats.distance.bioenv.rst", "generated/skbio.stats.distance.mantel.rst", "generated/skbio.stats.distance.permanova.rst", "generated/skbio.stats.distance.permdisp.rst", "generated/skbio.stats.distance.pwmantel.rst", "generated/skbio.stats.distance.randdm.rst", "generated/skbio.stats.evolve.rst", "generated/skbio.stats.evolve.hommola_cospeciation.rst", "generated/skbio.stats.gradient.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.AverageGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.CategoryResults.rst", "generated/skbio.stats.gradient.CategoryResults.__eq__.rst", "generated/skbio.stats.gradient.CategoryResults.__ge__.rst", "generated/skbio.stats.gradient.CategoryResults.__gt__.rst", "generated/skbio.stats.gradient.CategoryResults.__hash__.rst", "generated/skbio.stats.gradient.CategoryResults.__le__.rst", "generated/skbio.stats.gradient.CategoryResults.__lt__.rst", "generated/skbio.stats.gradient.CategoryResults.__ne__.rst", "generated/skbio.stats.gradient.CategoryResults.__str__.rst", "generated/skbio.stats.gradient.CategoryResults.to_files.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVA.rst", "generated/skbio.stats.gradient.GradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVA.__le__.rst", "generated/skbio.stats.gradient.GradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVA.__str__.rst", "generated/skbio.stats.gradient.GradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.GradientANOVAResults.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__eq__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ge__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__gt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__hash__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__le__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__lt__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__ne__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.__str__.rst", "generated/skbio.stats.gradient.GradientANOVAResults.to_files.rst", "generated/skbio.stats.gradient.GroupResults.rst", "generated/skbio.stats.gradient.GroupResults.__eq__.rst", "generated/skbio.stats.gradient.GroupResults.__ge__.rst", "generated/skbio.stats.gradient.GroupResults.__gt__.rst", "generated/skbio.stats.gradient.GroupResults.__hash__.rst", "generated/skbio.stats.gradient.GroupResults.__le__.rst", "generated/skbio.stats.gradient.GroupResults.__lt__.rst", "generated/skbio.stats.gradient.GroupResults.__ne__.rst", "generated/skbio.stats.gradient.GroupResults.__str__.rst", "generated/skbio.stats.gradient.GroupResults.to_files.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__.rst", "generated/skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories.rst", "generated/skbio.stats.isubsample.rst", "generated/skbio.stats.ordination.rst", "generated/skbio.stats.ordination.OrdinationResults.rst", "generated/skbio.stats.ordination.OrdinationResults.__eq__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ge__.rst", "generated/skbio.stats.ordination.OrdinationResults.__gt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__hash__.rst", "generated/skbio.stats.ordination.OrdinationResults.__le__.rst", "generated/skbio.stats.ordination.OrdinationResults.__lt__.rst", "generated/skbio.stats.ordination.OrdinationResults.__ne__.rst", "generated/skbio.stats.ordination.OrdinationResults.__str__.rst", "generated/skbio.stats.ordination.OrdinationResults.plot.rst", "generated/skbio.stats.ordination.OrdinationResults.read.rst", "generated/skbio.stats.ordination.OrdinationResults.write.rst", "generated/skbio.stats.ordination.ca.rst", "generated/skbio.stats.ordination.cca.rst", "generated/skbio.stats.ordination.corr.rst", "generated/skbio.stats.ordination.e_matrix.rst", "generated/skbio.stats.ordination.f_matrix.rst", "generated/skbio.stats.ordination.mean_and_std.rst", "generated/skbio.stats.ordination.pcoa.rst", "generated/skbio.stats.ordination.pcoa_biplot.rst", "generated/skbio.stats.ordination.rda.rst", "generated/skbio.stats.ordination.scale.rst", "generated/skbio.stats.ordination.svd_rank.rst", "generated/skbio.stats.power.rst", "generated/skbio.stats.power.confidence_bound.rst", "generated/skbio.stats.power.paired_subsamples.rst", "generated/skbio.stats.power.subsample_paired_power.rst", "generated/skbio.stats.power.subsample_power.rst", "generated/skbio.stats.subsample_counts.rst", "generated/skbio.tree.DuplicateNodeError.rst", "generated/skbio.tree.MissingNodeError.rst", "generated/skbio.tree.NoLengthError.rst", "generated/skbio.tree.NoParentError.rst", "generated/skbio.tree.TreeError.rst", "generated/skbio.tree.TreeNode.rst", "generated/skbio.tree.TreeNode.__copy__.rst", "generated/skbio.tree.TreeNode.__deepcopy__.rst", "generated/skbio.tree.TreeNode.__eq__.rst", "generated/skbio.tree.TreeNode.__ge__.rst", "generated/skbio.tree.TreeNode.__getitem__.rst", "generated/skbio.tree.TreeNode.__gt__.rst", "generated/skbio.tree.TreeNode.__hash__.rst", "generated/skbio.tree.TreeNode.__iter__.rst", "generated/skbio.tree.TreeNode.__le__.rst", "generated/skbio.tree.TreeNode.__len__.rst", "generated/skbio.tree.TreeNode.__lt__.rst", "generated/skbio.tree.TreeNode.__ne__.rst", "generated/skbio.tree.TreeNode.__str__.rst", "generated/skbio.tree.TreeNode.accumulate_to_ancestor.rst", "generated/skbio.tree.TreeNode.ancestors.rst", "generated/skbio.tree.TreeNode.append.rst", "generated/skbio.tree.TreeNode.ascii_art.rst", "generated/skbio.tree.TreeNode.assign_ids.rst", "generated/skbio.tree.TreeNode.assign_supports.rst", "generated/skbio.tree.TreeNode.bifurcate.rst", "generated/skbio.tree.TreeNode.cache_attr.rst", "generated/skbio.tree.TreeNode.compare_rfd.rst", "generated/skbio.tree.TreeNode.compare_subsets.rst", "generated/skbio.tree.TreeNode.compare_tip_distances.rst", "generated/skbio.tree.TreeNode.copy.rst", "generated/skbio.tree.TreeNode.count.rst", "generated/skbio.tree.TreeNode.create_caches.rst", "generated/skbio.tree.TreeNode.deepcopy.rst", "generated/skbio.tree.TreeNode.descending_branch_length.rst", "generated/skbio.tree.TreeNode.distance.rst", "generated/skbio.tree.TreeNode.extend.rst", "generated/skbio.tree.TreeNode.find.rst", "generated/skbio.tree.TreeNode.find_all.rst", "generated/skbio.tree.TreeNode.find_by_func.rst", "generated/skbio.tree.TreeNode.find_by_id.rst", "generated/skbio.tree.TreeNode.from_linkage_matrix.rst", "generated/skbio.tree.TreeNode.from_taxdump.rst", "generated/skbio.tree.TreeNode.from_taxonomy.rst", "generated/skbio.tree.TreeNode.get_max_distance.rst", "generated/skbio.tree.TreeNode.has_children.rst", "generated/skbio.tree.TreeNode.index_tree.rst", "generated/skbio.tree.TreeNode.invalidate_caches.rst", "generated/skbio.tree.TreeNode.is_root.rst", "generated/skbio.tree.TreeNode.is_tip.rst", "generated/skbio.tree.TreeNode.lca.rst", "generated/skbio.tree.TreeNode.levelorder.rst", "generated/skbio.tree.TreeNode.lowest_common_ancestor.rst", "generated/skbio.tree.TreeNode.neighbors.rst", "generated/skbio.tree.TreeNode.non_tips.rst", "generated/skbio.tree.TreeNode.observed_node_counts.rst", "generated/skbio.tree.TreeNode.pop.rst", "generated/skbio.tree.TreeNode.postorder.rst", "generated/skbio.tree.TreeNode.pre_and_postorder.rst", "generated/skbio.tree.TreeNode.preorder.rst", "generated/skbio.tree.TreeNode.prune.rst", "generated/skbio.tree.TreeNode.read.rst", "generated/skbio.tree.TreeNode.remove.rst", "generated/skbio.tree.TreeNode.remove_deleted.rst", "generated/skbio.tree.TreeNode.root.rst", "generated/skbio.tree.TreeNode.root_at.rst", "generated/skbio.tree.TreeNode.root_at_midpoint.rst", "generated/skbio.tree.TreeNode.shear.rst", "generated/skbio.tree.TreeNode.shuffle.rst", "generated/skbio.tree.TreeNode.siblings.rst", "generated/skbio.tree.TreeNode.subset.rst", "generated/skbio.tree.TreeNode.subsets.rst", "generated/skbio.tree.TreeNode.subtree.rst", "generated/skbio.tree.TreeNode.tip_tip_distances.rst", "generated/skbio.tree.TreeNode.tips.rst", "generated/skbio.tree.TreeNode.to_array.rst", "generated/skbio.tree.TreeNode.to_taxonomy.rst", "generated/skbio.tree.TreeNode.traverse.rst", "generated/skbio.tree.TreeNode.unpack.rst", "generated/skbio.tree.TreeNode.unpack_by_func.rst", "generated/skbio.tree.TreeNode.unrooted_copy.rst", "generated/skbio.tree.TreeNode.unrooted_deepcopy.rst", "generated/skbio.tree.TreeNode.write.rst", "generated/skbio.tree.majority_rule.rst", "generated/skbio.tree.nj.rst", "generated/skbio.util.EfficiencyWarning.rst", "generated/skbio.util.RepresentationWarning.rst", "generated/skbio.util.assert_data_frame_almost_equal.rst", "generated/skbio.util.assert_ordination_results_equal.rst", "generated/skbio.util.cardinal_to_ordinal.rst", "generated/skbio.util.classproperty.rst", "generated/skbio.util.classproperty.__delete__.rst", "generated/skbio.util.classproperty.__eq__.rst", "generated/skbio.util.classproperty.__ge__.rst", "generated/skbio.util.classproperty.__get__.rst", "generated/skbio.util.classproperty.__gt__.rst", "generated/skbio.util.classproperty.__hash__.rst", "generated/skbio.util.classproperty.__le__.rst", "generated/skbio.util.classproperty.__lt__.rst", "generated/skbio.util.classproperty.__ne__.rst", "generated/skbio.util.classproperty.__set__.rst", "generated/skbio.util.classproperty.__set_name__.rst", "generated/skbio.util.classproperty.__str__.rst", "generated/skbio.util.classproperty.deleter.rst", "generated/skbio.util.classproperty.getter.rst", "generated/skbio.util.classproperty.setter.rst", "generated/skbio.util.find_duplicates.rst", "generated/skbio.util.get_data_path.rst", "generated/skbio.util.safe_md5.rst", "generated/skbio.workflow.Workflow.rst", "generated/skbio.workflow.Workflow.__call__.rst", "generated/skbio.workflow.Workflow.__eq__.rst", "generated/skbio.workflow.Workflow.__ge__.rst", "generated/skbio.workflow.Workflow.__gt__.rst", "generated/skbio.workflow.Workflow.__hash__.rst", "generated/skbio.workflow.Workflow.__le__.rst", "generated/skbio.workflow.Workflow.__lt__.rst", "generated/skbio.workflow.Workflow.__ne__.rst", "generated/skbio.workflow.Workflow.__str__.rst", "generated/skbio.workflow.Workflow.initialize_state.rst", "generated/skbio.workflow.method.rst", "generated/skbio.workflow.method.__call__.rst", "generated/skbio.workflow.method.__eq__.rst", "generated/skbio.workflow.method.__ge__.rst", "generated/skbio.workflow.method.__gt__.rst", "generated/skbio.workflow.method.__hash__.rst", "generated/skbio.workflow.method.__le__.rst", "generated/skbio.workflow.method.__lt__.rst", "generated/skbio.workflow.method.__ne__.rst", "generated/skbio.workflow.method.__str__.rst", "generated/skbio.workflow.requires.rst", "generated/skbio.workflow.requires.__call__.rst", "generated/skbio.workflow.requires.__eq__.rst", "generated/skbio.workflow.requires.__ge__.rst", "generated/skbio.workflow.requires.__gt__.rst", "generated/skbio.workflow.requires.__hash__.rst", "generated/skbio.workflow.requires.__le__.rst", "generated/skbio.workflow.requires.__lt__.rst", "generated/skbio.workflow.requires.__ne__.rst", "generated/skbio.workflow.requires.__str__.rst", "index.rst", "io.rst", "metadata.rst", "sequence.rst", "stats.rst", "tree.rst", "user/api_stability.rst", "util.rst", "workflow.rst"], "titles": ["Alignments (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.alignment</span></code>)", "Coding guidelines", "Adding a new module to skbio", "Diversity calculations (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity</span></code>)", "skbio.io.util.open", "skbio.io.util.open_file", "skbio.io.util.open_files", "skbio.alignment.AlignmentStructure", "skbio.alignment.AlignmentStructure.__eq__", "skbio.alignment.AlignmentStructure.__ge__", "skbio.alignment.AlignmentStructure.__getitem__", "skbio.alignment.AlignmentStructure.__gt__", "skbio.alignment.AlignmentStructure.__hash__", "skbio.alignment.AlignmentStructure.__le__", "skbio.alignment.AlignmentStructure.__lt__", "skbio.alignment.AlignmentStructure.__ne__", "skbio.alignment.AlignmentStructure.__setstate__", "skbio.alignment.AlignmentStructure.__str__", "skbio.alignment.AlignmentStructure.is_zero_based", "skbio.alignment.AlignmentStructure.set_zero_based", "skbio.alignment.StripedSmithWaterman", "skbio.alignment.StripedSmithWaterman.__call__", "skbio.alignment.StripedSmithWaterman.__eq__", "skbio.alignment.StripedSmithWaterman.__ge__", "skbio.alignment.StripedSmithWaterman.__gt__", "skbio.alignment.StripedSmithWaterman.__hash__", "skbio.alignment.StripedSmithWaterman.__le__", "skbio.alignment.StripedSmithWaterman.__lt__", "skbio.alignment.StripedSmithWaterman.__ne__", "skbio.alignment.StripedSmithWaterman.__setstate__", "skbio.alignment.StripedSmithWaterman.__str__", "skbio.alignment.TabularMSA", "skbio.alignment.TabularMSA.__bool__", "skbio.alignment.TabularMSA.__contains__", "skbio.alignment.TabularMSA.__copy__", "skbio.alignment.TabularMSA.__deepcopy__", "skbio.alignment.TabularMSA.__eq__", "skbio.alignment.TabularMSA.__ge__", "skbio.alignment.TabularMSA.__getitem__", "skbio.alignment.TabularMSA.__gt__", "skbio.alignment.TabularMSA.__iter__", "skbio.alignment.TabularMSA.__le__", "skbio.alignment.TabularMSA.__len__", "skbio.alignment.TabularMSA.__lt__", "skbio.alignment.TabularMSA.__ne__", "skbio.alignment.TabularMSA.__reversed__", "skbio.alignment.TabularMSA.__str__", "skbio.alignment.TabularMSA.append", "skbio.alignment.TabularMSA.consensus", "skbio.alignment.TabularMSA.conservation", "skbio.alignment.TabularMSA.extend", "skbio.alignment.TabularMSA.from_dict", "skbio.alignment.TabularMSA.gap_frequencies", "skbio.alignment.TabularMSA.has_metadata", "skbio.alignment.TabularMSA.has_positional_metadata", "skbio.alignment.TabularMSA.iter_positions", "skbio.alignment.TabularMSA.join", "skbio.alignment.TabularMSA.read", "skbio.alignment.TabularMSA.reassign_index", "skbio.alignment.TabularMSA.sort", "skbio.alignment.TabularMSA.to_dict", "skbio.alignment.TabularMSA.write", "skbio.alignment.global_pairwise_align", "skbio.alignment.global_pairwise_align_nucleotide", "skbio.alignment.global_pairwise_align_protein", "skbio.alignment.local_pairwise_align", "skbio.alignment.local_pairwise_align_nucleotide", "skbio.alignment.local_pairwise_align_protein", "skbio.alignment.local_pairwise_align_ssw", "skbio.alignment.make_identity_substitution_matrix", "Alpha diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.alpha</span></code>)", "skbio.diversity.alpha.ace", "skbio.diversity.alpha.berger_parker_d", "skbio.diversity.alpha.brillouin_d", "skbio.diversity.alpha.chao1", "skbio.diversity.alpha.chao1_ci", "skbio.diversity.alpha.dominance", "skbio.diversity.alpha.doubles", "skbio.diversity.alpha.enspie", "skbio.diversity.alpha.esty_ci", "skbio.diversity.alpha.faith_pd", "skbio.diversity.alpha.fisher_alpha", "skbio.diversity.alpha.gini_index", "skbio.diversity.alpha.goods_coverage", "skbio.diversity.alpha.heip_e", "skbio.diversity.alpha.kempton_taylor_q", "skbio.diversity.alpha.lladser_ci", "skbio.diversity.alpha.lladser_pe", "skbio.diversity.alpha.margalef", "skbio.diversity.alpha.mcintosh_d", "skbio.diversity.alpha.mcintosh_e", "skbio.diversity.alpha.menhinick", "skbio.diversity.alpha.michaelis_menten_fit", "skbio.diversity.alpha.observed_otus", "skbio.diversity.alpha.osd", "skbio.diversity.alpha.pielou_e", "skbio.diversity.alpha.robbins", "skbio.diversity.alpha.shannon", "skbio.diversity.alpha.simpson", "skbio.diversity.alpha.simpson_e", "skbio.diversity.alpha.singles", "skbio.diversity.alpha.strong", "skbio.diversity.alpha_diversity", "Beta diversity measures (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.diversity.beta</span></code>)", "skbio.diversity.beta.unweighted_unifrac", "skbio.diversity.beta.weighted_unifrac", "skbio.diversity.beta_diversity", "skbio.diversity.block_beta_diversity", "skbio.diversity.get_alpha_diversity_metrics", "skbio.diversity.get_beta_diversity_metrics", "skbio.diversity.partial_beta_diversity", "skbio.io.ArgumentOverrideWarning", "skbio.io.BLAST7FormatError", "skbio.io.ClustalFormatError", "skbio.io.EMBLFormatError", "skbio.io.FASTAFormatError", "skbio.io.FASTQFormatError", "skbio.io.FileFormatError", "skbio.io.FormatIdentificationWarning", "skbio.io.GFF3FormatError", "skbio.io.GenBankFormatError", "skbio.io.IOSourceError", "skbio.io.LSMatFormatError", "skbio.io.NewickFormatError", "skbio.io.OrdinationFormatError", "skbio.io.PhylipFormatError", "skbio.io.QSeqFormatError", "skbio.io.QUALFormatError", "skbio.io.StockholmFormatError", "skbio.io.UnrecognizedFormatError", "Simple binary dissimilarity matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.binary_dm</span></code>)", "BLAST+6 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast6</span></code>)", "BLAST+7 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.blast7</span></code>)", "Clustal format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.clustal</span></code>)", "EMBL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.embl</span></code>)", "FASTA/QUAL format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fasta</span></code>)", "FASTQ format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.fastq</span></code>)", "GenBank format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.genbank</span></code>)", "GFF3 format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.gff3</span></code>)", "Labeled square matrix format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.lsmat</span></code>)", "Newick format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.newick</span></code>)", "Ordination results format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.ordination</span></code>)", "PHYLIP multiple sequence alignment format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.phylip</span></code>)", "QSeq format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.qseq</span></code>)", "Stockholm format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.stockholm</span></code>)", "Taxdump format (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.format.taxdump</span></code>)", "I/O Registry (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.registry</span></code>)", "skbio.io.registry.DuplicateRegistrationError", "skbio.io.registry.Format", "skbio.io.registry.Format.__eq__", "skbio.io.registry.Format.__ge__", "skbio.io.registry.Format.__gt__", "skbio.io.registry.Format.__hash__", "skbio.io.registry.Format.__le__", "skbio.io.registry.Format.__lt__", "skbio.io.registry.Format.__ne__", "skbio.io.registry.Format.__str__", "skbio.io.registry.Format.reader", "skbio.io.registry.Format.sniffer", "skbio.io.registry.Format.writer", "skbio.io.registry.IORegistry", "skbio.io.registry.IORegistry.__eq__", "skbio.io.registry.IORegistry.__ge__", "skbio.io.registry.IORegistry.__gt__", "skbio.io.registry.IORegistry.__hash__", "skbio.io.registry.IORegistry.__le__", "skbio.io.registry.IORegistry.__lt__", "skbio.io.registry.IORegistry.__ne__", "skbio.io.registry.IORegistry.__str__", "skbio.io.registry.IORegistry.add_format", "skbio.io.registry.IORegistry.create_format", "skbio.io.registry.IORegistry.get_reader", "skbio.io.registry.IORegistry.get_sniffer", "skbio.io.registry.IORegistry.get_writer", "skbio.io.registry.IORegistry.list_read_formats", "skbio.io.registry.IORegistry.list_write_formats", "skbio.io.registry.IORegistry.monkey_patch", "skbio.io.registry.IORegistry.read", "skbio.io.registry.IORegistry.sniff", "skbio.io.registry.IORegistry.write", "skbio.io.registry.InvalidRegistrationError", "skbio.io.registry.create_format", "skbio.io.registry.read", "skbio.io.registry.sniff", "skbio.io.registry.write", "I/O utils (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io.util</span></code>)", "skbio.metadata.Interval", "skbio.metadata.Interval.__eq__", "skbio.metadata.Interval.__ge__", "skbio.metadata.Interval.__gt__", "skbio.metadata.Interval.__le__", "skbio.metadata.Interval.__lt__", "skbio.metadata.Interval.__ne__", "skbio.metadata.Interval.__str__", "skbio.metadata.Interval.drop", "skbio.metadata.IntervalMetadata", "skbio.metadata.IntervalMetadata.__copy__", "skbio.metadata.IntervalMetadata.__deepcopy__", "skbio.metadata.IntervalMetadata.__eq__", "skbio.metadata.IntervalMetadata.__ge__", "skbio.metadata.IntervalMetadata.__gt__", "skbio.metadata.IntervalMetadata.__le__", "skbio.metadata.IntervalMetadata.__lt__", "skbio.metadata.IntervalMetadata.__ne__", "skbio.metadata.IntervalMetadata.__str__", "skbio.metadata.IntervalMetadata.add", "skbio.metadata.IntervalMetadata.concat", "skbio.metadata.IntervalMetadata.drop", "skbio.metadata.IntervalMetadata.merge", "skbio.metadata.IntervalMetadata.query", "skbio.metadata.IntervalMetadata.read", "skbio.metadata.IntervalMetadata.sort", "skbio.metadata.IntervalMetadata.write", "skbio.sequence.DNA", "skbio.sequence.DNA.__bool__", "skbio.sequence.DNA.__contains__", "skbio.sequence.DNA.__copy__", "skbio.sequence.DNA.__deepcopy__", "skbio.sequence.DNA.__eq__", "skbio.sequence.DNA.__ge__", "skbio.sequence.DNA.__getitem__", "skbio.sequence.DNA.__gt__", "skbio.sequence.DNA.__iter__", "skbio.sequence.DNA.__le__", "skbio.sequence.DNA.__len__", "skbio.sequence.DNA.__lt__", "skbio.sequence.DNA.__ne__", "skbio.sequence.DNA.__reversed__", "skbio.sequence.DNA.__str__", "skbio.sequence.DNA.complement", "skbio.sequence.DNA.concat", "skbio.sequence.DNA.count", "skbio.sequence.DNA.definites", "skbio.sequence.DNA.degap", "skbio.sequence.DNA.degenerates", "skbio.sequence.DNA.distance", "skbio.sequence.DNA.expand_degenerates", "skbio.sequence.DNA.find_motifs", "skbio.sequence.DNA.find_with_regex", "skbio.sequence.DNA.frequencies", "skbio.sequence.DNA.gaps", "skbio.sequence.DNA.gc_content", "skbio.sequence.DNA.gc_frequency", "skbio.sequence.DNA.has_definites", "skbio.sequence.DNA.has_degenerates", "skbio.sequence.DNA.has_gaps", "skbio.sequence.DNA.has_interval_metadata", "skbio.sequence.DNA.has_metadata", "skbio.sequence.DNA.has_nondegenerates", "skbio.sequence.DNA.has_positional_metadata", "skbio.sequence.DNA.index", "skbio.sequence.DNA.is_reverse_complement", "skbio.sequence.DNA.iter_contiguous", "skbio.sequence.DNA.iter_kmers", "skbio.sequence.DNA.kmer_frequencies", "skbio.sequence.DNA.lowercase", "skbio.sequence.DNA.match_frequency", "skbio.sequence.DNA.matches", "skbio.sequence.DNA.mismatch_frequency", "skbio.sequence.DNA.mismatches", "skbio.sequence.DNA.nondegenerates", "skbio.sequence.DNA.read", "skbio.sequence.DNA.replace", "skbio.sequence.DNA.reverse_complement", "skbio.sequence.DNA.to_regex", "skbio.sequence.DNA.transcribe", "skbio.sequence.DNA.translate", "skbio.sequence.DNA.translate_six_frames", "skbio.sequence.DNA.write", "skbio.sequence.GeneticCode", "skbio.sequence.GeneticCode.__eq__", "skbio.sequence.GeneticCode.__ge__", "skbio.sequence.GeneticCode.__gt__", "skbio.sequence.GeneticCode.__le__", "skbio.sequence.GeneticCode.__lt__", "skbio.sequence.GeneticCode.__ne__", "skbio.sequence.GeneticCode.__str__", "skbio.sequence.GeneticCode.from_ncbi", "skbio.sequence.GeneticCode.translate", "skbio.sequence.GeneticCode.translate_six_frames", "skbio.sequence.GrammaredSequence", "skbio.sequence.GrammaredSequence.__bool__", "skbio.sequence.GrammaredSequence.__contains__", "skbio.sequence.GrammaredSequence.__copy__", "skbio.sequence.GrammaredSequence.__deepcopy__", "skbio.sequence.GrammaredSequence.__eq__", "skbio.sequence.GrammaredSequence.__ge__", "skbio.sequence.GrammaredSequence.__getitem__", "skbio.sequence.GrammaredSequence.__gt__", "skbio.sequence.GrammaredSequence.__iter__", "skbio.sequence.GrammaredSequence.__le__", "skbio.sequence.GrammaredSequence.__len__", "skbio.sequence.GrammaredSequence.__lt__", "skbio.sequence.GrammaredSequence.__ne__", "skbio.sequence.GrammaredSequence.__reversed__", "skbio.sequence.GrammaredSequence.__str__", "skbio.sequence.GrammaredSequence.concat", "skbio.sequence.GrammaredSequence.count", "skbio.sequence.GrammaredSequence.definites", "skbio.sequence.GrammaredSequence.degap", "skbio.sequence.GrammaredSequence.degenerates", "skbio.sequence.GrammaredSequence.distance", "skbio.sequence.GrammaredSequence.expand_degenerates", "skbio.sequence.GrammaredSequence.find_motifs", "skbio.sequence.GrammaredSequence.find_with_regex", "skbio.sequence.GrammaredSequence.frequencies", "skbio.sequence.GrammaredSequence.gaps", "skbio.sequence.GrammaredSequence.has_definites", "skbio.sequence.GrammaredSequence.has_degenerates", "skbio.sequence.GrammaredSequence.has_gaps", "skbio.sequence.GrammaredSequence.has_interval_metadata", "skbio.sequence.GrammaredSequence.has_metadata", "skbio.sequence.GrammaredSequence.has_nondegenerates", "skbio.sequence.GrammaredSequence.has_positional_metadata", "skbio.sequence.GrammaredSequence.index", "skbio.sequence.GrammaredSequence.iter_contiguous", "skbio.sequence.GrammaredSequence.iter_kmers", "skbio.sequence.GrammaredSequence.kmer_frequencies", "skbio.sequence.GrammaredSequence.lowercase", "skbio.sequence.GrammaredSequence.match_frequency", "skbio.sequence.GrammaredSequence.matches", "skbio.sequence.GrammaredSequence.mismatch_frequency", "skbio.sequence.GrammaredSequence.mismatches", "skbio.sequence.GrammaredSequence.nondegenerates", "skbio.sequence.GrammaredSequence.read", "skbio.sequence.GrammaredSequence.replace", "skbio.sequence.GrammaredSequence.to_regex", "skbio.sequence.GrammaredSequence.write", "skbio.sequence.Protein", "skbio.sequence.Protein.__bool__", "skbio.sequence.Protein.__contains__", "skbio.sequence.Protein.__copy__", "skbio.sequence.Protein.__deepcopy__", "skbio.sequence.Protein.__eq__", "skbio.sequence.Protein.__ge__", "skbio.sequence.Protein.__getitem__", "skbio.sequence.Protein.__gt__", "skbio.sequence.Protein.__iter__", "skbio.sequence.Protein.__le__", "skbio.sequence.Protein.__len__", "skbio.sequence.Protein.__lt__", "skbio.sequence.Protein.__ne__", "skbio.sequence.Protein.__reversed__", "skbio.sequence.Protein.__str__", "skbio.sequence.Protein.concat", "skbio.sequence.Protein.count", "skbio.sequence.Protein.definites", "skbio.sequence.Protein.degap", "skbio.sequence.Protein.degenerates", "skbio.sequence.Protein.distance", "skbio.sequence.Protein.expand_degenerates", "skbio.sequence.Protein.find_motifs", "skbio.sequence.Protein.find_with_regex", "skbio.sequence.Protein.frequencies", "skbio.sequence.Protein.gaps", "skbio.sequence.Protein.has_definites", "skbio.sequence.Protein.has_degenerates", "skbio.sequence.Protein.has_gaps", "skbio.sequence.Protein.has_interval_metadata", "skbio.sequence.Protein.has_metadata", "skbio.sequence.Protein.has_nondegenerates", "skbio.sequence.Protein.has_positional_metadata", "skbio.sequence.Protein.has_stops", "skbio.sequence.Protein.index", "skbio.sequence.Protein.iter_contiguous", "skbio.sequence.Protein.iter_kmers", "skbio.sequence.Protein.kmer_frequencies", "skbio.sequence.Protein.lowercase", "skbio.sequence.Protein.match_frequency", "skbio.sequence.Protein.matches", "skbio.sequence.Protein.mismatch_frequency", "skbio.sequence.Protein.mismatches", "skbio.sequence.Protein.nondegenerates", "skbio.sequence.Protein.read", "skbio.sequence.Protein.replace", "skbio.sequence.Protein.stops", "skbio.sequence.Protein.to_regex", "skbio.sequence.Protein.write", "skbio.sequence.RNA", "skbio.sequence.RNA.__bool__", "skbio.sequence.RNA.__contains__", "skbio.sequence.RNA.__copy__", "skbio.sequence.RNA.__deepcopy__", "skbio.sequence.RNA.__eq__", "skbio.sequence.RNA.__ge__", "skbio.sequence.RNA.__getitem__", "skbio.sequence.RNA.__gt__", "skbio.sequence.RNA.__iter__", "skbio.sequence.RNA.__le__", "skbio.sequence.RNA.__len__", "skbio.sequence.RNA.__lt__", "skbio.sequence.RNA.__ne__", "skbio.sequence.RNA.__reversed__", "skbio.sequence.RNA.__str__", "skbio.sequence.RNA.complement", "skbio.sequence.RNA.concat", "skbio.sequence.RNA.count", "skbio.sequence.RNA.definites", "skbio.sequence.RNA.degap", "skbio.sequence.RNA.degenerates", "skbio.sequence.RNA.distance", "skbio.sequence.RNA.expand_degenerates", "skbio.sequence.RNA.find_motifs", "skbio.sequence.RNA.find_with_regex", "skbio.sequence.RNA.frequencies", "skbio.sequence.RNA.gaps", "skbio.sequence.RNA.gc_content", "skbio.sequence.RNA.gc_frequency", "skbio.sequence.RNA.has_definites", "skbio.sequence.RNA.has_degenerates", "skbio.sequence.RNA.has_gaps", "skbio.sequence.RNA.has_interval_metadata", "skbio.sequence.RNA.has_metadata", "skbio.sequence.RNA.has_nondegenerates", "skbio.sequence.RNA.has_positional_metadata", "skbio.sequence.RNA.index", "skbio.sequence.RNA.is_reverse_complement", "skbio.sequence.RNA.iter_contiguous", "skbio.sequence.RNA.iter_kmers", "skbio.sequence.RNA.kmer_frequencies", "skbio.sequence.RNA.lowercase", "skbio.sequence.RNA.match_frequency", "skbio.sequence.RNA.matches", "skbio.sequence.RNA.mismatch_frequency", "skbio.sequence.RNA.mismatches", "skbio.sequence.RNA.nondegenerates", "skbio.sequence.RNA.read", "skbio.sequence.RNA.replace", "skbio.sequence.RNA.reverse_complement", "skbio.sequence.RNA.reverse_transcribe", "skbio.sequence.RNA.to_regex", "skbio.sequence.RNA.translate", "skbio.sequence.RNA.translate_six_frames", "skbio.sequence.RNA.write", "skbio.sequence.Sequence", "skbio.sequence.Sequence.__bool__", "skbio.sequence.Sequence.__contains__", "skbio.sequence.Sequence.__copy__", "skbio.sequence.Sequence.__deepcopy__", "skbio.sequence.Sequence.__eq__", "skbio.sequence.Sequence.__ge__", "skbio.sequence.Sequence.__getitem__", "skbio.sequence.Sequence.__gt__", "skbio.sequence.Sequence.__iter__", "skbio.sequence.Sequence.__le__", "skbio.sequence.Sequence.__len__", "skbio.sequence.Sequence.__lt__", "skbio.sequence.Sequence.__ne__", "skbio.sequence.Sequence.__reversed__", "skbio.sequence.Sequence.__str__", "skbio.sequence.Sequence.concat", "skbio.sequence.Sequence.count", "skbio.sequence.Sequence.distance", "skbio.sequence.Sequence.find_with_regex", "skbio.sequence.Sequence.frequencies", "skbio.sequence.Sequence.has_interval_metadata", "skbio.sequence.Sequence.has_metadata", "skbio.sequence.Sequence.has_positional_metadata", "skbio.sequence.Sequence.index", "skbio.sequence.Sequence.iter_contiguous", "skbio.sequence.Sequence.iter_kmers", "skbio.sequence.Sequence.kmer_frequencies", "skbio.sequence.Sequence.lowercase", "skbio.sequence.Sequence.match_frequency", "skbio.sequence.Sequence.matches", "skbio.sequence.Sequence.mismatch_frequency", "skbio.sequence.Sequence.mismatches", "skbio.sequence.Sequence.read", "skbio.sequence.Sequence.replace", "skbio.sequence.Sequence.write", "Sequence distance metrics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence.distance</span></code>)", "skbio.sequence.distance.hamming", "skbio.sequence.distance.kmer_distance", "Composition Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.composition</span></code>)", "skbio.stats.composition.alr", "skbio.stats.composition.alr_inv", "skbio.stats.composition.ancom", "skbio.stats.composition.centralize", "skbio.stats.composition.closure", "skbio.stats.composition.clr", "skbio.stats.composition.clr_inv", "skbio.stats.composition.ilr", "skbio.stats.composition.ilr_inv", "skbio.stats.composition.inner", "skbio.stats.composition.multiplicative_replacement", "skbio.stats.composition.perturb", "skbio.stats.composition.perturb_inv", "skbio.stats.composition.power", "skbio.stats.composition.sbp_basis", "Distance matrices and distance-based statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.distance</span></code>)", "skbio.stats.distance.DissimilarityMatrix", "skbio.stats.distance.DissimilarityMatrix.__contains__", "skbio.stats.distance.DissimilarityMatrix.__eq__", "skbio.stats.distance.DissimilarityMatrix.__ge__", "skbio.stats.distance.DissimilarityMatrix.__getitem__", "skbio.stats.distance.DissimilarityMatrix.__gt__", "skbio.stats.distance.DissimilarityMatrix.__le__", "skbio.stats.distance.DissimilarityMatrix.__lt__", "skbio.stats.distance.DissimilarityMatrix.__ne__", "skbio.stats.distance.DissimilarityMatrix.__str__", "skbio.stats.distance.DissimilarityMatrix.between", "skbio.stats.distance.DissimilarityMatrix.copy", "skbio.stats.distance.DissimilarityMatrix.filter", "skbio.stats.distance.DissimilarityMatrix.from_iterable", "skbio.stats.distance.DissimilarityMatrix.index", "skbio.stats.distance.DissimilarityMatrix.plot", "skbio.stats.distance.DissimilarityMatrix.read", "skbio.stats.distance.DissimilarityMatrix.redundant_form", "skbio.stats.distance.DissimilarityMatrix.to_data_frame", "skbio.stats.distance.DissimilarityMatrix.transpose", "skbio.stats.distance.DissimilarityMatrix.within", "skbio.stats.distance.DissimilarityMatrix.write", "skbio.stats.distance.DissimilarityMatrixError", "skbio.stats.distance.DistanceMatrix", "skbio.stats.distance.DistanceMatrix.__contains__", "skbio.stats.distance.DistanceMatrix.__eq__", "skbio.stats.distance.DistanceMatrix.__ge__", "skbio.stats.distance.DistanceMatrix.__getitem__", "skbio.stats.distance.DistanceMatrix.__gt__", "skbio.stats.distance.DistanceMatrix.__le__", "skbio.stats.distance.DistanceMatrix.__lt__", "skbio.stats.distance.DistanceMatrix.__ne__", "skbio.stats.distance.DistanceMatrix.__str__", "skbio.stats.distance.DistanceMatrix.between", "skbio.stats.distance.DistanceMatrix.condensed_form", "skbio.stats.distance.DistanceMatrix.copy", "skbio.stats.distance.DistanceMatrix.filter", "skbio.stats.distance.DistanceMatrix.from_iterable", "skbio.stats.distance.DistanceMatrix.index", "skbio.stats.distance.DistanceMatrix.permute", "skbio.stats.distance.DistanceMatrix.plot", "skbio.stats.distance.DistanceMatrix.read", "skbio.stats.distance.DistanceMatrix.redundant_form", "skbio.stats.distance.DistanceMatrix.to_data_frame", "skbio.stats.distance.DistanceMatrix.to_series", "skbio.stats.distance.DistanceMatrix.transpose", "skbio.stats.distance.DistanceMatrix.within", "skbio.stats.distance.DistanceMatrix.write", "skbio.stats.distance.DistanceMatrixError", "skbio.stats.distance.MissingIDError", "skbio.stats.distance.anosim", "skbio.stats.distance.bioenv", "skbio.stats.distance.mantel", "skbio.stats.distance.permanova", "skbio.stats.distance.permdisp", "skbio.stats.distance.pwmantel", "skbio.stats.distance.randdm", "Evolutionary statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.evolve</span></code>)", "skbio.stats.evolve.hommola_cospeciation", "Gradient analyses (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.gradient</span></code>)", "skbio.stats.gradient.AverageGradientANOVA", "skbio.stats.gradient.AverageGradientANOVA.__eq__", "skbio.stats.gradient.AverageGradientANOVA.__ge__", "skbio.stats.gradient.AverageGradientANOVA.__gt__", "skbio.stats.gradient.AverageGradientANOVA.__hash__", "skbio.stats.gradient.AverageGradientANOVA.__le__", "skbio.stats.gradient.AverageGradientANOVA.__lt__", "skbio.stats.gradient.AverageGradientANOVA.__ne__", "skbio.stats.gradient.AverageGradientANOVA.__str__", "skbio.stats.gradient.AverageGradientANOVA.get_trajectories", "skbio.stats.gradient.CategoryResults", "skbio.stats.gradient.CategoryResults.__eq__", "skbio.stats.gradient.CategoryResults.__ge__", "skbio.stats.gradient.CategoryResults.__gt__", "skbio.stats.gradient.CategoryResults.__hash__", "skbio.stats.gradient.CategoryResults.__le__", "skbio.stats.gradient.CategoryResults.__lt__", "skbio.stats.gradient.CategoryResults.__ne__", "skbio.stats.gradient.CategoryResults.__str__", "skbio.stats.gradient.CategoryResults.to_files", "skbio.stats.gradient.FirstDifferenceGradientANOVA", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__", "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVA", "skbio.stats.gradient.GradientANOVA.__eq__", "skbio.stats.gradient.GradientANOVA.__ge__", "skbio.stats.gradient.GradientANOVA.__gt__", "skbio.stats.gradient.GradientANOVA.__hash__", "skbio.stats.gradient.GradientANOVA.__le__", "skbio.stats.gradient.GradientANOVA.__lt__", "skbio.stats.gradient.GradientANOVA.__ne__", "skbio.stats.gradient.GradientANOVA.__str__", "skbio.stats.gradient.GradientANOVA.get_trajectories", "skbio.stats.gradient.GradientANOVAResults", "skbio.stats.gradient.GradientANOVAResults.__eq__", "skbio.stats.gradient.GradientANOVAResults.__ge__", "skbio.stats.gradient.GradientANOVAResults.__gt__", "skbio.stats.gradient.GradientANOVAResults.__hash__", "skbio.stats.gradient.GradientANOVAResults.__le__", "skbio.stats.gradient.GradientANOVAResults.__lt__", "skbio.stats.gradient.GradientANOVAResults.__ne__", "skbio.stats.gradient.GradientANOVAResults.__str__", "skbio.stats.gradient.GradientANOVAResults.to_files", "skbio.stats.gradient.GroupResults", "skbio.stats.gradient.GroupResults.__eq__", "skbio.stats.gradient.GroupResults.__ge__", "skbio.stats.gradient.GroupResults.__gt__", "skbio.stats.gradient.GroupResults.__hash__", "skbio.stats.gradient.GroupResults.__le__", "skbio.stats.gradient.GroupResults.__lt__", "skbio.stats.gradient.GroupResults.__ne__", "skbio.stats.gradient.GroupResults.__str__", "skbio.stats.gradient.GroupResults.to_files", "skbio.stats.gradient.TrajectoryGradientANOVA", "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__", "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__", "skbio.stats.gradient.TrajectoryGradientANOVA.__le__", "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__", "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__", "skbio.stats.gradient.TrajectoryGradientANOVA.__str__", "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories", "skbio.stats.gradient.WindowDifferenceGradientANOVA", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__", "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories", "skbio.stats.isubsample", "Ordination methods (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.ordination</span></code>)", "skbio.stats.ordination.OrdinationResults", "skbio.stats.ordination.OrdinationResults.__eq__", "skbio.stats.ordination.OrdinationResults.__ge__", "skbio.stats.ordination.OrdinationResults.__gt__", "skbio.stats.ordination.OrdinationResults.__hash__", "skbio.stats.ordination.OrdinationResults.__le__", "skbio.stats.ordination.OrdinationResults.__lt__", "skbio.stats.ordination.OrdinationResults.__ne__", "skbio.stats.ordination.OrdinationResults.__str__", "skbio.stats.ordination.OrdinationResults.plot", "skbio.stats.ordination.OrdinationResults.read", "skbio.stats.ordination.OrdinationResults.write", "skbio.stats.ordination.ca", "skbio.stats.ordination.cca", "skbio.stats.ordination.corr", "skbio.stats.ordination.e_matrix", "skbio.stats.ordination.f_matrix", "skbio.stats.ordination.mean_and_std", "skbio.stats.ordination.pcoa", "skbio.stats.ordination.pcoa_biplot", "skbio.stats.ordination.rda", "skbio.stats.ordination.scale", "skbio.stats.ordination.svd_rank", "Empirical Power Estimation (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats.power</span></code>)", "skbio.stats.power.confidence_bound", "skbio.stats.power.paired_subsamples", "skbio.stats.power.subsample_paired_power", "skbio.stats.power.subsample_power", "skbio.stats.subsample_counts", "skbio.tree.DuplicateNodeError", "skbio.tree.MissingNodeError", "skbio.tree.NoLengthError", "skbio.tree.NoParentError", "skbio.tree.TreeError", "skbio.tree.TreeNode", "skbio.tree.TreeNode.__copy__", "skbio.tree.TreeNode.__deepcopy__", "skbio.tree.TreeNode.__eq__", "skbio.tree.TreeNode.__ge__", "skbio.tree.TreeNode.__getitem__", "skbio.tree.TreeNode.__gt__", "skbio.tree.TreeNode.__hash__", "skbio.tree.TreeNode.__iter__", "skbio.tree.TreeNode.__le__", "skbio.tree.TreeNode.__len__", "skbio.tree.TreeNode.__lt__", "skbio.tree.TreeNode.__ne__", "skbio.tree.TreeNode.__str__", "skbio.tree.TreeNode.accumulate_to_ancestor", "skbio.tree.TreeNode.ancestors", "skbio.tree.TreeNode.append", "skbio.tree.TreeNode.ascii_art", "skbio.tree.TreeNode.assign_ids", "skbio.tree.TreeNode.assign_supports", "skbio.tree.TreeNode.bifurcate", "skbio.tree.TreeNode.cache_attr", "skbio.tree.TreeNode.compare_rfd", "skbio.tree.TreeNode.compare_subsets", "skbio.tree.TreeNode.compare_tip_distances", "skbio.tree.TreeNode.copy", "skbio.tree.TreeNode.count", "skbio.tree.TreeNode.create_caches", "skbio.tree.TreeNode.deepcopy", "skbio.tree.TreeNode.descending_branch_length", "skbio.tree.TreeNode.distance", "skbio.tree.TreeNode.extend", "skbio.tree.TreeNode.find", "skbio.tree.TreeNode.find_all", "skbio.tree.TreeNode.find_by_func", "skbio.tree.TreeNode.find_by_id", "skbio.tree.TreeNode.from_linkage_matrix", "skbio.tree.TreeNode.from_taxdump", "skbio.tree.TreeNode.from_taxonomy", "skbio.tree.TreeNode.get_max_distance", "skbio.tree.TreeNode.has_children", "skbio.tree.TreeNode.index_tree", "skbio.tree.TreeNode.invalidate_caches", "skbio.tree.TreeNode.is_root", "skbio.tree.TreeNode.is_tip", "skbio.tree.TreeNode.lca", "skbio.tree.TreeNode.levelorder", "skbio.tree.TreeNode.lowest_common_ancestor", "skbio.tree.TreeNode.neighbors", "skbio.tree.TreeNode.non_tips", "skbio.tree.TreeNode.observed_node_counts", "skbio.tree.TreeNode.pop", "skbio.tree.TreeNode.postorder", "skbio.tree.TreeNode.pre_and_postorder", "skbio.tree.TreeNode.preorder", "skbio.tree.TreeNode.prune", "skbio.tree.TreeNode.read", "skbio.tree.TreeNode.remove", "skbio.tree.TreeNode.remove_deleted", "skbio.tree.TreeNode.root", "skbio.tree.TreeNode.root_at", "skbio.tree.TreeNode.root_at_midpoint", "skbio.tree.TreeNode.shear", "skbio.tree.TreeNode.shuffle", "skbio.tree.TreeNode.siblings", "skbio.tree.TreeNode.subset", "skbio.tree.TreeNode.subsets", "skbio.tree.TreeNode.subtree", "skbio.tree.TreeNode.tip_tip_distances", "skbio.tree.TreeNode.tips", "skbio.tree.TreeNode.to_array", "skbio.tree.TreeNode.to_taxonomy", "skbio.tree.TreeNode.traverse", "skbio.tree.TreeNode.unpack", "skbio.tree.TreeNode.unpack_by_func", "skbio.tree.TreeNode.unrooted_copy", "skbio.tree.TreeNode.unrooted_deepcopy", "skbio.tree.TreeNode.write", "skbio.tree.majority_rule", "skbio.tree.nj", "skbio.util.EfficiencyWarning", "skbio.util.RepresentationWarning", "skbio.util.assert_data_frame_almost_equal", "skbio.util.assert_ordination_results_equal", "skbio.util.cardinal_to_ordinal", "skbio.util.classproperty", "skbio.util.classproperty.__delete__", "skbio.util.classproperty.__eq__", "skbio.util.classproperty.__ge__", "skbio.util.classproperty.__get__", "skbio.util.classproperty.__gt__", "skbio.util.classproperty.__hash__", "skbio.util.classproperty.__le__", "skbio.util.classproperty.__lt__", "skbio.util.classproperty.__ne__", "skbio.util.classproperty.__set__", "skbio.util.classproperty.__set_name__", "skbio.util.classproperty.__str__", "skbio.util.classproperty.deleter", "skbio.util.classproperty.getter", "skbio.util.classproperty.setter", "skbio.util.find_duplicates", "skbio.util.get_data_path", "skbio.util.safe_md5", "skbio.workflow.Workflow", "skbio.workflow.Workflow.__call__", "skbio.workflow.Workflow.__eq__", "skbio.workflow.Workflow.__ge__", "skbio.workflow.Workflow.__gt__", "skbio.workflow.Workflow.__hash__", "skbio.workflow.Workflow.__le__", "skbio.workflow.Workflow.__lt__", "skbio.workflow.Workflow.__ne__", "skbio.workflow.Workflow.__str__", "skbio.workflow.Workflow.initialize_state", "skbio.workflow.method", "skbio.workflow.method.__call__", "skbio.workflow.method.__eq__", "skbio.workflow.method.__ge__", "skbio.workflow.method.__gt__", "skbio.workflow.method.__hash__", "skbio.workflow.method.__le__", "skbio.workflow.method.__lt__", "skbio.workflow.method.__ne__", "skbio.workflow.method.__str__", "skbio.workflow.requires", "skbio.workflow.requires.__call__", "skbio.workflow.requires.__eq__", "skbio.workflow.requires.__ge__", "skbio.workflow.requires.__gt__", "skbio.workflow.requires.__hash__", "skbio.workflow.requires.__le__", "skbio.workflow.requires.__lt__", "skbio.workflow.requires.__ne__", "skbio.workflow.requires.__str__", "scikit-bio", "File I/O (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.io</span></code>)", "Metadata (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.metadata</span></code>)", "Sequences (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.sequence</span></code>)", "Statistics (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.stats</span></code>)", "Tree representations (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.tree</span></code>)", "API Stability", "Utility functionality (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.util</span></code>)", "Constructing workflows (<code class=\"xref py py-mod docutils literal notranslate\"><span class=\"pre\">skbio.workflow</span></code>)"], "terms": {"thi": [0, 1, 2, 3, 4, 5, 20, 33, 34, 35, 36, 38, 42, 44, 46, 47, 48, 49, 50, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 73, 80, 82, 85, 86, 87, 92, 94, 102, 103, 104, 105, 106, 107, 109, 110, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 157, 158, 159, 170, 178, 181, 183, 185, 186, 187, 192, 194, 195, 196, 197, 198, 203, 205, 206, 207, 208, 209, 210, 212, 215, 216, 217, 218, 220, 222, 224, 226, 227, 230, 231, 235, 239, 241, 242, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 262, 263, 264, 267, 268, 269, 277, 278, 279, 280, 282, 283, 284, 285, 287, 289, 291, 293, 294, 296, 297, 301, 305, 314, 315, 316, 317, 319, 320, 321, 322, 324, 325, 326, 327, 330, 331, 332, 333, 335, 337, 339, 341, 342, 344, 345, 349, 353, 363, 364, 365, 366, 368, 369, 370, 371, 373, 374, 376, 377, 380, 381, 382, 383, 385, 387, 389, 391, 392, 395, 396, 400, 404, 406, 407, 415, 416, 417, 418, 419, 421, 422, 423, 424, 426, 427, 428, 430, 432, 433, 434, 436, 437, 438, 439, 441, 443, 445, 447, 448, 450, 451, 452, 454, 458, 459, 460, 461, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 492, 494, 506, 507, 508, 511, 513, 515, 517, 529, 531, 532, 533, 534, 537, 540, 541, 542, 544, 546, 547, 548, 549, 630, 631, 641, 642, 643, 645, 650, 651, 652, 655, 657, 658, 659, 666, 681, 683, 685, 687, 689, 690, 693, 695, 696, 698, 700, 701, 703, 707, 714, 718, 721, 722, 724, 726, 727, 729, 730, 731, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 768, 769, 770, 771, 780, 791, 802, 803, 804, 805, 806, 807, 808, 809], "modul": [0, 3, 144, 146, 185, 470, 473, 476, 549, 631, 655, 768, 769, 801, 803, 804, 806, 809], "provid": [0, 1, 3, 5, 20, 31, 47, 49, 50, 57, 58, 63, 66, 68, 70, 80, 85, 102, 103, 104, 105, 106, 111, 131, 135, 136, 140, 142, 144, 145, 146, 157, 159, 177, 178, 182, 183, 185, 210, 218, 239, 252, 255, 261, 285, 305, 315, 318, 324, 333, 353, 364, 367, 373, 383, 404, 417, 420, 426, 434, 439, 454, 459, 462, 467, 473, 489, 490, 503, 506, 510, 527, 531, 536, 540, 541, 542, 543, 544, 546, 549, 580, 630, 632, 641, 642, 646, 655, 657, 658, 687, 695, 703, 716, 722, 726, 729, 736, 744, 745, 771, 802, 803, 804, 806, 808, 809], "comput": [0, 2, 3, 48, 49, 52, 71, 74, 80, 87, 96, 101, 102, 103, 104, 105, 106, 107, 110, 195, 235, 239, 301, 305, 349, 353, 400, 404, 452, 454, 470, 471, 472, 476, 488, 489, 503, 527, 540, 541, 542, 543, 544, 545, 548, 549, 550, 559, 579, 580, 589, 590, 600, 610, 619, 620, 629, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 696, 732, 734, 744, 769, 804, 806], "manipul": [0, 53, 54, 247, 249, 311, 313, 359, 361, 412, 414, 434, 456, 457, 473, 489], "sequenc": [0, 1, 3, 20, 31, 32, 34, 35, 36, 40, 42, 44, 45, 47, 48, 50, 51, 52, 53, 55, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 131, 132, 133, 134, 136, 137, 138, 143, 145, 186, 195, 206, 490, 546, 630, 659, 801, 802, 809], "dna": [0, 31, 32, 33, 34, 35, 36, 40, 42, 45, 47, 48, 50, 51, 52, 54, 55, 56, 58, 59, 60, 63, 66, 68, 133, 134, 135, 136, 137, 138, 142, 143, 144, 269, 280, 296, 298, 299, 300, 302, 303, 306, 307, 308, 309, 312, 313, 315, 323, 326, 344, 346, 347, 348, 350, 351, 354, 355, 356, 357, 360, 361, 364, 372, 376, 378, 394, 395, 397, 398, 399, 401, 402, 405, 406, 407, 408, 409, 410, 413, 414, 416, 417, 425, 428, 429, 430, 434, 450, 457, 459, 490, 802, 804], "rna": [0, 31, 36, 63, 66, 68, 133, 134, 135, 136, 137, 142, 143, 144, 213, 230, 265, 266, 267, 269, 278, 279, 280, 296, 344, 434, 450, 804], "protein": [0, 1, 20, 31, 49, 62, 64, 67, 68, 131, 133, 134, 135, 136, 137, 142, 143, 144, 252, 266, 267, 269, 278, 279, 280, 315, 417, 431, 432, 434, 459, 658, 804], "can": [0, 1, 2, 3, 4, 20, 31, 55, 58, 62, 63, 64, 68, 69, 76, 80, 102, 104, 105, 106, 108, 109, 110, 131, 133, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 148, 186, 194, 195, 209, 230, 235, 237, 252, 262, 296, 301, 303, 315, 325, 344, 349, 351, 364, 374, 395, 400, 402, 417, 427, 434, 450, 452, 459, 468, 470, 473, 476, 488, 489, 490, 494, 513, 517, 540, 541, 542, 544, 545, 546, 549, 631, 641, 644, 649, 650, 651, 652, 655, 657, 658, 659, 666, 686, 688, 696, 726, 729, 736, 744, 745, 746, 750, 751, 770, 791, 804, 806, 807, 809], "well": [0, 1, 136, 146, 434, 489, 490, 541, 543, 544, 548, 632, 645, 744, 802, 806, 808], "custom": [0, 3, 145, 213, 235, 269, 270, 280, 301, 328, 349, 378, 400, 452, 641], "alphabet": [0, 59, 69, 108, 109, 131, 135, 213, 269, 280, 328, 378, 434, 471, 804], "load": [0, 135, 136, 141, 143, 476, 489, 490, 540, 541, 544, 545, 768, 769, 802], "two": [0, 1, 3, 62, 63, 64, 65, 66, 67, 68, 71, 104, 105, 131, 132, 135, 136, 137, 138, 140, 142, 143, 145, 186, 187, 192, 198, 203, 206, 211, 218, 230, 235, 252, 256, 258, 285, 296, 301, 315, 319, 321, 333, 344, 349, 364, 368, 370, 383, 395, 400, 417, 421, 423, 439, 450, 452, 459, 463, 465, 471, 472, 473, 476, 488, 489, 490, 492, 494, 498, 500, 503, 507, 515, 517, 521, 523, 527, 532, 540, 541, 542, 543, 544, 545, 546, 548, 645, 650, 655, 658, 659, 689, 690, 696, 705, 727, 729, 744, 749, 802, 804, 806, 807], "have": [0, 1, 3, 4, 20, 48, 51, 52, 55, 56, 68, 70, 80, 85, 104, 105, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 176, 186, 195, 196, 197, 218, 230, 236, 252, 278, 285, 296, 302, 315, 333, 344, 350, 364, 383, 395, 401, 417, 439, 450, 459, 476, 489, 492, 515, 542, 548, 549, 569, 580, 599, 609, 630, 641, 644, 645, 646, 649, 650, 652, 653, 655, 657, 658, 659, 660, 666, 684, 685, 686, 695, 697, 698, 721, 727, 734, 736, 737, 746, 748, 804, 806, 809], "been": [0, 1, 4, 62, 63, 64, 110, 135, 136, 137, 142, 176, 178, 183, 252, 315, 364, 417, 434, 459, 542, 548, 660, 721], "previous": [0, 255, 262, 318, 325, 367, 374, 420, 427, 462, 468, 809], "tabularmsa": [0, 62, 63, 64, 65, 66, 67, 68, 125, 133, 136, 142, 144, 195, 802], "object": [0, 1, 3, 20, 31, 34, 35, 36, 44, 47, 50, 51, 53, 54, 55, 56, 58, 59, 62, 63, 64, 65, 66, 67, 68, 107, 110, 125, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 177, 179, 182, 184, 186, 187, 192, 194, 195, 196, 197, 198, 203, 205, 206, 207, 208, 209, 213, 215, 218, 220, 230, 231, 235, 238, 239, 246, 247, 249, 250, 251, 256, 257, 258, 259, 264, 282, 285, 287, 296, 297, 301, 304, 305, 310, 311, 313, 314, 319, 320, 321, 322, 326, 328, 330, 333, 335, 344, 345, 349, 352, 353, 358, 359, 361, 363, 368, 369, 370, 371, 376, 378, 380, 383, 385, 395, 396, 400, 403, 404, 411, 412, 414, 415, 416, 421, 422, 423, 424, 430, 434, 436, 439, 441, 450, 451, 452, 453, 454, 455, 456, 457, 458, 463, 464, 465, 466, 470, 471, 476, 489, 490, 494, 502, 503, 505, 513, 517, 526, 527, 530, 540, 541, 543, 544, 545, 546, 569, 599, 609, 644, 645, 650, 651, 652, 666, 682, 690, 697, 729, 734, 736, 745, 748, 749, 769, 770, 791, 802, 804, 806, 809], "us": [0, 1, 2, 3, 4, 7, 20, 31, 38, 47, 48, 49, 50, 51, 53, 54, 55, 56, 58, 62, 63, 64, 74, 75, 80, 81, 84, 85, 92, 94, 97, 102, 104, 105, 106, 107, 110, 130, 131, 133, 135, 136, 137, 138, 139, 140, 142, 143, 145, 146, 148, 157, 158, 159, 174, 175, 178, 183, 195, 206, 213, 230, 235, 239, 247, 249, 252, 254, 255, 262, 266, 267, 269, 276, 277, 278, 279, 280, 296, 301, 305, 311, 313, 315, 317, 318, 325, 328, 344, 349, 353, 359, 361, 364, 366, 367, 374, 378, 395, 400, 404, 412, 414, 417, 419, 420, 427, 431, 432, 434, 450, 452, 454, 456, 457, 459, 461, 462, 468, 470, 471, 473, 474, 476, 481, 482, 484, 489, 490, 494, 503, 513, 517, 527, 534, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 570, 580, 590, 610, 620, 631, 641, 644, 650, 654, 655, 656, 657, 658, 659, 666, 667, 668, 683, 685, 686, 687, 690, 691, 694, 696, 702, 703, 721, 726, 727, 734, 736, 741, 742, 744, 745, 746, 747, 748, 749, 750, 770, 791, 804, 806, 807, 808, 809], "id": [0, 3, 31, 36, 53, 58, 59, 80, 102, 104, 105, 106, 107, 110, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 218, 226, 228, 247, 266, 267, 269, 277, 278, 279, 285, 293, 295, 311, 333, 341, 343, 359, 383, 391, 393, 412, 431, 432, 434, 439, 447, 449, 456, 489, 490, 491, 492, 494, 499, 500, 502, 503, 504, 508, 510, 513, 514, 515, 517, 522, 523, 526, 527, 528, 529, 533, 534, 536, 539, 540, 541, 542, 543, 544, 545, 546, 580, 620, 632, 640, 641, 657, 658, 659, 667, 668, 684, 691, 694, 701, 703, 704, 707, 734, 736, 745, 804], "msa": [0, 31, 32, 33, 34, 35, 36, 38, 40, 42, 44, 45, 46, 47, 48, 50, 51, 52, 55, 56, 58, 59, 60, 133, 135, 136, 142, 144], "": [0, 1, 2, 3, 20, 31, 47, 48, 49, 50, 53, 54, 55, 56, 58, 62, 63, 64, 67, 71, 73, 76, 78, 79, 80, 81, 83, 84, 88, 90, 91, 92, 95, 97, 98, 99, 101, 102, 104, 105, 107, 108, 109, 129, 131, 132, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 186, 195, 206, 215, 218, 220, 222, 224, 226, 227, 228, 231, 232, 233, 234, 235, 236, 237, 238, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 265, 266, 267, 269, 270, 275, 278, 279, 280, 282, 285, 287, 289, 291, 293, 294, 295, 297, 298, 299, 300, 301, 302, 303, 304, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 330, 333, 335, 337, 339, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 380, 383, 385, 387, 389, 391, 392, 393, 396, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 429, 431, 432, 434, 436, 439, 441, 443, 445, 447, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 474, 475, 476, 479, 480, 481, 482, 488, 490, 494, 500, 502, 510, 517, 523, 526, 536, 540, 541, 542, 543, 544, 569, 599, 609, 630, 641, 644, 645, 646, 650, 652, 654, 655, 657, 658, 659, 687, 695, 707, 723, 744, 791, 802, 804, 806, 807, 809], "index": [0, 1, 3, 31, 33, 36, 38, 44, 47, 50, 51, 54, 56, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 72, 73, 76, 81, 82, 84, 85, 88, 89, 91, 95, 97, 98, 101, 102, 133, 135, 142, 143, 144, 220, 249, 287, 313, 335, 361, 385, 414, 441, 457, 474, 475, 476, 489, 491, 494, 508, 514, 517, 533, 534, 540, 541, 542, 543, 544, 549, 580, 620, 632, 641, 657, 704, 707, 717, 718, 736, 744, 748], "from": [0, 1, 2, 3, 20, 31, 32, 33, 34, 35, 36, 40, 42, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 80, 85, 101, 104, 105, 111, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 157, 158, 159, 177, 182, 186, 194, 195, 206, 207, 210, 213, 214, 215, 218, 220, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 269, 278, 279, 280, 281, 282, 285, 287, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 328, 329, 330, 333, 335, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 383, 385, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 439, 441, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 494, 500, 503, 505, 506, 508, 510, 517, 523, 527, 530, 531, 533, 534, 536, 540, 541, 542, 544, 545, 546, 548, 549, 550, 630, 631, 641, 642, 644, 645, 647, 648, 650, 655, 657, 658, 659, 660, 667, 668, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 750, 769, 771, 804, 806, 807, 809], "import": [0, 1, 2, 3, 31, 32, 33, 34, 35, 36, 40, 42, 45, 47, 48, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 80, 104, 105, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 157, 158, 159, 186, 195, 206, 213, 214, 215, 218, 220, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 269, 278, 279, 280, 281, 282, 285, 287, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 328, 329, 330, 333, 335, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 380, 383, 385, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 439, 441, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 500, 505, 508, 510, 523, 530, 533, 534, 536, 540, 541, 542, 544, 545, 548, 549, 630, 631, 641, 655, 657, 658, 659, 660, 667, 668, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 750, 769, 802, 804, 806, 809], "seq": [0, 1, 31, 40, 45, 51, 53, 54, 58, 59, 60, 62, 63, 64, 65, 66, 67, 131, 132, 133, 135, 136, 138, 142, 143, 216, 217, 229, 236, 239, 247, 249, 262, 263, 264, 267, 279, 280, 283, 284, 302, 305, 311, 313, 325, 326, 331, 332, 350, 353, 359, 361, 374, 376, 381, 382, 394, 401, 404, 412, 414, 427, 428, 430, 432, 434, 437, 438, 454, 456, 457, 468, 630, 809], "acc": [0, 132, 804], "g": [0, 1, 3, 20, 36, 49, 50, 56, 64, 67, 82, 85, 92, 107, 110, 125, 131, 133, 134, 135, 136, 137, 139, 140, 141, 142, 145, 146, 186, 220, 222, 227, 230, 231, 238, 239, 240, 241, 242, 252, 287, 289, 294, 296, 297, 304, 305, 306, 315, 335, 337, 342, 344, 345, 352, 353, 354, 364, 385, 387, 392, 395, 396, 403, 404, 405, 406, 407, 417, 434, 441, 443, 448, 450, 451, 453, 454, 459, 471, 476, 488, 489, 490, 494, 513, 517, 534, 540, 541, 543, 544, 641, 658, 659, 666, 686, 687, 692, 695, 699, 726, 727, 728, 730, 731, 737, 740, 741, 742, 744, 770, 802, 804, 806, 809], "ggta": 0, "metadata": [0, 1, 3, 31, 36, 44, 47, 48, 50, 53, 54, 55, 56, 58, 59, 133, 134, 135, 136, 137, 138, 142, 143, 213, 218, 220, 226, 228, 229, 230, 233, 236, 246, 247, 249, 255, 262, 263, 265, 266, 267, 269, 278, 279, 280, 285, 287, 293, 295, 296, 299, 302, 310, 311, 313, 318, 325, 328, 333, 335, 341, 343, 344, 347, 350, 358, 359, 361, 367, 374, 378, 383, 385, 391, 393, 394, 395, 398, 401, 411, 412, 414, 420, 427, 428, 429, 431, 432, 434, 439, 441, 447, 449, 450, 455, 456, 457, 462, 468, 503, 527, 541, 549, 560, 580, 590, 600, 620, 641, 652, 655, 657, 658, 659, 801, 804], "seq1": [0, 31, 47, 50, 58, 62, 63, 64, 65, 66, 67, 133, 135, 136, 142, 144, 471, 472], "tcc": 0, "ggca": 0, "seq2": [0, 31, 47, 50, 58, 62, 63, 64, 65, 66, 67, 135, 136, 144, 471, 472], "minter": [0, 31, 36, 47, 50, 58, 59, 133, 142], "stat": [0, 1, 3, 31, 47, 48, 50, 55, 56, 59, 92, 96, 130, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 213, 220, 229, 230, 233, 236, 263, 265, 266, 267, 269, 278, 279, 280, 287, 296, 299, 302, 328, 335, 344, 347, 350, 378, 385, 394, 395, 398, 401, 428, 429, 431, 432, 434, 441, 450, 470, 801, 804], "count": [0, 1, 31, 47, 50, 52, 56, 59, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 110, 133, 135, 136, 142, 144, 239, 241, 242, 254, 256, 258, 305, 317, 319, 321, 353, 366, 368, 370, 404, 406, 407, 419, 421, 423, 454, 461, 463, 465, 472, 473, 476, 548, 645, 651, 658, 659, 660, 689, 690, 716, 744, 802], "2": [0, 1, 3, 20, 31, 36, 42, 47, 48, 49, 51, 52, 55, 56, 58, 62, 63, 64, 65, 66, 67, 71, 72, 74, 76, 78, 80, 82, 85, 86, 87, 89, 90, 92, 95, 97, 98, 101, 104, 105, 106, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 158, 195, 206, 209, 211, 229, 230, 231, 237, 238, 239, 242, 250, 252, 254, 263, 267, 270, 278, 279, 296, 297, 303, 304, 305, 314, 315, 317, 344, 345, 351, 352, 353, 363, 364, 366, 394, 395, 396, 402, 403, 404, 407, 415, 417, 419, 428, 432, 434, 450, 451, 453, 454, 458, 459, 461, 471, 473, 474, 475, 476, 477, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 500, 505, 508, 510, 513, 523, 530, 533, 534, 536, 540, 541, 542, 543, 544, 545, 546, 548, 549, 630, 631, 641, 644, 645, 647, 650, 652, 655, 657, 658, 659, 660, 680, 685, 686, 688, 690, 695, 696, 701, 703, 704, 705, 728, 729, 734, 736, 737, 739, 740, 744, 745, 750, 802, 804, 806, 807, 809], "posit": [0, 1, 20, 31, 32, 36, 44, 47, 48, 49, 50, 51, 52, 54, 55, 56, 59, 62, 63, 64, 65, 66, 67, 68, 69, 131, 132, 133, 135, 136, 137, 140, 142, 143, 144, 213, 218, 220, 222, 226, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 240, 249, 250, 252, 255, 256, 257, 258, 259, 260, 262, 263, 265, 266, 267, 278, 279, 285, 287, 289, 293, 294, 295, 296, 297, 298, 299, 300, 302, 303, 304, 306, 313, 314, 315, 318, 319, 320, 321, 322, 323, 325, 328, 333, 335, 337, 341, 342, 343, 344, 345, 346, 347, 348, 350, 351, 352, 354, 361, 363, 364, 367, 368, 369, 370, 371, 372, 374, 375, 378, 383, 385, 387, 391, 392, 393, 394, 395, 396, 397, 398, 399, 401, 402, 403, 405, 414, 415, 417, 420, 421, 422, 423, 424, 425, 427, 428, 429, 431, 432, 434, 439, 441, 443, 447, 448, 449, 450, 451, 453, 457, 458, 459, 462, 463, 464, 465, 466, 468, 474, 475, 476, 484, 542, 548, 620, 632, 655, 656, 658, 659, 717, 804], "13": [0, 1, 75, 95, 132, 135, 141, 143, 213, 280, 328, 378, 434, 476, 631], "dtype": [0, 3, 31, 36, 47, 48, 49, 50, 52, 55, 56, 58, 59, 133, 135, 136, 142, 143, 144, 229, 230, 232, 233, 234, 240, 257, 259, 260, 263, 296, 298, 299, 300, 306, 320, 322, 323, 344, 346, 347, 348, 354, 369, 371, 372, 375, 394, 395, 397, 398, 399, 405, 422, 424, 425, 428, 434, 450, 464, 466, 476, 490, 534, 540, 544, 631, 736, 804], "conveni": [0, 2, 20, 57, 61, 94, 179, 184, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 506, 511, 531, 537, 642, 643, 722, 743, 808], "local_pairwise_align_ssw": [0, 62, 63, 64, 65, 66, 67], "score": [0, 20, 49, 62, 63, 64, 65, 66, 67, 68, 69, 75, 131, 132, 135, 137, 138, 143, 434, 632, 652], "start_end_posit": 0, "actaaggctctctacccctctcagaga": 0, "actaaggctcctaacccccttttctcaga": 0, "30": [0, 1, 132, 137, 138, 141, 143, 658, 659, 718], "actaaggctctct": 0, "acccc": 0, "tctcaga": 0, "actaaggctc": 0, "ctaacccccttttctcaga": 0, "27": [0, 80, 104, 105, 132, 542], "0": [0, 1, 3, 4, 5, 6, 18, 19, 20, 31, 32, 33, 34, 35, 36, 38, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 157, 158, 159, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 187, 192, 194, 196, 197, 198, 203, 205, 206, 207, 208, 209, 211, 213, 214, 215, 216, 217, 218, 220, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 328, 329, 330, 331, 332, 333, 335, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 382, 383, 385, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 441, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 514, 515, 517, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 540, 541, 542, 543, 544, 545, 546, 548, 549, 559, 569, 579, 580, 589, 599, 609, 619, 629, 630, 631, 640, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 667, 668, 671, 674, 676, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 748, 749, 750, 767, 768, 769, 771, 780, 781, 782, 792, 802, 804, 806, 809], "24": [0, 132, 141, 658], "28": [0, 141, 655], "stripedsmithwaterman": [0, 68], "queri": [0, 20, 68, 131, 132, 195, 434], "aaaaaactctctaaactcactaaggctctctacccctcttcagagaagtcga": 0, "print": [0, 1, 3, 55, 80, 104, 105, 133, 135, 136, 137, 138, 140, 142, 143, 144, 236, 252, 267, 279, 302, 315, 350, 364, 401, 417, 432, 434, 459, 489, 542, 548, 549, 630, 655, 659, 667, 668, 682, 683, 686, 687, 690, 691, 692, 694, 695, 697, 698, 699, 701, 703, 704, 706, 709, 710, 711, 712, 713, 715, 717, 718, 719, 720, 721, 724, 726, 727, 728, 729, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 804, 806, 809], "49": [0, 138, 141], "length": [0, 3, 20, 31, 47, 48, 50, 55, 62, 63, 64, 80, 104, 105, 130, 131, 132, 134, 135, 136, 137, 138, 142, 143, 144, 195, 206, 213, 214, 220, 224, 229, 230, 231, 233, 236, 239, 241, 242, 252, 253, 254, 256, 257, 258, 259, 263, 265, 266, 267, 269, 278, 279, 280, 281, 287, 291, 296, 297, 299, 302, 305, 315, 316, 317, 319, 320, 321, 322, 328, 329, 335, 339, 344, 345, 347, 350, 353, 364, 365, 366, 368, 369, 370, 371, 378, 379, 385, 389, 394, 395, 396, 398, 401, 404, 406, 407, 417, 418, 419, 421, 422, 423, 424, 428, 429, 431, 432, 434, 435, 441, 445, 450, 451, 454, 459, 460, 461, 463, 464, 465, 466, 471, 472, 476, 503, 527, 540, 543, 544, 548, 649, 650, 658, 659, 663, 666, 680, 686, 695, 696, 705, 727, 734, 736, 739, 740, 745, 804, 806, 809], "multipl": [0, 31, 55, 80, 104, 105, 133, 134, 135, 136, 137, 138, 140, 145, 186, 206, 434, 473, 476, 484, 548, 652, 658, 737, 744, 802, 806], "target": [0, 1, 20, 68, 79, 138, 500, 510, 523, 536, 807], "an": [0, 1, 2, 3, 4, 5, 7, 20, 31, 33, 47, 48, 49, 50, 52, 53, 54, 55, 56, 58, 61, 62, 63, 64, 68, 71, 80, 89, 102, 104, 105, 106, 110, 124, 125, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148, 157, 158, 159, 171, 173, 174, 175, 177, 182, 186, 195, 205, 206, 208, 209, 211, 212, 220, 230, 237, 246, 247, 249, 256, 258, 262, 268, 269, 278, 280, 287, 296, 303, 310, 311, 313, 319, 321, 325, 327, 335, 344, 351, 358, 359, 361, 368, 370, 374, 377, 385, 395, 402, 411, 412, 414, 421, 423, 427, 433, 434, 441, 450, 455, 456, 457, 463, 465, 468, 469, 473, 476, 478, 479, 480, 481, 482, 484, 488, 489, 494, 500, 502, 503, 507, 510, 511, 517, 523, 524, 526, 527, 532, 536, 537, 540, 542, 543, 544, 548, 559, 579, 589, 600, 619, 629, 630, 631, 640, 643, 649, 650, 655, 657, 658, 659, 660, 667, 668, 680, 682, 683, 685, 687, 691, 693, 694, 698, 701, 702, 704, 711, 713, 716, 726, 729, 734, 736, 739, 741, 742, 743, 744, 745, 746, 751, 752, 755, 761, 767, 768, 769, 771, 791, 802, 804, 806, 809], "effici": [0, 139, 529], "wai": [0, 1, 3, 135, 136, 140, 142, 144, 146, 186, 476, 542, 650, 655, 802, 806], "find": [0, 1, 81, 232, 234, 237, 240, 250, 252, 257, 259, 260, 298, 300, 303, 306, 314, 315, 320, 322, 323, 346, 348, 351, 354, 363, 364, 369, 371, 372, 375, 397, 399, 402, 405, 415, 417, 422, 424, 425, 458, 459, 464, 466, 541, 544, 548, 645, 659, 680, 681, 693, 695, 696, 699, 700, 701, 706, 708, 709, 710, 711, 713, 714, 721, 725, 730, 739, 741, 742, 767, 807], "represent": [0, 3, 130, 135, 140, 195, 255, 276, 318, 367, 420, 462, 499, 522, 547, 632, 640, 666, 679, 736, 737, 801, 802], "target_sequ": [0, 7, 20, 21], "gctaactaggctcccttctacccctctcagaga": 0, "gcccagtagcttcccaatatgagagcatcaattgtagatcgggcc": 0, "tctataagattccgcatgcgttacttataagatgtctcaacgg": 0, "tagagattaattgccactgccaaaattctg": 0, "query_sequ": [0, 7, 20, 21], "append": [0, 50, 142, 146, 434, 697], "act": [0, 1, 56, 157, 158, 159], "aggctc": 0, "38": [0, 131, 136, 141, 655], "aligned_query_sequ": 0, "tctacccctctcagaga": 0, "aligned_target_sequ": 0, "aggctcccttctacccctctcagaga": 0, "scikit": [0, 1, 2, 3, 53, 54, 57, 61, 62, 65, 68, 69, 80, 104, 105, 106, 107, 108, 109, 110, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 210, 212, 247, 249, 261, 266, 267, 268, 269, 278, 279, 311, 313, 324, 327, 359, 361, 373, 377, 412, 414, 426, 431, 432, 433, 456, 457, 467, 469, 470, 506, 511, 531, 537, 642, 643, 722, 743, 746, 804, 807, 808], "bio": [0, 1, 2, 3, 53, 54, 57, 61, 62, 65, 68, 69, 80, 99, 104, 105, 106, 107, 108, 109, 110, 131, 132, 133, 134, 135, 136, 140, 141, 142, 143, 144, 145, 210, 212, 247, 249, 261, 266, 267, 268, 269, 278, 279, 311, 313, 324, 327, 359, 361, 373, 377, 412, 414, 426, 431, 432, 433, 456, 457, 467, 469, 470, 506, 511, 531, 537, 541, 642, 643, 722, 743, 746, 804, 807, 808], "also": [0, 1, 2, 3, 48, 49, 76, 80, 103, 104, 105, 106, 125, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 148, 195, 242, 252, 262, 278, 315, 325, 364, 374, 407, 417, 427, 434, 459, 468, 476, 488, 489, 540, 541, 542, 544, 548, 645, 652, 655, 658, 659, 745, 748, 791, 802, 804, 809], "pure": [0, 746], "python": [0, 1, 3, 7, 434, 489, 513, 542, 746, 751, 801, 802, 804, 807], "implement": [0, 1, 2, 3, 4, 62, 65, 70, 71, 72, 73, 75, 76, 80, 81, 84, 85, 89, 90, 95, 97, 98, 99, 101, 103, 104, 105, 108, 109, 136, 140, 146, 157, 158, 159, 160, 644, 645, 650, 651, 688, 744, 745, 746], "smith": [0, 20, 65, 66, 67, 68, 548], "waterman": [0, 20, 65, 66, 67, 68], "needleman": [0, 62, 63, 64], "wunsch": [0, 62, 63, 64], "These": [0, 1, 3, 48, 53, 54, 70, 80, 104, 105, 137, 140, 144, 145, 247, 249, 311, 313, 359, 361, 412, 414, 456, 457, 470, 545, 547, 632, 651, 657, 807], "ar": [0, 3, 4, 20, 31, 32, 36, 40, 44, 45, 48, 49, 52, 55, 56, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 74, 75, 80, 86, 87, 102, 104, 105, 106, 107, 109, 110, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 157, 158, 159, 170, 177, 181, 182, 186, 187, 192, 198, 203, 206, 208, 210, 211, 212, 213, 218, 220, 226, 229, 230, 236, 239, 243, 244, 245, 248, 256, 257, 258, 259, 261, 262, 265, 266, 267, 268, 269, 270, 275, 277, 278, 279, 280, 285, 287, 293, 296, 302, 305, 307, 308, 309, 312, 319, 320, 321, 322, 324, 325, 327, 328, 333, 335, 341, 344, 350, 353, 355, 356, 357, 360, 362, 368, 369, 370, 371, 373, 374, 377, 378, 383, 385, 391, 394, 395, 401, 404, 408, 409, 410, 413, 421, 422, 423, 424, 426, 427, 429, 431, 432, 433, 434, 439, 441, 447, 450, 454, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 476, 478, 481, 482, 484, 485, 486, 487, 488, 489, 490, 492, 494, 498, 503, 506, 507, 510, 511, 513, 515, 517, 521, 527, 529, 531, 532, 534, 536, 537, 540, 541, 542, 543, 544, 545, 546, 548, 560, 580, 620, 630, 632, 640, 641, 642, 643, 644, 645, 648, 649, 650, 652, 653, 655, 657, 658, 659, 666, 685, 688, 693, 703, 714, 716, 717, 721, 722, 729, 730, 734, 736, 737, 738, 743, 744, 746, 748, 749, 751, 767, 770, 771, 781, 791, 802, 804, 806, 807, 809], "much": [0, 1, 3, 80, 104, 105, 140, 802], "slower": [0, 746], "than": [0, 1, 3, 20, 48, 49, 71, 80, 85, 87, 104, 105, 135, 140, 142, 144, 178, 183, 195, 214, 215, 218, 231, 235, 239, 250, 251, 252, 253, 254, 256, 257, 258, 259, 267, 279, 281, 282, 285, 297, 301, 305, 314, 315, 316, 317, 319, 320, 321, 322, 329, 330, 333, 345, 349, 353, 363, 364, 365, 366, 368, 369, 370, 371, 379, 380, 383, 396, 400, 404, 415, 416, 417, 418, 419, 421, 422, 423, 424, 432, 435, 436, 439, 451, 452, 454, 458, 459, 460, 461, 463, 464, 465, 466, 472, 473, 476, 478, 489, 529, 540, 542, 543, 544, 548, 630, 644, 645, 658, 659, 660, 686, 703, 716, 745, 750, 802, 806], "method": [0, 1, 3, 7, 20, 31, 38, 49, 56, 57, 61, 62, 82, 102, 104, 106, 107, 110, 141, 148, 157, 159, 160, 176, 186, 195, 205, 210, 212, 213, 216, 217, 230, 239, 261, 263, 267, 268, 269, 277, 279, 280, 283, 284, 296, 305, 324, 327, 328, 331, 332, 344, 353, 373, 377, 378, 381, 382, 395, 404, 426, 428, 432, 433, 434, 437, 438, 450, 454, 467, 469, 476, 484, 488, 489, 490, 506, 511, 513, 529, 531, 537, 540, 541, 542, 543, 544, 545, 550, 560, 569, 570, 580, 590, 599, 600, 609, 610, 620, 630, 632, 641, 642, 643, 644, 645, 650, 666, 667, 668, 683, 685, 686, 687, 690, 691, 693, 694, 695, 696, 698, 700, 701, 721, 722, 727, 729, 741, 742, 743, 744, 745, 751, 762, 769, 770, 771, 780, 791, 804, 805, 806, 809], "describ": [0, 49, 62, 65, 80, 86, 87, 98, 104, 105, 110, 134, 135, 136, 137, 138, 141, 142, 144, 252, 255, 315, 318, 364, 367, 417, 420, 434, 459, 462, 489, 507, 524, 532, 542, 548, 651, 707, 745, 804, 806], "abov": [0, 3, 56, 135, 137, 141, 142, 143, 144, 146, 157, 159, 434, 489, 540, 542, 544, 548, 804], "serv": [0, 145, 641], "thei": [0, 1, 3, 40, 45, 49, 55, 71, 102, 106, 131, 134, 135, 136, 137, 138, 139, 140, 142, 144, 145, 146, 211, 218, 226, 229, 252, 270, 285, 293, 315, 333, 341, 364, 383, 391, 394, 417, 439, 447, 459, 473, 492, 502, 515, 526, 540, 541, 542, 543, 544, 545, 549, 640, 641, 644, 650, 655, 690, 697, 746, 748, 807, 809], "re": [0, 1, 3, 47, 50, 56, 80, 102, 104, 105, 106, 133, 135, 136, 142, 144, 213, 238, 264, 280, 304, 326, 328, 352, 376, 378, 403, 430, 434, 453, 545, 644, 652, 654, 655, 659, 736, 806, 809], "simpler": [0, 2], "experi": [0, 134, 137, 476, 658], "local": [0, 65, 66, 67, 131, 132, 137], "global": [0, 1, 62, 63, 64], "nucleotid": [0, 20, 63, 66, 132, 134, 135, 136, 137, 229, 251, 263, 394, 416, 428, 809], "The": [0, 1, 2, 3, 4, 5, 20, 21, 47, 48, 49, 50, 51, 53, 54, 56, 57, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 80, 81, 82, 84, 85, 89, 90, 92, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 108, 109, 110, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 157, 158, 159, 169, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 183, 184, 186, 187, 195, 196, 197, 205, 206, 207, 208, 209, 210, 212, 215, 218, 220, 224, 229, 230, 231, 233, 235, 239, 247, 249, 250, 252, 253, 254, 261, 263, 267, 268, 269, 277, 278, 279, 282, 285, 287, 291, 296, 297, 299, 301, 305, 311, 313, 314, 315, 316, 317, 324, 327, 330, 333, 335, 339, 344, 345, 347, 349, 353, 359, 361, 363, 364, 365, 366, 373, 377, 380, 383, 385, 389, 394, 395, 396, 398, 400, 404, 412, 414, 415, 417, 418, 419, 426, 428, 432, 433, 434, 436, 439, 441, 445, 450, 451, 452, 454, 456, 457, 458, 459, 460, 461, 467, 469, 471, 472, 473, 474, 475, 476, 479, 480, 481, 482, 488, 490, 494, 500, 503, 506, 510, 511, 513, 517, 523, 524, 527, 529, 531, 534, 536, 537, 540, 541, 542, 543, 544, 546, 548, 549, 560, 580, 590, 600, 620, 630, 632, 642, 643, 644, 645, 649, 650, 651, 652, 655, 656, 657, 658, 659, 680, 681, 686, 687, 688, 689, 690, 692, 693, 695, 696, 698, 699, 701, 702, 703, 704, 705, 707, 711, 713, 714, 717, 722, 723, 725, 726, 728, 729, 730, 731, 734, 736, 743, 744, 745, 751, 768, 770, 801, 802, 804, 806, 807, 809], "differ": [0, 1, 2, 3, 36, 48, 49, 51, 62, 63, 64, 75, 80, 85, 95, 104, 105, 111, 132, 135, 136, 142, 144, 145, 146, 215, 218, 226, 230, 231, 235, 250, 251, 256, 257, 258, 259, 262, 266, 269, 275, 282, 285, 293, 296, 297, 301, 314, 319, 320, 321, 322, 325, 330, 333, 341, 344, 345, 349, 363, 368, 369, 370, 371, 374, 380, 383, 391, 395, 396, 400, 415, 416, 421, 422, 423, 424, 427, 431, 436, 439, 447, 450, 451, 452, 458, 463, 464, 465, 466, 468, 471, 476, 489, 494, 517, 540, 543, 544, 548, 570, 620, 631, 644, 645, 650, 658, 659, 688, 689, 748, 749, 764, 765, 766, 804, 806, 807], "underli": [0, 4, 218, 278, 285, 333, 383, 434, 439, 471, 655, 804], "appli": [0, 1, 3, 20, 31, 49, 53, 54, 102, 105, 106, 107, 110, 134, 135, 140, 145, 195, 213, 247, 249, 311, 313, 328, 359, 361, 378, 412, 414, 434, 456, 457, 473, 503, 527, 529, 542, 545, 549, 644, 658, 745, 771, 809], "while": [0, 3, 130, 134, 135, 136, 137, 142, 186, 269, 434, 476, 544, 580, 620, 641, 657, 666, 693, 770, 804, 809], "default": [0, 3, 20, 31, 47, 48, 50, 56, 58, 61, 62, 63, 64, 66, 67, 71, 75, 85, 92, 97, 102, 106, 131, 135, 137, 138, 139, 140, 142, 143, 146, 148, 157, 159, 171, 173, 209, 212, 235, 252, 266, 267, 268, 269, 278, 279, 301, 315, 327, 349, 364, 377, 400, 417, 431, 432, 433, 452, 459, 469, 474, 475, 476, 481, 482, 484, 490, 500, 503, 505, 511, 523, 527, 530, 537, 541, 542, 544, 545, 546, 580, 630, 641, 643, 649, 650, 652, 653, 660, 690, 715, 734, 743, 744, 745, 748, 768, 771, 791, 802, 804, 806, 807, 809], "match": [0, 4, 5, 20, 47, 50, 56, 63, 66, 69, 131, 135, 136, 218, 237, 238, 256, 258, 259, 264, 278, 285, 303, 304, 319, 321, 322, 326, 333, 351, 352, 368, 370, 371, 376, 383, 402, 403, 421, 423, 424, 430, 439, 453, 463, 465, 466, 490, 540, 542, 544, 545, 655, 657, 658, 659, 689, 690, 699, 701, 804, 809], "mismatch": [0, 20, 63, 66, 69, 131, 132, 256, 257, 258, 319, 320, 321, 368, 369, 370, 421, 422, 423, 463, 464, 465, 542, 689], "gap": [0, 20, 48, 49, 52, 56, 62, 63, 64, 65, 66, 67, 131, 132, 133, 134, 135, 136, 137, 138, 142, 213, 229, 230, 233, 236, 237, 241, 242, 245, 252, 263, 265, 266, 267, 269, 278, 279, 280, 296, 299, 302, 303, 309, 315, 328, 344, 347, 350, 351, 357, 364, 378, 394, 395, 398, 401, 402, 406, 407, 410, 417, 428, 429, 431, 432, 434, 450, 459, 471, 737, 804, 809], "here": [0, 1, 3, 5, 49, 71, 72, 73, 75, 76, 80, 81, 84, 85, 89, 90, 92, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 134, 137, 142, 146, 157, 159, 252, 315, 364, 417, 459, 476, 548, 650, 652, 738, 745, 806], "we": [0, 1, 3, 5, 20, 47, 49, 50, 80, 85, 92, 104, 105, 107, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 146, 186, 195, 239, 252, 262, 278, 305, 315, 325, 353, 364, 374, 404, 417, 427, 434, 454, 459, 468, 476, 489, 540, 541, 542, 544, 545, 548, 549, 631, 641, 644, 652, 654, 655, 657, 658, 659, 690, 744, 802, 806, 807, 809], "pair": [0, 3, 53, 62, 63, 64, 66, 69, 104, 105, 106, 110, 134, 136, 137, 138, 140, 144, 205, 209, 247, 311, 359, 412, 456, 472, 476, 494, 500, 510, 517, 523, 527, 534, 536, 545, 655, 705, 734, 804], "open": [0, 1, 5, 57, 61, 62, 63, 64, 65, 66, 67, 107, 131, 132, 136, 146, 157, 159, 177, 178, 179, 182, 183, 184, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 506, 511, 531, 537, 642, 643, 722, 743, 769, 801, 802], "penalti": [0, 20, 62, 63, 64, 65, 66, 67], "11": [0, 20, 64, 67, 68, 74, 79, 131, 134, 141, 143, 238, 304, 352, 403, 453, 476, 549, 631, 645, 652, 655], "extend": [0, 20, 47, 56, 62, 63, 64, 65, 66, 67, 658, 682, 695, 744, 802, 807], "1": [0, 1, 3, 7, 19, 20, 31, 32, 33, 34, 35, 36, 38, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 56, 58, 60, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 107, 108, 109, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 157, 158, 186, 187, 192, 194, 195, 196, 197, 198, 203, 205, 206, 207, 208, 209, 211, 213, 218, 220, 229, 230, 231, 237, 239, 246, 252, 253, 254, 258, 263, 264, 266, 267, 269, 270, 276, 277, 278, 279, 280, 285, 287, 296, 297, 303, 305, 310, 315, 316, 317, 321, 326, 328, 333, 335, 344, 345, 351, 353, 358, 364, 365, 366, 370, 376, 378, 383, 385, 394, 395, 396, 402, 404, 411, 417, 418, 419, 423, 428, 429, 430, 431, 432, 434, 439, 441, 450, 451, 454, 455, 459, 460, 461, 465, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 500, 503, 505, 507, 508, 510, 513, 523, 524, 527, 530, 532, 533, 534, 536, 540, 541, 542, 543, 544, 545, 546, 548, 580, 600, 620, 630, 631, 641, 644, 645, 649, 652, 653, 655, 657, 658, 659, 660, 680, 685, 688, 690, 695, 696, 699, 703, 704, 705, 716, 717, 727, 728, 729, 734, 736, 737, 739, 740, 744, 745, 750, 804, 806, 809], "other": [0, 1, 3, 4, 20, 36, 44, 53, 54, 56, 94, 98, 107, 134, 135, 136, 137, 139, 140, 142, 144, 145, 187, 192, 198, 203, 208, 218, 226, 235, 241, 242, 247, 249, 251, 256, 257, 258, 259, 262, 270, 275, 285, 293, 301, 311, 313, 319, 320, 321, 322, 325, 333, 341, 349, 359, 361, 368, 369, 370, 371, 374, 383, 391, 400, 406, 407, 412, 414, 416, 421, 422, 423, 424, 427, 434, 439, 447, 452, 456, 457, 463, 464, 465, 466, 468, 470, 476, 489, 492, 498, 513, 515, 521, 544, 641, 644, 645, 650, 657, 659, 666, 688, 689, 690, 696, 698, 699, 748, 770, 780, 802, 804, 806, 809], "word": [0, 134, 135, 137, 140, 144, 209, 254, 317, 366, 419, 461], "more": [0, 1, 3, 48, 49, 50, 57, 61, 62, 68, 71, 82, 102, 109, 132, 134, 135, 136, 140, 141, 142, 143, 144, 178, 183, 210, 212, 243, 244, 245, 248, 261, 268, 307, 308, 309, 312, 324, 327, 355, 356, 357, 360, 362, 373, 377, 408, 409, 410, 413, 426, 433, 467, 469, 473, 476, 478, 489, 494, 506, 511, 517, 529, 531, 537, 540, 541, 542, 543, 544, 545, 548, 630, 641, 642, 643, 644, 645, 652, 658, 659, 686, 703, 722, 743, 744, 802, 806, 808], "costli": 0, "new": [0, 1, 47, 50, 57, 58, 59, 84, 86, 87, 95, 104, 145, 157, 158, 159, 170, 181, 195, 210, 220, 230, 233, 261, 262, 287, 296, 299, 324, 325, 335, 344, 347, 373, 374, 385, 395, 398, 426, 427, 434, 441, 450, 467, 468, 506, 529, 531, 542, 543, 545, 642, 645, 653, 667, 668, 691, 694, 721, 722, 726, 727, 741, 742, 745, 801, 804, 806, 809], "exist": [0, 1, 58, 71, 140, 146, 157, 158, 159, 174, 175, 278, 489, 503, 527, 539, 542, 545, 641, 666, 682, 690, 695, 697, 728, 768, 791, 804], "one": [0, 1, 2, 3, 47, 48, 49, 50, 53, 54, 56, 62, 63, 64, 80, 82, 85, 90, 102, 104, 105, 134, 135, 136, 137, 138, 140, 141, 142, 144, 145, 146, 158, 178, 183, 206, 209, 211, 222, 227, 230, 243, 244, 245, 246, 247, 248, 249, 278, 289, 294, 296, 307, 308, 309, 310, 311, 312, 313, 337, 342, 344, 355, 356, 357, 358, 359, 360, 361, 362, 387, 392, 395, 408, 409, 410, 411, 412, 413, 414, 443, 448, 450, 455, 456, 457, 476, 490, 494, 503, 517, 527, 534, 541, 542, 544, 545, 548, 549, 550, 631, 646, 649, 650, 657, 658, 659, 680, 682, 683, 689, 703, 716, 721, 729, 802, 806, 809], "local_pairwise_align_protein": [0, 62, 63, 64, 65, 66], "s1": [0, 3, 78, 213, 215, 230, 231, 235, 250, 251, 256, 257, 258, 259, 282, 296, 297, 301, 314, 319, 320, 321, 322, 328, 330, 344, 345, 349, 363, 368, 369, 370, 371, 378, 380, 395, 396, 400, 415, 416, 421, 422, 423, 424, 434, 436, 450, 451, 452, 458, 463, 464, 465, 466, 476, 540, 544], "heagawghe": 0, "s2": [0, 3, 230, 235, 296, 301, 344, 349, 395, 400, 450, 452, 476, 540, 544], "pawhea": 0, "return": [0, 1, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 48, 49, 51, 52, 53, 54, 56, 57, 59, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 131, 138, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 182, 183, 184, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 210, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 228, 229, 230, 231, 232, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 290, 291, 292, 293, 295, 296, 297, 298, 299, 300, 301, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 331, 332, 333, 334, 335, 336, 338, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 381, 382, 383, 384, 385, 386, 388, 389, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 449, 450, 451, 452, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 540, 541, 542, 543, 544, 545, 546, 548, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 644, 645, 646, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 667, 668, 669, 670, 672, 673, 675, 677, 678, 679, 680, 681, 683, 687, 688, 689, 690, 691, 692, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 709, 710, 711, 713, 714, 715, 716, 717, 722, 723, 725, 726, 727, 728, 730, 731, 732, 734, 736, 737, 738, 740, 741, 742, 744, 745, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 763, 767, 768, 769, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 802, 804, 809], "start": [0, 1, 18, 19, 20, 31, 47, 50, 58, 62, 63, 64, 65, 66, 67, 68, 131, 132, 134, 137, 138, 139, 140, 142, 144, 145, 186, 205, 211, 231, 250, 269, 270, 275, 278, 279, 297, 314, 345, 363, 396, 415, 451, 458, 490, 545, 546, 655, 658, 659, 809], "end": [0, 1, 20, 62, 63, 64, 65, 66, 67, 68, 131, 132, 134, 135, 136, 137, 138, 144, 145, 186, 195, 205, 211, 231, 250, 278, 297, 314, 345, 363, 396, 415, 451, 458, 727], "each": [0, 1, 2, 3, 20, 31, 40, 45, 48, 49, 52, 55, 58, 62, 63, 64, 65, 66, 67, 68, 80, 92, 102, 104, 105, 106, 107, 110, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 186, 196, 197, 205, 222, 227, 230, 236, 239, 252, 254, 267, 279, 289, 294, 296, 302, 305, 315, 317, 337, 342, 344, 350, 353, 364, 366, 387, 392, 395, 401, 404, 417, 419, 432, 434, 443, 448, 450, 454, 459, 461, 471, 473, 476, 478, 484, 485, 486, 487, 488, 489, 494, 502, 503, 517, 526, 527, 540, 541, 542, 543, 544, 545, 548, 549, 550, 559, 560, 570, 579, 580, 589, 590, 610, 619, 620, 629, 630, 632, 641, 645, 646, 648, 649, 650, 652, 655, 658, 659, 738, 744, 802, 804, 807, 809], "5": [0, 1, 3, 20, 48, 56, 63, 66, 68, 75, 80, 82, 104, 105, 107, 110, 132, 134, 135, 136, 137, 138, 140, 142, 144, 145, 186, 187, 192, 194, 196, 197, 198, 203, 205, 206, 207, 208, 209, 211, 218, 220, 229, 230, 231, 232, 237, 239, 241, 242, 243, 246, 248, 254, 260, 262, 263, 278, 285, 287, 296, 297, 298, 303, 305, 307, 310, 312, 317, 323, 325, 333, 335, 344, 345, 346, 351, 353, 355, 358, 360, 366, 372, 374, 383, 385, 394, 395, 396, 397, 402, 404, 406, 407, 408, 411, 413, 419, 425, 427, 428, 439, 441, 450, 451, 454, 455, 461, 468, 471, 472, 473, 474, 475, 476, 484, 485, 488, 489, 500, 503, 510, 523, 534, 536, 540, 541, 544, 545, 548, 631, 645, 651, 655, 658, 659, 660, 680, 685, 689, 690, 692, 695, 696, 703, 704, 705, 727, 728, 729, 734, 736, 737, 739, 740, 744, 745, 806], "awgh": 0, "aw": 0, "he": 0, "25": [0, 3, 52, 65, 80, 85, 104, 105, 107, 134, 140, 141, 235, 239, 241, 254, 258, 265, 269, 301, 305, 317, 321, 349, 353, 366, 370, 400, 404, 406, 419, 423, 429, 452, 454, 461, 465, 473, 476, 485, 540, 541, 544, 549, 655, 658, 659, 804], "4": [0, 1, 3, 4, 5, 6, 31, 32, 33, 34, 35, 36, 38, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 60, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 109, 131, 132, 134, 135, 137, 140, 141, 142, 144, 145, 157, 158, 159, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 195, 206, 211, 214, 215, 216, 217, 218, 220, 222, 224, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 241, 242, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 269, 270, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 289, 291, 293, 294, 295, 296, 297, 299, 300, 301, 302, 304, 305, 306, 308, 309, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 329, 330, 331, 332, 333, 335, 337, 339, 341, 342, 343, 344, 345, 347, 348, 349, 350, 352, 353, 354, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 379, 380, 381, 382, 383, 385, 387, 389, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 403, 404, 405, 406, 407, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 441, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 471, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 494, 498, 499, 500, 501, 502, 504, 505, 507, 508, 509, 510, 514, 515, 517, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 540, 541, 542, 543, 545, 546, 548, 559, 569, 579, 589, 599, 609, 619, 629, 630, 631, 640, 641, 644, 645, 646, 647, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 667, 668, 671, 674, 676, 679, 680, 681, 682, 683, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 748, 749, 750, 767, 768, 769, 771, 780, 782, 792, 804, 806], "8": [0, 1, 3, 68, 131, 132, 136, 137, 142, 144, 145, 158, 211, 230, 239, 262, 265, 280, 296, 305, 325, 344, 353, 374, 395, 404, 427, 429, 450, 454, 468, 510, 536, 541, 548, 631, 655, 659, 660, 695, 703, 704, 737, 745, 804, 806], "similarli": [0, 3, 135, 804], "perform": [0, 3, 20, 55, 56, 68, 80, 92, 102, 104, 105, 106, 107, 135, 136, 187, 213, 267, 279, 328, 378, 432, 434, 473, 474, 475, 476, 478, 479, 480, 481, 482, 485, 486, 487, 490, 492, 513, 515, 524, 527, 544, 545, 548, 549, 550, 570, 610, 620, 631, 650, 652, 653, 659, 660, 667, 668, 691, 694, 701, 712, 718, 719, 720, 729, 741, 742, 748, 802], "global_pairwise_align_nucleotid": 0, "gcgtgcctaaggtatgcaag": 0, "acgtgcctaggtacgcaag": 0, "20": [0, 1, 141, 476, 641, 647, 655, 658, 659], "acgtgccta": 0, "ggtacgcaag": 0, "As": [1, 3, 134, 137, 140, 434, 488, 507, 532, 542, 544, 645, 698, 802, 809], "project": [1, 107, 136, 474, 488, 540, 541, 542, 543, 544, 651], "size": [1, 42, 78, 540, 541, 542, 544, 620, 630, 641, 649, 655, 657, 658, 659, 769], "increas": [1, 489, 490, 545, 546, 548, 630, 655, 658], "consist": [1, 132, 135, 136, 138, 141, 142, 144, 145, 434, 658, 715, 735], "base": [1, 3, 56, 63, 66, 71, 72, 73, 74, 75, 76, 79, 80, 81, 84, 85, 88, 89, 90, 91, 92, 95, 97, 99, 101, 104, 105, 131, 135, 137, 141, 143, 186, 205, 213, 252, 280, 315, 328, 364, 378, 417, 434, 459, 490, 494, 517, 540, 542, 543, 544, 548, 580, 644, 645, 652, 655, 657, 658, 659, 688, 700, 701, 744, 769, 804, 805, 806, 807, 809], "document": [1, 2, 3, 38, 109, 135, 137, 142, 143, 176, 476, 641, 666, 802], "becom": [1, 135, 136, 140, 195, 807], "therefor": [1, 3, 47, 50, 56, 80, 104, 105, 110, 476], "contribut": [1, 48, 548, 644, 649, 801], "our": [1, 3, 5, 82, 136, 146, 158, 252, 315, 364, 417, 459, 631, 655, 658, 659, 660, 804, 807, 809], "goal": [1, 802], "creat": [1, 3, 4, 5, 20, 31, 47, 50, 51, 55, 57, 58, 59, 60, 134, 135, 138, 140, 142, 160, 170, 181, 186, 195, 205, 206, 210, 261, 262, 280, 324, 325, 373, 374, 426, 427, 434, 467, 468, 476, 484, 489, 503, 505, 506, 508, 527, 530, 531, 533, 534, 546, 548, 580, 631, 641, 642, 686, 687, 708, 722, 745, 804, 806, 809], "where": [1, 3, 69, 71, 72, 73, 74, 76, 78, 79, 81, 82, 83, 84, 85, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 101, 106, 107, 110, 130, 135, 139, 140, 141, 144, 146, 232, 234, 238, 240, 250, 252, 257, 259, 260, 262, 298, 300, 304, 306, 314, 315, 320, 322, 323, 325, 346, 348, 352, 354, 363, 364, 369, 371, 372, 374, 375, 397, 399, 403, 405, 415, 417, 422, 424, 425, 427, 453, 458, 459, 464, 466, 468, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 494, 517, 542, 548, 630, 641, 649, 651, 652, 653, 655, 659, 660, 666, 689, 690, 700, 704, 737, 740, 768, 806, 807, 809], "easi": [1, 135, 136], "relev": [1, 3, 20, 137, 658, 804], "function": [1, 2, 62, 63, 64, 80, 86, 87, 92, 94, 104, 105, 106, 107, 110, 135, 136, 143, 147, 157, 158, 159, 171, 172, 173, 176, 180, 186, 195, 206, 235, 269, 301, 349, 400, 452, 471, 474, 475, 476, 479, 480, 481, 482, 488, 503, 527, 541, 542, 543, 544, 545, 546, 549, 630, 645, 654, 657, 658, 659, 683, 687, 690, 695, 700, 724, 729, 737, 739, 740, 745, 746, 748, 749, 750, 751, 768, 770, 781, 791, 792, 801, 807], "determin": [1, 3, 4, 33, 36, 44, 53, 54, 80, 102, 104, 105, 106, 139, 146, 174, 175, 215, 218, 226, 243, 244, 245, 246, 247, 248, 249, 251, 270, 275, 282, 285, 293, 307, 308, 309, 310, 311, 312, 313, 330, 333, 341, 355, 356, 357, 358, 359, 360, 361, 362, 380, 383, 391, 408, 409, 410, 411, 412, 413, 414, 416, 436, 439, 447, 455, 456, 457, 476, 498, 521, 544, 548, 630, 650, 655, 657, 658, 744, 807, 809], "when": [1, 3, 4, 20, 47, 49, 50, 56, 59, 62, 63, 64, 71, 107, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 146, 147, 157, 158, 159, 177, 178, 179, 182, 183, 184, 195, 206, 230, 237, 238, 241, 242, 255, 296, 303, 304, 318, 344, 351, 352, 367, 395, 402, 403, 406, 407, 420, 434, 450, 453, 462, 471, 476, 489, 540, 542, 543, 544, 546, 548, 569, 599, 609, 644, 652, 655, 656, 657, 658, 659, 660, 663, 690, 724, 741, 742, 745, 750, 770, 802, 806, 807, 809], "you": [1, 3, 20, 62, 63, 64, 80, 102, 104, 105, 106, 107, 131, 133, 135, 136, 138, 142, 144, 146, 194, 195, 206, 208, 209, 213, 328, 378, 434, 527, 540, 544, 652, 655, 657, 658, 659, 687, 689, 690, 802, 804, 806, 807, 809], "look": [1, 2, 69, 139, 141, 142, 146, 209, 262, 325, 374, 427, 431, 432, 468, 476, 494, 517, 641, 657, 658, 659, 687, 791, 806, 807, 809], "doesn": [1, 2, 56, 135, 180, 278, 473, 539, 644, 650, 654, 727, 746, 808], "t": [1, 2, 3, 5, 20, 31, 47, 49, 50, 51, 55, 56, 60, 68, 80, 82, 102, 104, 105, 106, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 157, 159, 180, 186, 187, 218, 226, 231, 235, 239, 241, 242, 243, 244, 245, 248, 256, 257, 258, 259, 265, 278, 285, 293, 297, 301, 305, 307, 308, 309, 312, 319, 320, 321, 322, 333, 341, 345, 349, 353, 355, 356, 357, 360, 368, 369, 370, 371, 383, 391, 396, 400, 404, 406, 407, 408, 409, 410, 413, 421, 422, 423, 424, 429, 434, 439, 447, 451, 452, 454, 463, 464, 465, 466, 473, 474, 476, 481, 482, 539, 545, 644, 645, 650, 652, 654, 655, 657, 659, 660, 689, 690, 727, 728, 736, 744, 745, 746, 804, 807, 808, 809], "trust": [1, 136], "work": [1, 2, 3, 20, 107, 135, 142, 146, 213, 328, 378, 489, 542, 645, 659, 801, 803, 804, 806], "suffici": 1, "interfac": [1, 3, 53, 54, 103, 247, 249, 311, 313, 359, 361, 412, 414, 456, 457, 540, 541, 542, 543, 744, 802], "intuit": 1, "beta": [1, 3, 106, 107, 109, 134], "present": [1, 48, 49, 80, 104, 105, 131, 135, 141, 144, 196, 197, 213, 229, 232, 233, 234, 239, 240, 250, 260, 263, 278, 298, 299, 300, 305, 306, 314, 323, 328, 346, 347, 348, 353, 354, 363, 372, 375, 378, 394, 397, 398, 399, 404, 405, 415, 425, 428, 454, 458, 476, 502, 526, 540, 541, 543, 544, 580, 640, 650, 659, 660, 689, 744, 745, 747, 806], "draft": 1, "requir": [1, 20, 86, 87, 130, 132, 133, 135, 138, 142, 144, 145, 209, 266, 278, 279, 431, 489, 513, 542, 548, 630, 649, 657, 687, 693, 727, 747, 770, 802, 804, 809], "all": [1, 2, 3, 20, 31, 32, 48, 49, 53, 54, 56, 62, 63, 64, 69, 71, 79, 80, 82, 83, 92, 101, 102, 104, 105, 106, 107, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 144, 145, 146, 148, 170, 181, 186, 195, 198, 206, 208, 209, 213, 230, 233, 236, 239, 247, 249, 252, 262, 264, 278, 296, 299, 302, 305, 311, 313, 315, 325, 326, 328, 344, 347, 350, 353, 359, 361, 364, 374, 376, 378, 395, 398, 401, 404, 412, 414, 417, 427, 430, 434, 450, 454, 456, 457, 459, 468, 476, 478, 484, 485, 486, 487, 488, 489, 500, 503, 510, 523, 527, 534, 536, 540, 541, 542, 543, 544, 545, 570, 580, 620, 630, 631, 641, 649, 650, 658, 659, 660, 666, 681, 684, 685, 686, 695, 698, 699, 700, 711, 713, 714, 717, 724, 729, 730, 732, 734, 744, 770, 771, 806, 807], "submit": [1, 134, 135, 659], "stage": 1, "themselv": [1, 804], "malleabl": 1, "If": [1, 3, 4, 20, 31, 47, 49, 50, 52, 55, 56, 57, 58, 59, 60, 62, 63, 64, 66, 68, 71, 74, 75, 80, 81, 82, 86, 92, 102, 104, 105, 106, 107, 110, 131, 135, 138, 139, 140, 141, 142, 143, 144, 146, 148, 157, 158, 159, 171, 173, 177, 178, 182, 183, 186, 194, 198, 210, 211, 213, 215, 220, 229, 230, 231, 233, 235, 237, 239, 242, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 263, 264, 278, 280, 282, 287, 296, 297, 299, 301, 303, 305, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 326, 328, 330, 335, 344, 345, 347, 349, 351, 353, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 376, 378, 380, 385, 394, 395, 396, 398, 400, 402, 404, 407, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 428, 430, 431, 432, 434, 436, 441, 450, 451, 452, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 471, 472, 476, 481, 482, 484, 490, 494, 500, 502, 503, 504, 505, 506, 510, 517, 523, 526, 527, 528, 529, 530, 531, 536, 540, 541, 542, 543, 544, 545, 546, 548, 580, 590, 620, 630, 640, 641, 642, 644, 645, 646, 649, 650, 653, 655, 656, 657, 658, 659, 660, 685, 687, 688, 692, 695, 698, 699, 703, 708, 711, 713, 716, 722, 727, 728, 729, 734, 736, 737, 738, 744, 745, 748, 749, 750, 751], "disagre": 1, "someth": [1, 57, 61, 146, 158, 177, 178, 179, 182, 183, 184, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 506, 511, 531, 537, 546, 642, 643, 722, 743, 809], "suggest": [1, 20, 158, 177, 178, 182, 183, 658], "includ": [1, 3, 49, 55, 57, 61, 69, 70, 80, 104, 105, 109, 110, 133, 134, 135, 136, 139, 140, 141, 142, 144, 210, 212, 220, 228, 233, 241, 242, 252, 261, 265, 266, 267, 268, 278, 279, 287, 295, 299, 315, 324, 327, 335, 343, 347, 364, 373, 377, 385, 393, 398, 406, 407, 417, 426, 429, 431, 432, 433, 441, 449, 459, 467, 469, 476, 489, 499, 506, 511, 522, 527, 531, 534, 537, 540, 541, 543, 544, 545, 549, 631, 640, 641, 642, 643, 645, 650, 651, 655, 659, 680, 681, 683, 712, 714, 715, 718, 719, 720, 722, 735, 737, 738, 743, 802, 804, 805, 806, 808], "issu": [1, 68, 69, 78, 134, 135, 136, 158, 745, 802], "initi": [1, 92, 135, 658, 712, 715, 718, 719, 720, 735, 738, 745, 780], "discuss": [1, 3, 104, 105, 809], "adher": 1, "pep": 1, "standard": [1, 135, 136, 138, 140, 266, 267, 269, 278, 279, 431, 432, 473, 476, 494, 517, 541, 542, 646, 649, 652, 653, 802, 804], "befor": [1, 3, 49, 135, 139, 144, 241, 242, 278, 406, 407, 541, 542, 659, 719, 738, 806, 807, 809], "ani": [1, 3, 4, 20, 48, 49, 56, 58, 68, 69, 72, 101, 135, 137, 139, 140, 144, 157, 158, 159, 178, 183, 186, 195, 208, 209, 434, 471, 476, 478, 542, 545, 549, 580, 600, 644, 649, 655, 657, 658, 682, 685, 686, 687, 697, 705, 734, 736, 744, 770, 771, 780, 791, 806, 809], "read": [1, 3, 4, 5, 20, 61, 80, 104, 105, 131, 132, 133, 136, 138, 139, 140, 141, 142, 143, 144, 145, 157, 158, 174, 176, 178, 183, 212, 213, 267, 268, 278, 279, 327, 328, 377, 378, 432, 433, 434, 469, 489, 511, 537, 545, 643, 667, 668, 679, 680, 681, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 698, 699, 700, 701, 703, 705, 706, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 751, 806], "carefulli": 1, "your": [1, 20, 56, 80, 102, 104, 105, 106, 136, 146, 195, 544, 655, 658, 802, 806, 809], "choos": [1, 645, 655], "peopl": 1, "most": [1, 48, 72, 130, 133, 135, 136, 139, 140, 142, 145, 278, 434, 542, 630, 652, 655, 705, 707, 744, 806], "like": [1, 2, 3, 62, 63, 64, 107, 135, 137, 138, 139, 141, 146, 255, 318, 367, 420, 462, 489, 548, 569, 580, 599, 600, 609, 620, 650, 652, 658, 659, 769, 802, 809], "guess": [1, 57, 92, 111, 135, 177, 182, 210, 261, 324, 373, 426, 467, 506, 531, 642, 722, 747], "make": [1, 49, 56, 135, 140, 146, 213, 270, 328, 378, 471, 494, 517, 540, 544, 659, 733, 736, 737, 745, 751, 770, 807, 809], "descript": [1, 20, 71, 72, 73, 76, 80, 81, 84, 85, 88, 89, 90, 91, 95, 97, 99, 101, 102, 104, 105, 106, 130, 131, 135, 136, 137, 138, 140, 142, 145, 494, 517, 688, 744, 804, 806], "too": [1, 87, 650, 680], "long": [1, 133, 135, 142, 237, 303, 351, 402, 474, 541, 620, 644], "curr_record": 1, "better": [1, 135, 644, 645, 802], "c": [1, 2, 3, 7, 20, 31, 48, 55, 56, 58, 59, 68, 71, 80, 82, 84, 95, 104, 105, 110, 134, 135, 136, 140, 142, 144, 145, 159, 222, 227, 233, 239, 241, 242, 289, 294, 299, 305, 337, 342, 347, 353, 387, 392, 398, 404, 406, 407, 434, 443, 448, 454, 473, 475, 480, 485, 486, 487, 489, 500, 505, 508, 510, 523, 530, 533, 534, 536, 541, 542, 641, 651, 657, 658, 667, 668, 679, 680, 681, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 698, 699, 700, 701, 705, 706, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 734, 735, 736, 738, 739, 740, 741, 742, 744, 745, 804, 806], "curr": 1, "current_genbank_record_from_databas": 1, "good": [1, 83, 650], "hard": [1, 80, 102, 104, 105, 106], "don": [1, 3, 20, 56, 135, 241, 242, 406, 407, 474, 476, 545, 652, 655, 659, 689, 690, 727, 745, 807], "afraid": 1, "chang": [1, 85, 135, 194, 195, 213, 278, 328, 378, 434, 540, 630, 687, 721, 807, 809], "except": [1, 3, 97, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 135, 140, 141, 142, 147, 158, 180, 278, 502, 512, 526, 538, 539, 543, 645, 661, 662, 663, 664, 665, 693, 744, 746, 747, 780, 808], "part": [1, 131, 135, 137, 140, 143, 470, 474, 488, 630, 715, 770, 806, 807], "It": [1, 2, 3, 20, 76, 95, 131, 133, 135, 136, 137, 138, 140, 142, 145, 158, 186, 195, 198, 205, 206, 208, 209, 211, 429, 476, 479, 484, 489, 529, 542, 543, 548, 569, 570, 599, 609, 620, 644, 645, 649, 652, 655, 658, 659, 666, 667, 668, 691, 694, 748, 769, 791, 804], "mai": [1, 2, 3, 4, 7, 20, 49, 58, 87, 125, 132, 134, 135, 136, 137, 139, 140, 142, 144, 145, 146, 158, 174, 175, 186, 208, 213, 239, 280, 305, 328, 353, 378, 404, 434, 454, 471, 476, 489, 494, 502, 517, 526, 542, 544, 548, 630, 644, 655, 657, 658, 659, 660, 703, 746, 768, 770, 802, 804, 807], "take": [1, 3, 106, 142, 146, 157, 158, 159, 235, 262, 301, 325, 349, 374, 400, 427, 452, 468, 476, 503, 513, 527, 541, 542, 610, 644, 652, 655, 656, 745, 770, 806, 809], "time": [1, 3, 20, 47, 50, 80, 92, 104, 105, 107, 135, 136, 488, 524, 540, 541, 542, 543, 545, 549, 570, 620, 652, 655, 658, 659, 666, 729, 809], "come": [1, 144, 548, 732], "up": [1, 4, 49, 69, 133, 142, 144, 195, 206, 431, 432, 478, 484, 485, 486, 487, 494, 517, 542, 630, 659, 682, 687, 690, 721, 727, 791, 806], "reason": [1, 3, 92, 134, 140, 658, 685, 807], "everyth": 1, "unit": [1, 3, 80, 104, 105, 137, 146, 650, 652, 653, 748, 749, 808], "them": [1, 3, 82, 137, 142, 187, 198, 206, 207, 434, 542, 580, 649, 650, 652, 771], "especi": [1, 130, 135, 548, 652], "search": [1, 33, 62, 131, 132, 135, 209, 237, 250, 303, 314, 351, 363, 402, 415, 458, 491, 514, 645, 693, 698, 699, 700, 701, 767, 804], "replac": [1, 68, 69, 92, 135, 265, 429, 473, 484, 630, 653, 660, 736], "singular": [1, 654, 721, 791], "individu": [1, 3, 71, 72, 73, 79, 80, 81, 83, 88, 89, 90, 91, 92, 101, 104, 105, 130, 135, 476, 657, 809], "thing": [1, 809], "plural": [1, 6], "collect": [1, 4, 20, 95, 488, 500, 523, 630], "For": [1, 2, 3, 31, 49, 57, 61, 68, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 195, 209, 210, 211, 212, 213, 261, 268, 324, 327, 328, 373, 377, 378, 426, 433, 434, 467, 469, 476, 506, 511, 531, 537, 540, 541, 542, 543, 544, 546, 548, 550, 610, 641, 642, 643, 644, 645, 655, 657, 658, 659, 685, 722, 743, 744, 746, 747, 802, 804, 806, 807], "d": [1, 3, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 131, 132, 137, 140, 141, 473, 474, 475, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 500, 505, 510, 523, 530, 534, 536, 540, 541, 542, 543, 544, 548, 580, 600, 620, 632, 641, 649, 658, 659, 660, 667, 668, 680, 681, 683, 685, 686, 687, 688, 689, 691, 692, 694, 695, 696, 698, 699, 700, 701, 705, 711, 712, 713, 714, 715, 721, 725, 726, 727, 729, 730, 731, 732, 734, 735, 736, 739, 740, 741, 742, 744, 745, 802, 804, 806, 809], "expect": [1, 3, 107, 131, 146, 173, 180, 213, 328, 378, 481, 482, 489, 548, 644, 645, 652, 662, 663, 736, 809], "self": [1, 8, 9, 10, 11, 12, 13, 14, 15, 17, 22, 23, 24, 25, 26, 27, 28, 30, 37, 39, 41, 43, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 181, 182, 183, 184, 188, 189, 190, 191, 193, 195, 199, 200, 201, 202, 204, 208, 219, 220, 221, 223, 225, 263, 271, 272, 273, 274, 286, 287, 288, 290, 292, 334, 335, 336, 338, 340, 384, 385, 386, 388, 390, 428, 440, 441, 442, 444, 446, 492, 493, 495, 496, 497, 498, 500, 501, 509, 510, 515, 516, 518, 519, 520, 521, 523, 525, 535, 536, 551, 552, 553, 554, 555, 556, 557, 558, 561, 562, 563, 564, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 578, 581, 582, 583, 584, 585, 586, 587, 588, 591, 592, 593, 594, 595, 596, 597, 598, 601, 602, 603, 604, 605, 606, 607, 608, 611, 612, 613, 614, 615, 616, 617, 618, 621, 622, 623, 624, 625, 626, 627, 628, 633, 634, 635, 636, 637, 638, 639, 667, 668, 669, 670, 672, 673, 675, 677, 678, 679, 680, 681, 682, 684, 685, 688, 689, 690, 691, 694, 695, 696, 697, 714, 715, 716, 717, 723, 724, 725, 730, 731, 732, 735, 736, 737, 738, 739, 741, 742, 753, 754, 756, 757, 758, 759, 760, 763, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 783, 784, 785, 786, 787, 788, 789, 790, 793, 794, 795, 796, 797, 798, 799, 800, 806, 809], "hold": [1, 513, 559, 579, 589, 619, 629, 630, 650, 657, 693, 791], "singl": [1, 3, 31, 47, 50, 58, 80, 86, 87, 94, 104, 105, 107, 134, 135, 136, 137, 140, 142, 143, 144, 186, 195, 206, 220, 222, 227, 239, 252, 264, 287, 289, 294, 305, 315, 326, 335, 337, 342, 353, 364, 376, 385, 387, 392, 404, 417, 430, 441, 443, 448, 454, 459, 476, 488, 548, 656, 686, 791, 802, 806, 809], "string": [1, 3, 20, 46, 102, 106, 107, 110, 130, 133, 135, 136, 140, 142, 144, 228, 238, 239, 255, 262, 264, 269, 276, 295, 304, 305, 318, 325, 326, 343, 352, 353, 367, 374, 376, 393, 403, 404, 420, 427, 430, 449, 453, 454, 462, 468, 476, 489, 490, 494, 499, 503, 517, 522, 527, 540, 543, 544, 546, 640, 641, 679, 683, 737, 745, 750, 806], "could": [1, 3, 31, 87, 135, 136, 143, 146, 177, 179, 182, 184, 476, 490, 540, 542, 543, 544, 545, 548, 641, 657, 711, 713, 746, 747, 802], "loop": [1, 135, 741, 742], "through": [1, 3, 38, 62, 63, 64, 170, 176, 181, 494, 517, 650, 698, 807, 809], "list": [1, 3, 4, 68, 80, 104, 105, 108, 109, 131, 134, 136, 137, 138, 141, 144, 145, 146, 157, 159, 174, 175, 195, 262, 325, 374, 427, 434, 468, 489, 499, 502, 522, 526, 542, 544, 545, 560, 580, 590, 610, 640, 655, 657, 658, 659, 666, 681, 687, 695, 697, 699, 702, 711, 713, 714, 729, 730, 734, 736, 737, 744, 745, 802, 809], "dictionari": [1, 51, 53, 58, 60, 69, 144, 145, 186, 196, 197, 205, 209, 247, 311, 359, 412, 434, 456, 542, 703], "sometim": [1, 135, 137, 645, 802], "decis": 1, "tricki": 1, "integ": [1, 3, 20, 102, 106, 130, 131, 135, 136, 139, 140, 141, 142, 143, 220, 287, 335, 385, 441, 476, 489, 490, 540, 543, 544, 545, 546, 620, 660], "positon": 1, "record": [1, 132, 134, 135, 136, 137, 138, 143], "kei": [1, 10, 31, 47, 50, 51, 53, 58, 69, 134, 135, 137, 144, 205, 209, 213, 236, 247, 255, 262, 302, 311, 318, 325, 328, 350, 359, 367, 374, 378, 401, 412, 420, 427, 434, 456, 462, 468, 503, 527, 716, 736, 744, 809], "lookup": [1, 62, 63, 64, 65, 66, 67, 171, 172, 173, 494, 517, 539, 542, 545, 682, 693, 697, 707, 708, 717, 721, 736, 770], "yourself": 1, "wonder": 1, "probabl": [1, 86, 87, 96, 549, 560, 630, 644, 655, 659, 666], "avoid": [1, 20, 144, 146, 208, 631, 653, 741, 742], "problem": [1, 476, 650], "try": [1, 659, 660], "look_up": 1, "type": [1, 3, 4, 18, 20, 21, 31, 32, 33, 34, 35, 36, 42, 44, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 60, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 130, 133, 135, 136, 137, 138, 139, 142, 144, 145, 157, 159, 170, 171, 172, 173, 174, 175, 177, 178, 179, 181, 182, 183, 184, 187, 192, 198, 203, 205, 206, 210, 214, 215, 218, 220, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 270, 275, 276, 277, 278, 281, 282, 285, 287, 291, 293, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 329, 330, 333, 335, 339, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 379, 380, 383, 385, 389, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 434, 435, 436, 439, 441, 445, 447, 449, 450, 451, 452, 454, 455, 456, 457, 458, 461, 462, 463, 464, 465, 466, 467, 468, 471, 472, 474, 475, 477, 478, 479, 480, 483, 484, 485, 486, 487, 488, 489, 491, 492, 494, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 514, 515, 517, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 540, 541, 543, 544, 545, 546, 559, 560, 579, 589, 590, 600, 619, 629, 630, 631, 632, 640, 641, 642, 644, 645, 646, 649, 650, 651, 652, 653, 655, 656, 657, 660, 667, 668, 679, 680, 681, 683, 687, 688, 689, 690, 691, 692, 694, 695, 696, 698, 699, 701, 702, 703, 704, 706, 709, 710, 711, 713, 714, 716, 717, 722, 723, 725, 726, 728, 730, 731, 732, 734, 736, 741, 742, 744, 745, 748, 750, 751, 755, 767, 768, 769, 802, 804, 807], "might": [1, 3, 82, 139, 141, 541, 657, 658, 659, 690, 802], "want": [1, 62, 63, 64, 134, 137, 195, 655, 657, 658, 659, 689, 690, 802], "later": [1, 136, 657], "rather": [1, 3, 85, 140, 473, 548, 745], "recorddict": 1, "recordlist": 1, "etc": [1, 57, 61, 82, 135, 136, 177, 178, 179, 182, 183, 184, 186, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 506, 511, 531, 537, 642, 643, 650, 652, 666, 722, 743, 804], "hungarian": 1, "notat": [1, 140], "either": [1, 3, 31, 38, 56, 58, 62, 63, 64, 131, 144, 157, 158, 159, 242, 252, 280, 315, 364, 407, 417, 459, 472, 542, 544, 630, 641, 644, 649, 657, 659, 744, 807], "e": [1, 3, 20, 32, 42, 49, 52, 53, 59, 82, 84, 85, 88, 90, 91, 95, 96, 97, 99, 104, 105, 106, 107, 110, 125, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 186, 207, 230, 238, 239, 247, 278, 296, 304, 305, 311, 344, 352, 353, 359, 362, 375, 395, 403, 404, 412, 429, 434, 450, 453, 454, 456, 471, 476, 488, 489, 490, 494, 500, 505, 510, 513, 517, 523, 530, 534, 536, 540, 541, 542, 543, 544, 641, 647, 648, 657, 658, 660, 666, 667, 668, 680, 681, 683, 685, 686, 687, 691, 692, 694, 695, 696, 698, 699, 700, 701, 705, 709, 711, 712, 713, 714, 715, 721, 725, 726, 727, 730, 731, 732, 734, 735, 736, 737, 739, 740, 741, 742, 744, 745, 749, 767, 770, 802, 804, 806, 809], "prefix": [1, 145], "precis": 1, "possibl": [1, 3, 20, 38, 135, 136, 144, 208, 213, 236, 267, 279, 302, 328, 350, 378, 401, 432, 541, 545, 658, 690, 738, 744], "path": [1, 4, 135, 136, 143, 681, 768], "input": [1, 4, 5, 62, 63, 64, 65, 66, 67, 68, 80, 102, 104, 105, 106, 145, 157, 159, 195, 206, 235, 262, 278, 279, 301, 325, 349, 374, 400, 427, 452, 468, 470, 476, 490, 541, 542, 630, 641, 644, 645, 647, 651, 660, 739, 744, 745, 802, 804], "input_fp": 1, "which": [1, 3, 31, 62, 63, 64, 71, 80, 90, 104, 105, 107, 131, 133, 135, 137, 138, 139, 140, 141, 142, 144, 145, 146, 148, 157, 158, 159, 160, 171, 173, 174, 175, 176, 177, 182, 213, 230, 231, 242, 250, 252, 255, 278, 296, 297, 314, 315, 318, 328, 344, 345, 363, 364, 367, 378, 395, 396, 407, 415, 417, 420, 434, 450, 451, 458, 459, 462, 473, 474, 476, 490, 500, 523, 540, 543, 544, 548, 645, 649, 650, 655, 656, 657, 658, 659, 690, 693, 724, 736, 737, 742, 744, 745, 755, 771, 791, 802, 804, 806, 807, 809], "shouldn": [1, 645], "anywai": 1, "sinc": [1, 3, 31, 47, 50, 59, 82, 134, 135, 137, 142, 145, 187, 239, 278, 305, 353, 404, 434, 454, 476, 542, 655, 659, 738, 751, 807, 809], "keyword": [1, 57, 61, 68, 134, 137, 139, 158, 177, 178, 179, 182, 183, 184, 209, 210, 212, 255, 261, 266, 267, 268, 318, 324, 327, 367, 373, 377, 420, 426, 431, 432, 433, 462, 467, 469, 506, 511, 531, 537, 642, 643, 722, 743], "infil": 1, "becaus": [1, 3, 49, 55, 56, 80, 104, 105, 131, 135, 136, 137, 140, 142, 143, 146, 213, 218, 252, 278, 285, 315, 328, 333, 364, 378, 383, 417, 434, 439, 459, 476, 542, 645, 650, 652, 654, 657, 685, 690, 693, 737, 807], "just": [1, 85, 86, 87, 92, 146, 728, 802, 806, 809], "its": [1, 4, 31, 47, 48, 50, 51, 53, 54, 55, 56, 62, 63, 64, 134, 135, 136, 137, 140, 141, 144, 146, 159, 180, 186, 195, 239, 246, 247, 249, 254, 305, 310, 311, 313, 317, 353, 358, 359, 361, 366, 404, 411, 412, 414, 419, 434, 454, 455, 456, 457, 461, 477, 494, 517, 541, 640, 644, 646, 649, 654, 666, 687, 717, 718, 727, 732, 737, 738, 744, 768, 802, 806, 807], "result": [1, 3, 4, 7, 20, 21, 49, 51, 56, 62, 63, 64, 80, 85, 102, 104, 105, 106, 110, 131, 132, 135, 146, 206, 213, 229, 230, 233, 263, 296, 299, 328, 344, 347, 378, 394, 395, 398, 428, 450, 473, 476, 483, 484, 527, 540, 542, 543, 544, 545, 546, 549, 559, 560, 569, 570, 579, 589, 590, 599, 600, 609, 610, 619, 629, 630, 631, 632, 640, 641, 644, 645, 650, 652, 655, 660, 698, 714, 728, 736, 737, 744, 745, 749, 802, 804, 809], "store": [1, 31, 40, 45, 53, 54, 55, 130, 131, 132, 133, 134, 135, 136, 137, 139, 140, 141, 142, 143, 144, 145, 186, 195, 213, 247, 249, 280, 311, 313, 328, 359, 361, 378, 412, 414, 434, 456, 457, 489, 490, 507, 513, 532, 545, 560, 590, 600, 632, 644, 645, 650, 652, 666, 803, 804], "valu": [1, 3, 4, 8, 9, 11, 13, 14, 15, 22, 23, 24, 26, 27, 28, 37, 39, 41, 43, 49, 53, 62, 63, 64, 65, 66, 67, 69, 71, 82, 92, 101, 102, 105, 130, 131, 132, 134, 135, 136, 137, 138, 144, 149, 150, 151, 153, 154, 155, 161, 162, 163, 165, 166, 167, 188, 189, 190, 191, 194, 199, 200, 201, 202, 205, 209, 213, 214, 219, 221, 223, 225, 229, 230, 247, 255, 262, 263, 271, 272, 273, 274, 281, 286, 288, 290, 292, 296, 311, 318, 325, 328, 329, 334, 336, 338, 340, 344, 359, 367, 374, 378, 379, 384, 386, 388, 390, 394, 395, 412, 420, 427, 428, 434, 435, 440, 442, 444, 446, 450, 456, 462, 468, 473, 476, 478, 480, 484, 485, 486, 487, 493, 495, 496, 497, 500, 510, 516, 518, 519, 520, 523, 536, 540, 541, 542, 543, 544, 545, 546, 548, 551, 552, 553, 555, 556, 557, 561, 562, 563, 565, 566, 567, 569, 571, 572, 573, 575, 576, 577, 580, 581, 582, 583, 585, 586, 587, 591, 592, 593, 595, 596, 597, 599, 601, 602, 603, 605, 606, 607, 609, 611, 612, 613, 615, 616, 617, 621, 622, 623, 625, 626, 627, 630, 633, 634, 635, 637, 638, 639, 641, 644, 645, 649, 650, 652, 654, 655, 656, 657, 658, 659, 666, 669, 670, 672, 675, 677, 678, 685, 687, 690, 729, 736, 747, 748, 753, 754, 756, 758, 759, 760, 761, 770, 772, 773, 774, 776, 777, 778, 781, 783, 784, 785, 787, 788, 789, 791, 793, 794, 795, 797, 798, 799, 809], "data": [1, 3, 4, 56, 80, 82, 92, 102, 104, 105, 106, 107, 110, 131, 134, 136, 138, 139, 141, 143, 144, 145, 213, 280, 328, 378, 434, 473, 474, 475, 476, 477, 484, 488, 490, 492, 494, 507, 513, 515, 517, 532, 541, 548, 549, 569, 599, 609, 630, 641, 644, 645, 649, 655, 657, 658, 659, 703, 734, 738, 745, 768, 771, 801, 802, 804, 809], "case": [1, 3, 49, 62, 63, 64, 72, 107, 135, 140, 142, 145, 148, 242, 255, 318, 367, 407, 420, 462, 490, 542, 548, 644, 649, 651, 659, 685, 718, 744, 770, 771, 802, 806, 807], "arbitrari": [1, 31, 48, 51, 144, 213, 328, 378, 434, 630, 770, 804], "number": [1, 3, 4, 31, 42, 47, 50, 71, 72, 73, 74, 77, 78, 79, 80, 81, 83, 84, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 99, 100, 101, 104, 105, 106, 130, 131, 133, 134, 135, 137, 140, 142, 143, 144, 145, 186, 205, 224, 231, 239, 256, 258, 291, 297, 305, 319, 321, 339, 345, 353, 368, 370, 389, 396, 404, 421, 423, 445, 451, 454, 463, 465, 475, 476, 484, 485, 486, 487, 488, 490, 540, 541, 542, 543, 544, 545, 546, 548, 580, 620, 630, 645, 649, 650, 652, 653, 655, 656, 658, 659, 660, 685, 692, 729, 748], "unless": [1, 20, 31, 55, 74, 143, 771], "appropri": [1, 4, 130, 139, 230, 296, 344, 395, 450, 476, 802, 806], "One": [1, 142, 146, 524, 745], "letter": [1, 78, 135, 137], "onli": [1, 3, 4, 20, 56, 86, 110, 133, 134, 135, 136, 137, 139, 140, 141, 142, 144, 145, 146, 195, 209, 213, 230, 237, 269, 296, 303, 328, 344, 351, 378, 395, 402, 434, 450, 473, 476, 502, 513, 526, 527, 529, 534, 540, 544, 545, 630, 645, 650, 652, 657, 658, 659, 686, 689, 690, 692, 695, 698, 721, 729, 734, 738, 751, 791, 806, 807, 809], "occur": [1, 4, 20, 132, 135, 136, 139, 140, 178, 183, 250, 314, 363, 415, 434, 458, 659, 689, 698], "math": [1, 474, 481], "iter": [1, 31, 40, 45, 50, 55, 62, 63, 64, 65, 66, 67, 68, 69, 102, 106, 107, 110, 143, 186, 205, 206, 207, 209, 220, 222, 227, 230, 238, 252, 262, 287, 289, 294, 296, 304, 315, 325, 335, 337, 342, 344, 352, 364, 374, 385, 387, 392, 395, 403, 417, 427, 441, 443, 448, 450, 453, 459, 468, 476, 500, 502, 503, 510, 523, 526, 527, 536, 541, 544, 545, 630, 641, 658, 659, 667, 668, 674, 691, 694, 695, 704, 712, 715, 718, 719, 720, 728, 729, 735, 738, 767, 769, 771, 791, 806, 809], "limit": [1, 79, 131, 140, 141, 142, 657, 658], "scope": [1, 809], "cover": [1, 195, 806], "k": [1, 20, 71, 107, 239, 253, 254, 305, 316, 317, 353, 365, 366, 404, 418, 419, 454, 460, 461, 472, 488, 541, 548, 695, 729, 736, 744], "surviv": 1, "line": [1, 4, 82, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 658, 683], "refer": [1, 3, 20, 38, 49, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 101, 104, 105, 107, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 186, 213, 269, 276, 277, 280, 328, 378, 434, 473, 474, 476, 484, 488, 489, 490, 507, 513, 524, 532, 540, 541, 542, 543, 544, 548, 631, 641, 644, 645, 652, 688, 717, 744, 745], "item": [1, 62, 63, 64, 65, 66, 67, 68, 262, 325, 374, 427, 434, 468, 500, 510, 523, 536, 630, 660, 687, 729, 736, 737, 770, 771, 780, 809], "sever": [1, 140, 142, 631, 655], "activ": [1, 801], "same": [1, 3, 31, 48, 49, 50, 52, 56, 58, 80, 85, 104, 105, 135, 136, 137, 138, 140, 143, 144, 146, 198, 211, 218, 220, 226, 229, 230, 233, 235, 236, 252, 256, 257, 258, 259, 263, 266, 269, 270, 278, 285, 287, 293, 296, 299, 301, 302, 315, 319, 320, 321, 322, 333, 335, 341, 344, 347, 349, 350, 364, 368, 369, 370, 371, 383, 385, 391, 394, 395, 398, 400, 401, 417, 421, 422, 423, 424, 428, 431, 434, 439, 441, 447, 450, 452, 459, 463, 464, 465, 466, 471, 472, 476, 492, 494, 501, 502, 503, 509, 515, 517, 525, 526, 527, 529, 535, 540, 541, 542, 543, 544, 545, 548, 630, 644, 645, 649, 650, 652, 658, 659, 660, 699, 729, 744, 748, 804, 806], "renam": [1, 137, 248, 260, 312, 323, 360, 372, 413, 425], "A": [1, 2, 3, 6, 20, 31, 51, 52, 55, 56, 57, 60, 62, 64, 67, 71, 74, 79, 82, 84, 85, 88, 91, 95, 104, 105, 107, 130, 131, 133, 134, 135, 136, 137, 140, 142, 143, 144, 170, 174, 175, 181, 186, 205, 209, 210, 213, 233, 239, 245, 261, 270, 275, 280, 299, 305, 309, 324, 328, 347, 353, 357, 373, 378, 398, 404, 410, 426, 434, 454, 467, 473, 476, 478, 484, 485, 486, 487, 488, 489, 490, 500, 503, 505, 506, 509, 510, 513, 523, 527, 530, 531, 535, 536, 541, 542, 543, 544, 546, 548, 560, 580, 600, 640, 641, 642, 644, 645, 650, 652, 657, 658, 659, 666, 667, 668, 680, 685, 688, 690, 691, 694, 695, 696, 697, 700, 701, 702, 704, 705, 707, 714, 722, 724, 726, 727, 732, 734, 741, 742, 744, 791, 802, 806, 809], "few": [1, 80, 104, 105, 107, 802, 806, 809], "known": [1, 71, 140, 177, 182, 488, 645, 650, 804], "ok": 1, "back": [1, 135, 138, 179, 184, 681, 806], "6": [1, 3, 50, 68, 69, 74, 75, 80, 104, 105, 110, 132, 134, 135, 136, 137, 144, 145, 229, 230, 238, 239, 248, 260, 262, 263, 280, 296, 304, 305, 312, 323, 325, 344, 352, 353, 360, 372, 374, 394, 395, 403, 404, 413, 425, 427, 428, 450, 453, 454, 468, 476, 478, 482, 485, 486, 510, 534, 536, 542, 544, 545, 548, 631, 655, 680, 685, 695, 696, 704, 705, 734, 736, 737, 744, 804], "month": [1, 145], "figur": [1, 505, 530, 641], "out": [1, 49, 143, 146, 641, 689, 690, 807, 809], "sptxck2": 1, "worth": 1, "spend": 1, "extra": [1, 145, 146, 540, 541, 543, 544, 600], "species_taxon_check_2": 1, "still": [1, 4, 140, 141, 194, 476, 484, 542, 544], "horribl": 1, "check": [1, 20, 136, 158, 177, 182, 187, 195, 198, 208, 481, 482, 489, 490, 491, 492, 513, 514, 515, 549, 644, 645, 658, 748, 768, 809], "far": [1, 644], "go": [1, 659, 806, 809], "taxon_is_species_rank": 1, "need": [1, 2, 3, 4, 47, 50, 55, 80, 104, 105, 107, 130, 138, 140, 146, 157, 159, 195, 209, 213, 280, 328, 378, 476, 481, 482, 540, 541, 543, 544, 545, 630, 631, 645, 652, 655, 658, 659, 687, 690, 748, 749, 770, 809], "explan": [1, 644, 645], "onc": [1, 135, 146, 738], "twice": [1, 659], "follow": [1, 2, 3, 53, 54, 56, 68, 73, 75, 80, 81, 104, 105, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 186, 220, 247, 249, 287, 311, 313, 335, 359, 361, 385, 412, 414, 434, 441, 456, 457, 473, 474, 475, 476, 479, 480, 481, 482, 483, 487, 488, 489, 494, 517, 540, 541, 542, 544, 545, 549, 641, 644, 659, 684, 721, 771, 806, 807, 809], "consid": [1, 49, 71, 80, 85, 104, 105, 135, 140, 218, 252, 285, 315, 333, 364, 383, 417, 439, 459, 471, 473, 544, 545, 630, 657, 658, 659, 748, 770, 807], "impun": 1, "within": [1, 3, 49, 101, 107, 130, 132, 135, 136, 140, 142, 144, 213, 328, 378, 434, 500, 523, 544, 545, 600, 632, 641, 657, 658, 666, 707, 748, 751, 791, 806, 809], "mix": 1, "would": [1, 49, 80, 82, 85, 104, 105, 133, 135, 138, 140, 142, 144, 146, 230, 252, 296, 315, 344, 364, 395, 417, 450, 459, 473, 488, 500, 523, 548, 657, 658, 687, 737, 738, 744, 802], "conflict": [1, 693], "common": [1, 48, 53, 54, 65, 131, 135, 136, 137, 144, 145, 247, 249, 311, 313, 359, 361, 412, 414, 456, 457, 474, 475, 490, 580, 666, 690, 698, 711, 713, 736, 737, 745, 804, 806, 808], "built": [1, 7, 20, 31, 148, 160, 186, 195, 213, 269, 280, 328, 378, 434, 490, 513, 550, 560, 570, 580, 590, 600, 610, 620, 632, 666, 690, 729, 751, 770, 781, 791, 802], "rais": [1, 31, 47, 49, 50, 52, 56, 58, 60, 71, 80, 81, 82, 102, 104, 105, 106, 110, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 135, 136, 142, 146, 147, 157, 158, 159, 177, 178, 179, 180, 182, 183, 184, 208, 215, 230, 231, 235, 237, 239, 250, 251, 253, 254, 256, 257, 258, 259, 278, 280, 282, 296, 297, 301, 303, 305, 314, 316, 317, 319, 320, 321, 322, 330, 344, 345, 349, 351, 353, 363, 365, 366, 368, 369, 370, 371, 380, 395, 396, 400, 402, 404, 415, 416, 418, 419, 421, 422, 423, 424, 436, 450, 451, 452, 454, 458, 460, 461, 463, 464, 465, 466, 471, 472, 478, 484, 494, 500, 502, 503, 504, 510, 517, 523, 526, 527, 528, 536, 540, 541, 542, 544, 545, 580, 620, 630, 641, 644, 645, 650, 658, 659, 660, 680, 687, 688, 690, 693, 695, 696, 698, 699, 701, 703, 705, 711, 713, 716, 726, 727, 728, 729, 734, 739, 748, 749, 750, 751, 807], "dir": 1, "exp": [1, 475, 480], "max": [1, 20, 71, 72, 92, 658, 659, 705], "min": [1, 659], "howev": [1, 3, 80, 102, 104, 105, 106, 135, 140, 145, 213, 328, 378, 434, 473, 544, 548, 650, 696, 751], "eg": 1, "matrix_exp": 1, "full": [1, 2, 86, 87, 133, 476, 701, 727, 768], "align": [1, 131, 132, 135, 136, 186, 195, 434, 801, 802, 804, 807], "aln": 1, "archaeal": 1, "arch": 1, "auxiliari": 1, "aux": 1, "bacteri": [1, 3, 476], "bact": 1, "citat": [1, 145], "cite": 1, "current": [1, 130, 131, 134, 135, 136, 137, 142, 144, 145, 195, 208, 267, 279, 432, 542, 620, 644, 650, 687, 700, 709, 710, 715, 801], "databas": [1, 131, 132, 134, 137, 145, 186, 703], "db": [1, 135], "dict": [1, 20, 31, 51, 57, 58, 60, 61, 62, 63, 64, 65, 66, 67, 69, 134, 137, 158, 177, 178, 179, 182, 183, 184, 186, 205, 209, 210, 212, 213, 239, 254, 261, 266, 267, 268, 305, 317, 324, 327, 328, 353, 366, 373, 377, 378, 404, 419, 426, 431, 432, 433, 434, 454, 461, 467, 469, 506, 511, 531, 537, 542, 545, 600, 642, 643, 703, 707, 716, 722, 736, 743, 770, 804, 809], "directori": 1, "distanc": [1, 3, 20, 103, 104, 105, 106, 107, 109, 110, 130, 139, 140, 256, 258, 319, 321, 368, 370, 421, 423, 463, 465, 474, 547, 548, 641, 644, 645, 647, 650, 652, 666, 679, 680, 688, 690, 705, 727, 734, 745, 804, 805, 806], "matrix": [1, 3, 20, 69, 102, 106, 107, 110, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 494, 498, 499, 500, 501, 502, 503, 504, 505, 509, 510, 512, 513, 514, 515, 517, 521, 522, 523, 525, 526, 527, 528, 529, 530, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 631, 641, 644, 646, 647, 648, 650, 651, 652, 654, 656, 702, 734, 745, 805], "dm": [1, 130, 489, 494, 500, 505, 508, 510, 517, 523, 530, 533, 534, 536, 540, 541, 544, 545, 641, 745], "eof": 1, "eukaryot": 1, "euk": 1, "filepath": [1, 4, 57, 61, 177, 178, 179, 182, 183, 184, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 506, 511, 531, 537, 545, 642, 643, 722, 743], "fp": 1, "frequenc": [1, 3, 49, 52, 71, 241, 242, 254, 256, 258, 317, 319, 321, 366, 368, 370, 406, 407, 419, 421, 423, 461, 463, 465, 655, 657, 659, 666, 685], "freq": [1, 239, 254, 305, 317, 353, 366, 404, 419, 454, 461], "idx": 1, "maximum": [1, 101, 135, 136, 476, 541, 580, 630, 645, 649, 653, 658, 659, 690], "minimum": [1, 145, 242, 252, 315, 364, 407, 417, 459, 476, 544, 630, 658, 659], "mitochondri": [1, 145, 266, 277, 431], "mt": 1, "num": 1, "observ": [1, 3, 80, 92, 94, 99, 104, 105, 110, 239, 305, 353, 404, 454, 476, 548, 631, 655, 658, 659, 716, 744, 809], "ob": [1, 74, 99], "origin": [1, 62, 64, 65, 67, 80, 104, 105, 107, 133, 135, 140, 142, 143, 230, 296, 344, 395, 434, 450, 488, 540, 541, 542, 543, 544, 548, 644, 652, 660, 688, 744, 745, 806, 809], "orig": 1, "output": [1, 56, 131, 132, 140, 142, 143, 144, 255, 318, 367, 420, 462, 475, 540, 544, 545, 580, 645, 737, 745, 809], "paramet": [1, 3, 4, 7, 20, 21, 31, 33, 36, 44, 47, 49, 50, 51, 52, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 110, 146, 148, 157, 158, 159, 169, 171, 172, 173, 174, 175, 177, 178, 179, 182, 183, 184, 186, 187, 192, 195, 198, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 218, 220, 226, 229, 230, 231, 235, 237, 238, 239, 242, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 261, 262, 264, 266, 267, 268, 269, 270, 275, 277, 278, 279, 282, 285, 287, 293, 296, 297, 301, 303, 304, 305, 314, 315, 316, 317, 318, 319, 320, 321, 322, 324, 325, 326, 327, 328, 330, 333, 335, 341, 344, 345, 349, 351, 352, 353, 363, 364, 365, 366, 367, 368, 369, 370, 371, 373, 374, 376, 377, 378, 380, 383, 385, 391, 394, 395, 396, 400, 402, 403, 404, 407, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 430, 431, 432, 433, 434, 436, 439, 441, 447, 450, 451, 452, 453, 454, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 494, 498, 500, 502, 503, 504, 505, 506, 510, 511, 514, 515, 517, 521, 523, 526, 527, 528, 529, 530, 531, 536, 537, 540, 541, 542, 543, 544, 545, 546, 548, 569, 580, 599, 609, 620, 630, 641, 642, 643, 644, 645, 646, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 666, 680, 682, 683, 686, 687, 688, 689, 690, 692, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 708, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 726, 728, 729, 734, 735, 736, 737, 738, 740, 741, 742, 743, 744, 745, 748, 749, 750, 751, 767, 768, 769, 770, 771, 780, 781, 791, 809], "param": 1, "phylogeni": [1, 142, 547, 548], "phylo": [1, 142], "previou": [1, 62, 63, 64, 65, 66, 67, 218, 285, 333, 383, 439, 540, 542, 544], "prev": 1, "prob": [1, 31, 36, 48, 55], "prot": [1, 134], "rec": 1, "ref": [1, 131, 682], "deviat": [1, 541, 649, 652, 653, 656], "stdev": 1, "statist": [1, 3, 71, 74, 79, 85, 92, 474, 476, 540, 542, 543, 544, 545, 548, 644, 645, 649, 655, 658, 659, 801], "str": [1, 4, 17, 21, 30, 36, 40, 45, 57, 61, 69, 102, 106, 107, 108, 109, 110, 131, 137, 138, 144, 148, 156, 168, 171, 172, 173, 177, 178, 179, 182, 183, 184, 193, 204, 210, 212, 213, 215, 222, 227, 228, 231, 235, 236, 237, 238, 239, 250, 251, 253, 255, 256, 257, 258, 259, 261, 262, 268, 269, 276, 282, 289, 294, 295, 297, 301, 302, 303, 304, 305, 314, 316, 318, 319, 320, 321, 322, 324, 325, 327, 328, 330, 337, 342, 343, 345, 349, 350, 351, 352, 353, 363, 365, 367, 368, 369, 370, 371, 373, 374, 377, 378, 380, 387, 392, 393, 396, 400, 401, 402, 403, 404, 415, 416, 418, 420, 421, 422, 423, 424, 426, 427, 433, 434, 436, 443, 448, 449, 451, 452, 453, 454, 458, 460, 462, 463, 464, 465, 466, 467, 468, 469, 490, 491, 494, 499, 500, 502, 504, 505, 506, 510, 511, 514, 517, 522, 523, 526, 528, 530, 531, 536, 537, 540, 541, 543, 544, 545, 546, 558, 560, 568, 578, 580, 588, 590, 598, 600, 608, 618, 628, 632, 640, 641, 642, 643, 650, 657, 658, 666, 679, 683, 687, 698, 699, 711, 713, 722, 726, 728, 732, 734, 743, 744, 745, 750, 763, 768, 779, 790, 800], "struct": [1, 7, 137], "temporari": 1, "temp": 1, "taxa": [1, 145, 645, 659, 690], "tax": [1, 132], "taxon": [1, 134, 137, 703, 806], "taxonom": [1, 80, 104, 105], "taxonomi": [1, 131, 140, 145, 269, 276, 277, 703, 704, 737], "varianc": [1, 75, 541, 543, 544, 631, 646, 649, 653, 658], "var": [1, 541], "docstr": [1, 807], "first": [1, 3, 20, 62, 63, 64, 65, 66, 67, 68, 71, 80, 95, 104, 105, 135, 136, 137, 138, 139, 140, 141, 142, 144, 145, 146, 159, 206, 211, 250, 252, 266, 267, 278, 314, 315, 363, 364, 415, 417, 431, 434, 458, 459, 473, 474, 475, 476, 494, 517, 540, 542, 570, 620, 631, 646, 655, 658, 685, 689, 698, 699, 704, 707, 737, 738, 780, 802, 806, 807, 809], "short": [1, 807, 809], "summari": [1, 46, 476, 499, 522, 807], "sens": [1, 645, 659, 737, 745], "own": [1, 47, 50, 56, 130, 135, 141, 144, 146, 655], "separ": [1, 2, 3, 131, 132, 135, 136, 138, 139, 140, 141, 142, 544, 645], "rest": 1, "newlin": [1, 4, 135, 140, 142, 146, 148, 177, 178, 182, 183], "statement": 1, "otherwis": [1, 4, 20, 32, 47, 50, 59, 74, 75, 135, 137, 140, 143, 491, 492, 494, 498, 502, 514, 515, 517, 521, 526, 529, 545, 723, 804], "recogn": 1, "interpret": [1, 3, 49, 80, 102, 104, 105, 106, 130, 140, 473, 644, 645, 652], "access": [1, 2, 7, 53, 54, 130, 134, 135, 137, 145, 247, 249, 270, 275, 311, 313, 359, 361, 412, 414, 456, 457, 489, 745, 751], "interact": [1, 548], "session": 1, "obj": [1, 146, 159, 179, 184, 761, 809], "__doc__": 1, "gener": [1, 3, 47, 50, 62, 68, 69, 70, 107, 136, 137, 138, 140, 144, 145, 157, 159, 171, 173, 177, 182, 185, 238, 252, 253, 304, 315, 316, 352, 364, 365, 403, 417, 418, 434, 453, 459, 460, 489, 512, 538, 540, 541, 542, 546, 630, 632, 641, 644, 655, 658, 659, 665, 802, 804, 808], "autom": 1, "tool": [1, 62, 65, 131, 132, 135, 142, 145, 473, 641, 645, 807], "third": [1, 473, 489, 707, 809], "parti": 1, "addit": [1, 3, 68, 80, 103, 104, 105, 109, 134, 135, 136, 137, 138, 142, 143, 473, 474, 475, 489, 513, 666, 686, 698, 699, 744, 770, 807], "rapidli": [1, 809], "keep": [1, 137, 207, 220, 287, 335, 385, 441, 630, 727, 728], "place": [1, 59, 140, 144, 278, 475, 630, 650, 653, 682, 707, 739], "easier": [1, 186], "instead": [1, 2, 3, 52, 97, 134, 135, 137, 146, 148, 157, 158, 159, 207, 239, 252, 254, 256, 258, 305, 315, 317, 319, 321, 353, 364, 366, 368, 370, 404, 417, 419, 421, 423, 454, 459, 461, 463, 465, 490, 540, 542, 544, 649, 658, 659, 690, 745, 746, 802], "name2": 1, "name3": 1, "possibli": 1, "see": [1, 3, 55, 56, 57, 61, 68, 69, 80, 102, 104, 105, 106, 107, 109, 110, 132, 134, 135, 136, 140, 142, 143, 145, 146, 210, 212, 235, 261, 268, 269, 279, 301, 324, 327, 349, 373, 377, 400, 426, 433, 434, 452, 467, 469, 494, 506, 511, 517, 531, 537, 540, 541, 542, 543, 544, 545, 548, 631, 641, 642, 643, 650, 652, 654, 655, 659, 722, 743, 802, 807, 809], "collis": 1, "numpi": [1, 3, 106, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 494, 507, 517, 524, 532, 540, 544, 546, 548, 549, 580, 600, 620, 630, 631, 655, 657, 658, 659, 660, 690, 729, 804], "matplotlib": [1, 3, 505, 530, 632, 641], "anoth": [1, 3, 36, 44, 47, 56, 80, 104, 105, 137, 139, 140, 187, 192, 195, 198, 203, 208, 211, 218, 226, 235, 257, 259, 270, 275, 285, 293, 301, 320, 322, 333, 341, 349, 369, 371, 383, 391, 400, 422, 424, 434, 439, 447, 452, 464, 466, 492, 515, 548], "packag": [1, 2, 3, 20, 68, 70, 103, 133, 135, 140, 142, 488, 489, 540, 541, 542, 543, 544, 547, 644, 645, 652, 655, 802, 805, 806, 807, 808], "encourag": [1, 658, 807], "style": [1, 473, 741, 742], "np": [1, 49, 52, 80, 87, 104, 105, 131, 213, 215, 231, 232, 234, 235, 239, 240, 250, 251, 256, 257, 258, 259, 260, 282, 297, 298, 300, 301, 305, 306, 314, 319, 320, 321, 322, 323, 328, 330, 345, 346, 348, 349, 353, 354, 363, 368, 369, 370, 371, 372, 375, 378, 380, 396, 397, 399, 400, 404, 405, 415, 416, 421, 422, 423, 424, 425, 434, 436, 451, 452, 454, 458, 463, 464, 465, 466, 471, 472, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 540, 542, 543, 544, 545, 548, 549, 630, 631, 641, 654, 655, 657, 658, 659, 660, 707, 729, 744, 748], "npt": 1, "panda": [1, 3, 31, 54, 59, 106, 131, 132, 145, 213, 249, 313, 328, 361, 378, 414, 457, 476, 508, 533, 534, 540, 541, 543, 544, 545, 549, 580, 620, 631, 641, 657, 658, 703, 748, 804], "pd": [1, 3, 31, 50, 54, 59, 80, 102, 131, 132, 145, 249, 313, 361, 414, 434, 457, 476, 489, 500, 508, 510, 523, 533, 534, 536, 540, 541, 544, 549, 631, 632, 641, 644, 652, 657, 658, 703, 748], "pyplot": [1, 3], "plt": [1, 3], "similar": [1, 62, 63, 64, 65, 66, 67, 95, 103, 132, 134, 135, 136, 139, 142, 146, 434, 540, 541, 542, 543, 544, 645, 650, 652, 658, 659, 804, 806], "below": [1, 133, 135, 136, 140, 142, 144, 145, 269, 280, 434, 541, 542, 641, 658, 666], "doc": [1, 106, 133, 134, 135, 142, 186, 490, 507, 513, 524, 532, 744, 745, 807], "readm": 1, "md": [1, 135, 138], "explain": [1, 137, 138, 141, 488, 549, 580, 620, 631, 632, 644, 650, 652], "r": [1, 2, 3, 4, 20, 80, 85, 86, 87, 89, 104, 105, 136, 137, 145, 473, 474, 475, 479, 480, 481, 482, 488, 540, 541, 542, 543, 544, 548, 641, 644, 645, 652, 687, 728], "mod": [1, 2], "skbio": [1, 801], "currentmodul": [1, 2], "defin": [1, 3, 31, 56, 58, 64, 67, 71, 72, 73, 74, 76, 78, 79, 82, 83, 84, 85, 88, 89, 90, 91, 92, 95, 96, 97, 98, 99, 101, 110, 135, 136, 137, 138, 140, 141, 142, 143, 145, 146, 148, 186, 195, 208, 218, 235, 253, 254, 269, 270, 276, 277, 285, 301, 316, 317, 333, 349, 365, 366, 383, 400, 418, 419, 439, 452, 460, 461, 472, 474, 475, 479, 480, 481, 482, 483, 485, 486, 487, 490, 505, 530, 542, 545, 641, 655, 741, 742, 745, 748, 780, 802, 804, 806, 807, 809], "oper": [1, 3, 47, 50, 56, 80, 104, 105, 131, 135, 140, 207, 213, 241, 242, 328, 378, 406, 407, 434, 473, 475, 485, 486, 487, 489, 490, 524, 542, 543, 650, 703, 727, 744, 771, 802, 804], "mean": [1, 4, 138, 140, 146, 195, 209, 241, 242, 406, 407, 473, 476, 479, 488, 500, 510, 523, 536, 600, 620, 644, 648, 649, 650, 653, 655, 656, 658, 659, 802, 806], "frequencydistribut": 1, "map": [1, 3, 51, 58, 107, 160, 542, 545, 548, 549, 580, 620, 641, 657, 659, 704, 707, 804], "necessarili": [1, 47, 50, 56, 141, 239, 305, 353, 404, 434, 454, 660], "shannon": [1, 49, 84, 95], "entropi": [1, 49, 84, 95, 97], "normal": [1, 3, 79, 105, 136, 137, 540, 544, 650, 651, 652, 655, 656, 658, 659, 687], "class": [1, 7, 20, 31, 53, 54, 69, 71, 74, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 148, 157, 159, 160, 171, 173, 174, 175, 176, 186, 195, 213, 230, 247, 249, 269, 280, 296, 311, 313, 328, 344, 359, 361, 378, 395, 412, 414, 434, 450, 456, 457, 476, 490, 513, 550, 560, 570, 580, 590, 600, 610, 620, 632, 666, 687, 744, 751, 770, 781, 791, 802], "autosummari": 1, "toctre": 1, "copyright": [1, 2, 135, 142], "2013": [1, 2, 20, 68, 78, 488, 641], "develop": [1, 2, 3, 7, 107, 110, 134, 157, 158, 159, 476, 745, 802, 807, 809], "team": [1, 2], "distribut": [1, 2, 79, 134, 473, 546, 650, 655, 656, 658, 659], "under": [1, 2, 82, 106, 135, 213, 328, 378, 434, 580, 658, 801], "term": [1, 2, 3, 49, 137, 548], "modifi": [1, 2, 59, 135, 137, 144, 176, 434, 529, 620, 651, 729], "bsd": [1, 2, 801], "licens": [1, 2, 801], "txt": [1, 2, 134, 145], "softwar": [1, 2, 3, 135, 136, 801], "random": [1, 79, 92, 130, 540, 544, 546, 630, 645, 655, 657, 658, 659, 690, 729], "choic": [1, 47, 50, 139, 650], "util": [1, 2, 57, 61, 145, 157, 159, 210, 212, 261, 268, 269, 276, 277, 280, 324, 327, 373, 377, 426, 433, 467, 469, 506, 511, 531, 537, 642, 643, 722, 743, 801, 802], "indic": [1, 3, 19, 32, 33, 36, 44, 53, 54, 71, 74, 75, 90, 110, 130, 135, 136, 146, 186, 187, 192, 195, 198, 203, 215, 218, 220, 226, 232, 234, 237, 238, 240, 243, 244, 245, 246, 247, 248, 249, 252, 257, 259, 260, 262, 269, 270, 275, 282, 285, 287, 293, 298, 300, 303, 304, 306, 307, 308, 309, 310, 311, 312, 313, 315, 320, 322, 323, 325, 330, 333, 335, 341, 346, 348, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 369, 371, 372, 374, 375, 380, 383, 385, 391, 397, 399, 402, 403, 405, 408, 409, 410, 411, 412, 413, 414, 417, 422, 424, 425, 427, 436, 439, 441, 447, 453, 455, 456, 457, 459, 464, 466, 468, 476, 540, 542, 543, 544, 548, 630, 640, 641, 657, 700, 702, 740, 781, 791, 806, 807, 809], "pass": [1, 3, 4, 31, 38, 50, 57, 58, 61, 102, 106, 107, 108, 109, 131, 133, 135, 137, 142, 143, 144, 157, 158, 159, 170, 176, 177, 178, 179, 181, 182, 183, 184, 210, 212, 213, 235, 237, 239, 261, 262, 268, 278, 301, 303, 305, 324, 325, 327, 328, 349, 351, 353, 373, 374, 377, 378, 400, 402, 404, 426, 427, 433, 434, 452, 454, 467, 468, 469, 494, 506, 511, 517, 527, 529, 531, 537, 542, 545, 580, 642, 643, 658, 711, 713, 722, 743, 745, 791, 806, 807, 809], "alwai": [1, 3, 4, 20, 134, 137, 140, 142, 158, 186, 205, 278, 695, 751, 809], "updat": [1, 134, 135, 145, 195, 208, 434], "incorrect": [1, 3], "wors": 1, "mislead": [1, 49, 110], "sai": [1, 186, 195, 659], "itself": [1, 5, 135, 142, 145, 186, 213, 269, 328, 378, 434, 548, 632, 666, 745, 804], "examin": [1, 771, 809], "off": [1, 85, 96, 213, 328, 378, 473, 658, 688, 728, 744, 748, 809], "rewrit": 1, "allow": [1, 4, 131, 135, 136, 140, 142, 143, 146, 157, 159, 195, 230, 239, 296, 305, 344, 353, 395, 404, 450, 454, 473, 494, 500, 517, 523, 540, 541, 543, 544, 545, 549, 650, 695, 737, 771, 809], "get": [1, 4, 5, 69, 194, 195, 269, 277, 489, 542, 630, 645, 692, 731], "rid": 1, "In": [1, 3, 20, 49, 80, 104, 105, 107, 135, 136, 137, 138, 140, 142, 145, 242, 278, 407, 473, 476, 489, 541, 542, 548, 630, 644, 645, 650, 655, 659, 666, 685, 698, 744, 802, 804, 806, 809], "particular": [1, 3, 666, 747, 809], "scatter": [1, 641], "magic": 1, "constant": [1, 79, 473, 476, 524, 542, 657], "whose": [1, 137, 143, 504, 528, 541, 542, 653], "think": 1, "about": [1, 3, 57, 61, 92, 133, 135, 136, 140, 144, 146, 195, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 471, 506, 511, 531, 537, 631, 642, 643, 652, 658, 659, 722, 743, 746, 747, 804, 807], "instanc": [1, 57, 61, 146, 159, 171, 173, 174, 175, 177, 182, 195, 209, 210, 212, 230, 261, 268, 296, 324, 327, 344, 373, 377, 395, 426, 433, 450, 467, 469, 471, 472, 490, 492, 506, 511, 513, 515, 529, 531, 537, 542, 544, 545, 546, 559, 579, 589, 619, 629, 641, 642, 643, 659, 666, 681, 722, 743, 744, 751, 752, 755, 761, 806, 809], "wrong": [1, 90], "win_siz": 1, "decrement": 1, "leav": [1, 85, 134], "space": [1, 3, 135, 140, 142, 144, 195, 198, 206, 473, 474, 475, 479, 480, 481, 482, 580, 632, 641, 644, 651], "scroll": 1, "bar": [1, 769, 809], "right": [1, 56, 71, 97, 140, 473, 474, 475, 479, 483, 485, 486, 487, 488, 707, 748, 749, 809], "_scroll_bar_s": 1, "insid": [1, 2, 137, 140], "block": [1, 64, 67, 107, 769], "tripl": 1, "doubl": [1, 71, 72, 73, 74, 76, 78, 81, 82, 83, 84, 85, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 177, 182, 644, 650], "quot": [1, 140], "sure": [1, 527, 659, 809], "outdat": 1, "wast": 1, "lot": [1, 644], "correct": [1, 74, 75, 82, 135, 476, 721, 727, 802], "priceless": 1, "worthless": 1, "jim": [1, 136], "fulton": 1, "There": [1, 3, 56, 92, 132, 137, 140, 143, 236, 302, 350, 401, 513, 650, 658, 659, 802, 806, 809], "approach": [1, 542, 658, 667, 668, 691, 694], "unittest": 1, "Their": 1, "purpos": [1, 3, 68, 71, 145, 269, 655, 809], "execut": [1, 146, 560, 600, 771, 791, 809], "given": [1, 3, 57, 61, 71, 72, 73, 76, 81, 82, 85, 89, 90, 92, 97, 99, 101, 102, 106, 107, 110, 135, 136, 140, 141, 157, 159, 174, 175, 177, 178, 182, 183, 207, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 488, 503, 506, 511, 527, 531, 537, 541, 542, 545, 642, 643, 645, 649, 654, 656, 658, 666, 700, 722, 743, 769, 770, 781, 809], "produc": [1, 131, 132, 142, 143, 157, 252, 315, 364, 417, 459, 644, 652], "specifi": [1, 4, 52, 56, 110, 131, 133, 135, 136, 137, 138, 139, 142, 144, 145, 146, 176, 186, 195, 207, 209, 213, 220, 237, 239, 255, 266, 277, 278, 280, 287, 303, 305, 318, 328, 335, 351, 353, 367, 378, 385, 402, 404, 420, 431, 434, 441, 454, 462, 474, 475, 476, 481, 482, 484, 491, 494, 500, 502, 504, 505, 510, 514, 517, 523, 526, 528, 530, 536, 540, 541, 542, 543, 544, 548, 620, 641, 649, 650, 656, 687, 695, 726, 729, 731, 734, 737, 744, 770, 781, 791, 809], "lend": 1, "whatev": [1, 146], "emploi": [1, 75], "principl": [1, 655], "everi": [1, 71, 145, 475, 485, 486, 487, 488, 545, 686, 701, 707, 807], "critic": [1, 655, 656, 658, 659, 685], "fulli": [1, 137, 802], "draw": [1, 655, 657, 658, 659, 683, 726], "conclus": 1, "scientif": [1, 131, 513, 807], "bug": 1, "unhappi": 1, "user": [1, 2, 3, 49, 103, 111, 131, 145, 146, 148, 157, 158, 159, 177, 179, 182, 184, 476, 645, 650, 746, 804, 807], "who": [1, 140, 659], "ll": [1, 3, 80, 104, 105, 541, 542, 545, 631, 655, 658, 659, 806, 809], "never": [1, 135, 144], "actual": [1, 146, 176, 542], "meet": [1, 68, 180, 209, 740], "retract": 1, "public": [1, 136, 641, 807], "opportun": 1, "invent": [1, 136], "often": [1, 3, 80, 102, 106, 134, 135, 137, 489, 548, 645, 650, 655, 768], "help": [1, 72, 145], "idea": [1, 658], "ve": [1, 3, 135, 136, 659, 806], "told": 1, "spirit": 1, "shortest": 1, "alia": [1, 7, 138, 507, 532, 711, 713], "api": [1, 135, 180, 470], "caus": [1, 4, 20, 278], "break": 1, "rightli": 1, "so": [1, 2, 3, 4, 5, 7, 49, 62, 63, 64, 65, 66, 67, 69, 80, 102, 104, 105, 106, 135, 140, 146, 195, 198, 241, 242, 406, 407, 542, 610, 631, 644, 645, 646, 650, 652, 655, 657, 658, 659, 744, 802, 806, 809], "treat": [1, 47, 48, 49, 50, 135, 139, 213, 255, 318, 328, 367, 378, 420, 434, 462, 471, 658], "prototyp": 1, "product": [1, 186, 483, 542], "fine": [1, 2], "without": [1, 47, 50, 56, 58, 92, 105, 132, 140, 142, 144, 434, 473, 630, 641, 659, 660, 696, 705, 737, 769, 770, 802, 807], "algorithm": [1, 62, 65, 137, 540, 541, 542, 544, 549, 550, 560, 570, 580, 590, 600, 610, 620, 644, 645, 652, 688, 745, 746], "must": [1, 20, 31, 47, 50, 56, 57, 61, 80, 82, 104, 105, 106, 107, 110, 131, 133, 135, 136, 139, 140, 141, 142, 144, 158, 209, 210, 212, 213, 230, 235, 255, 261, 266, 268, 296, 301, 318, 324, 327, 328, 344, 349, 367, 373, 377, 378, 395, 400, 420, 426, 431, 433, 434, 450, 452, 462, 467, 469, 476, 490, 502, 506, 511, 526, 531, 537, 540, 541, 542, 543, 544, 546, 548, 569, 599, 609, 630, 641, 642, 643, 644, 649, 658, 659, 660, 687, 722, 729, 737, 743, 744, 745, 748, 750, 769, 770, 791, 809], "finish": 1, "decid": [1, 650, 809], "littl": 1, "coupl": [1, 195], "mayb": 1, "huge": 1, "amount": [1, 545, 666, 809], "closer": [1, 3, 809], "done": [1, 49, 476, 544, 569, 599, 609], "90": [1, 49, 138, 809], "vastli": 1, "reduc": [1, 107, 544, 630, 650], "spent": 1, "debug": [1, 71, 770, 780, 809], "went": 1, "ha": [1, 3, 4, 20, 31, 48, 53, 54, 62, 63, 64, 110, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 178, 183, 213, 229, 230, 233, 236, 246, 247, 249, 263, 265, 266, 267, 269, 278, 279, 280, 296, 299, 302, 310, 311, 313, 328, 344, 347, 350, 358, 359, 361, 378, 394, 395, 398, 401, 411, 412, 414, 428, 429, 431, 432, 434, 450, 455, 456, 457, 478, 489, 630, 644, 646, 657, 658, 659, 686, 706, 709, 710, 724, 728, 744, 770, 804, 806, 807], "wrote": 1, "last": [1, 48, 134, 142, 252, 278, 315, 364, 417, 434, 459, 542, 631, 809], "suit": [1, 645], "And": [1, 138, 473, 804], "rememb": [1, 2, 186], "quick": [1, 494, 517, 524, 641, 644], "syntax": 1, "run": [1, 2, 3, 80, 102, 104, 105, 106, 136, 143, 237, 303, 351, 402, 476, 540, 541, 542, 544, 545, 548, 559, 579, 589, 619, 629, 641, 804, 809], "anyth": [1, 3, 135, 136, 143, 146, 434, 770, 780, 791, 809], "even": [1, 62, 63, 64, 70, 84, 90, 95, 99, 135, 140, 278, 540, 544, 659, 738], "seem": [1, 658], "trivial": 1, "second": [1, 3, 20, 62, 63, 64, 65, 66, 67, 68, 136, 142, 146, 159, 186, 206, 270, 476, 494, 517, 659, 704, 707, 737, 802, 809], "elimin": 1, "frustrat": 1, "turn": [1, 213, 328, 378, 652, 748, 809], "made": [1, 2, 31, 92, 434, 476, 490, 513, 630, 681, 698, 699, 721, 747], "ago": 1, "didn": [1, 135, 809], "signific": [1, 3, 476, 540, 542, 543, 544, 545, 548, 658, 659], "note": [1, 7, 20, 31, 38, 42, 47, 48, 49, 50, 51, 52, 55, 56, 58, 59, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 104, 105, 107, 109, 134, 135, 136, 137, 138, 140, 142, 143, 186, 195, 196, 197, 208, 213, 216, 217, 220, 230, 233, 236, 239, 241, 252, 263, 265, 266, 267, 269, 270, 276, 277, 278, 279, 280, 283, 284, 287, 296, 299, 302, 305, 315, 328, 331, 332, 335, 344, 347, 350, 353, 364, 378, 381, 382, 385, 395, 398, 401, 404, 406, 417, 428, 429, 431, 432, 434, 437, 438, 441, 450, 454, 459, 471, 472, 476, 481, 482, 484, 490, 494, 500, 507, 509, 510, 513, 517, 523, 524, 529, 532, 535, 536, 540, 541, 542, 543, 544, 545, 548, 630, 641, 644, 645, 650, 652, 653, 658, 659, 660, 683, 685, 686, 687, 688, 690, 695, 701, 703, 729, 734, 736, 737, 738, 739, 744, 745, 748, 750, 768, 769, 804, 806, 807, 809], "travi": 1, "ci": [1, 70, 79, 86], "section": [1, 56, 135, 136, 141, 144, 269, 434, 541, 542, 644, 645, 807], "further": [1, 146, 658, 806], "framework": [1, 473], "test_module_nam": 1, "py": [1, 2, 136, 146], "folder": [1, 2, 768], "temptat": 1, "verifi": [1, 134, 146, 177, 182], "complet": [1, 68, 86, 87, 136, 137, 140, 655, 747, 802], "behav": [1, 213, 328, 378, 542], "old": 1, "__init__": [1, 2, 146, 157, 159], "instal": [1, 2, 746], "via": [1, 47, 50, 58, 71, 86, 87, 135, 142, 235, 269, 270, 275, 301, 349, 400, 452, 540, 542, 543], "setup": [1, 809], "minim": [1, 140], "deep": [1, 35, 197, 216, 217, 283, 284, 331, 332, 381, 382, 434, 437, 438, 501, 509, 525, 535], "That": [1, 140, 255, 318, 367, 420, 462], "distancematrix": [1, 106, 107, 110, 130, 139, 470, 490, 508, 540, 541, 542, 543, 544, 545, 546, 548, 641, 650, 734, 745], "u": [1, 3, 64, 67, 80, 86, 89, 104, 105, 134, 135, 137, 145, 218, 222, 226, 227, 265, 285, 289, 293, 294, 333, 337, 341, 342, 383, 387, 391, 392, 429, 439, 443, 447, 448, 476, 479, 480, 542, 654, 659, 804, 809], "prevent": [1, 20], "accident": [1, 746], "regress": [1, 473, 542, 652, 659], "float": [1, 49, 52, 62, 63, 64, 65, 66, 67, 68, 69, 80, 85, 86, 102, 104, 105, 106, 107, 110, 130, 131, 137, 139, 140, 235, 241, 242, 256, 258, 301, 319, 321, 349, 368, 370, 400, 406, 407, 421, 423, 452, 463, 465, 471, 472, 476, 477, 479, 480, 482, 484, 485, 487, 489, 490, 503, 527, 542, 544, 546, 548, 560, 600, 641, 656, 658, 659, 666, 680, 688, 689, 690, 695, 696, 705, 736, 744, 748], "point": [1, 49, 82, 85, 87, 130, 133, 146, 158, 186, 255, 262, 318, 325, 367, 374, 420, 427, 462, 468, 544, 550, 570, 620, 641, 658, 659, 727, 748, 768], "arrai": [1, 3, 20, 49, 52, 80, 104, 105, 135, 141, 213, 229, 232, 234, 240, 257, 259, 260, 263, 298, 300, 306, 320, 322, 323, 328, 346, 348, 354, 369, 371, 372, 375, 378, 394, 397, 399, 405, 422, 424, 425, 428, 434, 464, 466, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 499, 507, 515, 522, 524, 532, 548, 549, 580, 600, 620, 631, 649, 653, 655, 656, 657, 658, 659, 660, 707, 736, 744, 804], "permut": [1, 3, 187, 540, 542, 543, 544, 545, 548], "assert_almost_equ": 1, "compar": [1, 3, 90, 104, 110, 131, 132, 211, 251, 256, 257, 258, 259, 262, 319, 320, 321, 322, 325, 368, 369, 370, 371, 374, 416, 421, 422, 423, 424, 427, 463, 464, 465, 466, 468, 476, 489, 492, 498, 515, 521, 542, 548, 657, 658, 659, 688, 689, 690, 718, 748, 749, 804, 806], "assertequ": 1, "saniti": 1, "least": [1, 53, 54, 92, 140, 237, 246, 247, 249, 303, 310, 311, 313, 351, 358, 359, 361, 402, 411, 412, 414, 455, 456, 457, 476, 542, 641, 658, 659, 747, 807, 809], "testcas": 1, "classnametest": 1, "contain": [1, 2, 3, 20, 31, 48, 50, 56, 62, 63, 64, 65, 66, 67, 68, 71, 102, 103, 106, 107, 110, 130, 131, 133, 134, 135, 136, 138, 139, 141, 142, 144, 145, 146, 176, 215, 220, 232, 234, 239, 240, 243, 244, 245, 248, 252, 253, 254, 260, 262, 269, 282, 287, 298, 300, 305, 306, 307, 308, 309, 312, 315, 316, 317, 323, 325, 330, 335, 346, 348, 353, 354, 355, 356, 357, 360, 362, 364, 365, 366, 372, 374, 375, 380, 385, 397, 399, 404, 405, 408, 409, 410, 413, 417, 418, 419, 425, 427, 436, 441, 454, 459, 460, 461, 468, 470, 471, 476, 488, 489, 502, 503, 505, 526, 527, 530, 534, 540, 541, 542, 543, 544, 545, 547, 549, 631, 641, 645, 683, 687, 695, 744, 745, 768, 791, 801, 804, 805, 806], "complic": [1, 802], "classnametests_test_typ": 1, "subclass": [1, 56, 133, 135, 142, 144, 146, 213, 230, 296, 328, 344, 378, 395, 434, 450, 489, 490, 546, 744, 770], "order": [1, 3, 20, 40, 45, 51, 55, 56, 59, 102, 106, 130, 131, 135, 139, 140, 141, 142, 144, 206, 213, 227, 236, 239, 254, 267, 269, 279, 294, 302, 305, 317, 328, 342, 350, 353, 366, 378, 392, 401, 404, 419, 432, 434, 448, 454, 461, 476, 492, 494, 500, 502, 510, 515, 517, 523, 526, 529, 534, 536, 540, 541, 542, 543, 544, 545, 548, 644, 653, 657, 658, 715, 734, 735, 736, 744, 746, 748, 806, 809], "share": [1, 20, 53, 54, 56, 71, 230, 247, 249, 296, 311, 313, 344, 359, 361, 395, 412, 414, 434, 450, 456, 457, 806], "privat": [1, 137, 683], "classnametests_priv": 1, "why": [1, 78], "after": [1, 2, 20, 47, 50, 62, 63, 64, 135, 136, 144, 145, 146, 198, 208, 541, 542, 545, 548, 644, 659, 719, 721, 738], "though": [1, 82, 135, 136, 142, 143, 476, 524, 540, 544, 745, 809], "assum": [1, 3, 71, 80, 82, 88, 91, 104, 105, 133, 135, 136, 139, 141, 157, 159, 220, 265, 266, 267, 287, 335, 385, 441, 489, 490, 494, 517, 527, 548, 549, 645, 649, 655, 656, 658, 659], "haven": 1, "test_method_nam": 1, "lead": [1, 80, 102, 104, 105, 106, 135, 136, 139], "trail": [1, 135, 136, 139], "underscor": [1, 140, 142], "ignor": [1, 20, 49, 71, 80, 104, 105, 132, 133, 134, 135, 136, 139, 140, 146, 237, 238, 278, 279, 303, 304, 351, 352, 402, 403, 453, 502, 526, 540, 541, 542, 543, 544, 650, 657, 658, 695, 714, 749, 770, 771, 804, 806, 809], "liter": [1, 140], "substr": 1, "particularli": [1, 687], "complex": [1, 140, 809], "discret": 1, "test_method_name_suffix": 1, "test_init_empti": 1, "test_init_singl": 1, "test_init_wrong_typ": 1, "option": [1, 4, 20, 31, 47, 49, 50, 52, 55, 56, 57, 58, 59, 61, 62, 63, 64, 66, 67, 68, 69, 71, 74, 75, 80, 85, 86, 87, 92, 97, 102, 104, 105, 106, 107, 110, 133, 135, 136, 141, 142, 144, 145, 148, 157, 158, 159, 177, 178, 179, 182, 183, 184, 186, 195, 205, 209, 210, 211, 212, 213, 218, 229, 230, 231, 235, 237, 238, 239, 242, 250, 252, 253, 254, 256, 258, 261, 268, 269, 277, 278, 279, 285, 296, 297, 301, 303, 304, 305, 314, 315, 316, 317, 319, 321, 324, 327, 328, 333, 344, 345, 349, 351, 352, 353, 363, 364, 365, 366, 368, 370, 373, 377, 378, 383, 394, 395, 396, 400, 402, 403, 404, 407, 415, 417, 418, 419, 421, 423, 426, 431, 432, 433, 434, 439, 450, 451, 452, 453, 454, 458, 459, 460, 461, 463, 465, 467, 469, 472, 476, 481, 482, 484, 490, 500, 502, 503, 505, 506, 511, 523, 526, 527, 529, 530, 531, 537, 540, 541, 542, 543, 544, 545, 546, 548, 580, 630, 641, 642, 643, 645, 646, 649, 650, 652, 653, 656, 657, 658, 659, 660, 666, 686, 703, 708, 722, 729, 736, 737, 743, 744, 745, 749, 769, 770, 791, 804, 809], "doe": [1, 4, 31, 47, 48, 50, 56, 59, 68, 131, 133, 135, 136, 138, 140, 142, 144, 230, 269, 270, 275, 278, 296, 344, 395, 450, 471, 489, 507, 529, 532, 540, 542, 544, 580, 650, 658, 659, 681, 690, 701, 714, 727, 734, 737, 744, 748, 802], "enough": [1, 78, 135, 140, 659], "verbos": 1, "mode": [1, 4, 49, 146, 278, 659, 770], "immedi": [1, 135, 142, 707], "fail": [1, 80, 81, 102, 104, 105, 106, 208, 544, 655, 770, 771, 809], "true": [1, 3, 4, 5, 18, 19, 20, 32, 33, 34, 35, 36, 47, 48, 50, 51, 52, 53, 54, 55, 59, 60, 62, 63, 64, 74, 75, 80, 102, 104, 105, 106, 107, 110, 131, 134, 135, 136, 137, 138, 140, 143, 157, 158, 159, 177, 182, 186, 195, 206, 211, 213, 214, 215, 217, 218, 220, 226, 229, 230, 232, 233, 234, 236, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 278, 279, 280, 281, 282, 284, 285, 287, 293, 296, 298, 299, 300, 302, 305, 306, 307, 308, 309, 311, 312, 313, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 328, 329, 330, 332, 333, 335, 341, 344, 346, 347, 348, 350, 353, 354, 355, 356, 357, 359, 360, 361, 362, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 380, 382, 383, 385, 391, 394, 395, 397, 398, 399, 401, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 416, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 438, 439, 441, 447, 450, 454, 456, 457, 460, 461, 462, 463, 464, 465, 466, 468, 472, 476, 481, 482, 489, 490, 491, 492, 498, 500, 502, 513, 514, 515, 521, 523, 526, 527, 529, 540, 542, 544, 545, 548, 580, 590, 649, 650, 652, 653, 657, 658, 660, 683, 685, 687, 692, 700, 706, 708, 709, 710, 712, 715, 718, 719, 720, 723, 724, 725, 726, 735, 737, 738, 740, 744, 745, 770, 771, 780, 791, 804, 806, 809], "divers": [1, 489, 660, 801], "alpha": [1, 3, 102, 108, 476, 655, 656, 660], "test_ac": 1, "test_berger_parker_d": 1, "test_bas": 1, "basetest": 1, "ran": 1, "1234": 1, "level": [1, 3, 4, 59, 86, 140, 476, 657, 658, 703, 751, 801, 804], "modulenametest": 1, "simpl": [1, 2, 131, 132, 135, 136, 140, 144, 146, 170, 181, 473, 476, 541, 548, 802, 806], "advertis": 1, "small": [1, 3, 139, 144, 473, 484, 652], "hand": [1, 3, 650], "larg": [1, 20, 85, 104, 105, 130, 135, 142, 484, 541, 652, 658, 683, 690], "calcul": [1, 20, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 107, 110, 130, 241, 242, 406, 407, 476, 483, 540, 541, 542, 543, 544, 548, 570, 580, 620, 649, 653, 656, 658, 659, 688, 695, 734, 801, 804], "spreadsheet": [1, 139], "numer": [1, 3, 85, 131, 139, 145, 488, 541, 542, 580, 631, 641, 644, 645, 651, 652, 659], "edg": [1, 140, 548, 644, 683, 736], "happen": [1, 140, 252, 315, 364, 417, 459, 744, 809], "none": [1, 4, 20, 31, 47, 49, 50, 57, 58, 59, 63, 64, 66, 67, 68, 92, 102, 106, 107, 131, 135, 146, 148, 157, 159, 171, 172, 173, 177, 182, 186, 195, 205, 207, 209, 210, 213, 231, 235, 237, 238, 239, 250, 261, 264, 280, 297, 301, 303, 304, 305, 314, 324, 326, 328, 345, 349, 351, 352, 353, 363, 373, 376, 378, 396, 400, 402, 403, 404, 415, 426, 430, 434, 451, 452, 453, 454, 458, 467, 476, 481, 482, 484, 490, 503, 505, 506, 513, 527, 530, 531, 540, 541, 542, 543, 544, 545, 546, 550, 570, 580, 610, 630, 632, 641, 642, 646, 649, 650, 653, 654, 656, 657, 658, 659, 666, 685, 686, 690, 693, 695, 703, 712, 714, 717, 718, 719, 720, 722, 729, 733, 734, 736, 737, 738, 741, 742, 744, 745, 770, 771, 791, 804, 806, 809], "neg": [1, 3, 20, 63, 66, 69, 82, 278, 478, 484, 513, 644, 645, 650, 655, 659, 745], "condit": [1, 3, 86, 87, 658], "superclass": 1, "veri": [1, 3, 62, 63, 64, 85, 135, 140, 146, 473, 690], "To": [1, 3, 4, 38, 69, 80, 104, 105, 135, 136, 137, 140, 143, 146, 213, 328, 378, 476, 513, 534, 540, 542, 544, 548, 655, 685, 802, 809], "shuffl": [1, 690], "version": [1, 3, 74, 75, 80, 102, 104, 105, 106, 130, 131, 133, 134, 137, 138, 142, 158, 236, 264, 302, 326, 350, 376, 401, 430, 488, 679, 683, 746, 750, 804, 807], "sort": [1, 51, 56, 108, 109, 187, 195, 198, 236, 239, 254, 302, 305, 317, 350, 353, 366, 401, 404, 419, 434, 454, 461, 580, 610, 630, 731, 736, 737, 744, 804, 809], "repeat": [1, 3, 136, 655, 767], "mani": [1, 3, 71, 94, 109, 140, 473, 476, 548, 644, 650, 658, 659, 809], "sampl": [1, 3, 71, 72, 73, 78, 79, 80, 81, 82, 84, 86, 87, 88, 89, 90, 91, 92, 95, 101, 102, 103, 104, 105, 106, 107, 110, 130, 476, 490, 540, 541, 543, 544, 550, 580, 610, 620, 630, 632, 640, 641, 644, 645, 650, 651, 652, 655, 657, 658, 659, 690, 749], "1000": [1, 209, 630], "million": [1, 107], "binomi": [1, 658, 659], "approxim": [1, 652, 655], "3": [1, 3, 20, 31, 36, 47, 48, 50, 52, 55, 56, 58, 59, 62, 66, 71, 79, 80, 95, 101, 104, 105, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 186, 195, 206, 211, 218, 220, 229, 230, 231, 236, 237, 253, 254, 256, 262, 263, 266, 267, 278, 279, 285, 287, 296, 297, 302, 303, 316, 317, 319, 325, 328, 333, 335, 344, 345, 350, 351, 365, 366, 368, 374, 383, 385, 394, 395, 396, 401, 402, 418, 419, 421, 427, 428, 431, 432, 434, 439, 441, 450, 451, 460, 461, 463, 468, 472, 473, 474, 475, 477, 479, 480, 481, 482, 483, 485, 486, 487, 490, 500, 505, 508, 510, 523, 530, 533, 534, 536, 540, 541, 542, 544, 545, 546, 548, 549, 550, 570, 580, 610, 631, 632, 641, 644, 645, 650, 651, 655, 657, 658, 659, 660, 680, 690, 695, 696, 703, 704, 705, 728, 732, 734, 736, 737, 739, 740, 745, 750, 801, 804, 806, 809], "depend": [1, 4, 7, 75, 78, 79, 80, 102, 104, 105, 106, 135, 136, 144, 157, 158, 159, 242, 407, 494, 517, 542, 544, 546, 600, 650, 667, 668, 690, 691, 694, 738, 744, 770, 780, 802, 806, 809], "seed": [1, 540, 544, 630, 655, 658, 659], "between": [1, 3, 20, 63, 66, 76, 82, 86, 101, 104, 105, 106, 110, 130, 135, 136, 137, 139, 142, 144, 145, 198, 211, 230, 235, 256, 257, 258, 259, 296, 301, 319, 320, 321, 322, 344, 349, 368, 369, 370, 371, 395, 400, 421, 422, 423, 424, 450, 452, 463, 464, 465, 466, 470, 471, 472, 476, 488, 489, 490, 494, 503, 513, 517, 527, 540, 541, 542, 543, 544, 545, 547, 548, 580, 644, 645, 646, 652, 655, 658, 659, 666, 680, 688, 689, 690, 696, 705, 715, 734, 735, 745, 804, 806], "prefer": [1, 49, 102, 106, 136, 644, 645], "stochast": 1, "failur": [1, 71, 512, 538, 771, 809], "less": [1, 20, 71, 80, 87, 104, 105, 107, 142, 253, 254, 316, 317, 365, 366, 418, 419, 460, 461, 472, 542, 545, 630, 644, 660, 716, 750], "10": [1, 20, 49, 68, 71, 86, 87, 132, 134, 135, 136, 137, 138, 140, 141, 142, 186, 195, 209, 213, 237, 280, 303, 328, 351, 378, 402, 434, 476, 488, 544, 631, 655, 658, 659, 745, 809], "risk": [1, 659], "ad": [1, 20, 62, 63, 64, 65, 66, 67, 135, 144, 205, 434, 476, 645, 648, 770, 801, 806], "total": [1, 72, 73, 79, 81, 83, 88, 89, 90, 91, 92, 101, 130, 131, 239, 305, 353, 404, 454, 541, 695], "assert_rais": 1, "ac": [1, 32, 33, 34, 35, 36, 40, 42, 45, 48, 50, 52, 56, 58, 59, 62, 65, 134, 136, 137, 144, 186, 240, 306, 354, 405, 804], "def": [1, 133, 146, 157, 158, 159, 235, 280, 301, 349, 400, 452, 659, 809], "12": [1, 3, 134, 141, 434, 476, 655, 804], "9": [1, 3, 4, 131, 132, 133, 135, 138, 141, 144, 186, 195, 213, 233, 237, 280, 299, 303, 328, 347, 351, 378, 398, 402, 434, 476, 548, 549, 631, 644, 645, 647, 648, 650, 651, 652, 655, 692, 695, 704, 734, 737, 744, 745, 804], "7": [1, 3, 65, 75, 107, 135, 136, 137, 144, 145, 186, 195, 206, 211, 213, 220, 230, 278, 287, 296, 335, 344, 378, 385, 395, 441, 450, 476, 510, 536, 541, 542, 544, 545, 548, 631, 655, 690, 704, 728, 736, 737, 745, 749, 804, 807], "62749672": 1, "otu": [1, 3, 71, 72, 73, 76, 78, 79, 80, 81, 83, 84, 85, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 110, 473, 476, 745], "abund": [1, 3, 71, 72, 79, 80, 82, 83, 85, 92, 101, 102, 104, 105, 106, 107, 110, 476, 631, 644, 645, 651, 652, 659], "14": [1, 3, 75, 85, 134, 136, 141, 233, 237, 299, 303, 347, 351, 398, 402, 476, 549, 659, 696, 734], "border": 1, "singleton": [1, 3, 71, 74, 75, 79, 83, 96, 100, 146], "ton": [1, 3], "35681818182": 1, "test_ace_only_rare_singleton": 1, "valueerror": [1, 31, 47, 49, 50, 52, 56, 58, 60, 71, 80, 82, 102, 104, 105, 106, 110, 177, 182, 230, 231, 237, 239, 250, 253, 254, 256, 257, 258, 259, 278, 280, 296, 297, 303, 305, 314, 316, 317, 319, 320, 321, 322, 344, 345, 351, 353, 363, 365, 366, 368, 369, 370, 371, 395, 396, 402, 404, 415, 418, 419, 421, 422, 423, 424, 434, 450, 451, 454, 458, 460, 461, 463, 464, 465, 466, 471, 472, 478, 484, 503, 527, 541, 542, 544, 545, 580, 620, 630, 641, 644, 645, 658, 659, 660, 688, 690, 695, 703, 711, 713, 716, 728, 729, 734, 739, 750], "43": [1, 56, 92, 141, 744], "42": [1, 3, 56, 135, 141, 142, 213, 235, 301, 349, 378, 400, 452, 541, 544], "__name__": 1, "__main__": 1, "runmodul": 1, "being": [1, 3, 20, 47, 49, 50, 62, 63, 64, 102, 106, 135, 136, 142, 145, 488, 544, 548, 630, 658, 667, 668, 687, 691, 694, 727, 802, 804, 807], "addition": [1, 3, 4, 140, 195, 804, 806], "trace": 1, "arguabl": 1, "mail": 1, "github": [1, 68, 69, 104, 105, 134, 138, 641], "inform": [1, 20, 49, 57, 61, 131, 132, 133, 134, 135, 136, 137, 143, 145, 186, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 506, 511, 531, 537, 560, 600, 631, 642, 643, 652, 658, 659, 722, 743, 770, 801, 804, 807, 809], "attribut": [1, 7, 31, 58, 130, 134, 135, 137, 138, 141, 143, 144, 148, 186, 194, 195, 209, 213, 218, 269, 280, 285, 328, 333, 378, 383, 434, 439, 490, 500, 510, 513, 523, 536, 632, 640, 651, 658, 666, 667, 668, 680, 684, 687, 691, 694, 708, 736, 744, 749, 751, 752, 755, 761, 781, 804], "contributor": 1, "guid": 1, "set": [1, 4, 19, 20, 48, 51, 55, 56, 80, 104, 105, 110, 135, 137, 139, 142, 148, 195, 207, 213, 230, 239, 252, 255, 280, 296, 305, 315, 318, 328, 344, 353, 364, 367, 378, 395, 404, 417, 420, 434, 450, 454, 459, 462, 473, 484, 505, 510, 530, 536, 548, 630, 650, 652, 655, 657, 658, 659, 667, 668, 682, 684, 687, 691, 694, 695, 697, 717, 731, 732, 744, 751, 761, 762, 767, 804, 809], "system": [1, 57, 61, 145, 146, 195, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 506, 511, 531, 537, 642, 643, 658, 722, 743], "step": [1, 3, 31, 47, 50, 58, 80, 102, 104, 105, 106, 142, 146, 648, 655], "associ": [1, 3, 38, 71, 136, 144, 145, 171, 172, 173, 186, 205, 207, 209, 213, 328, 378, 434, 541, 548, 630, 649, 653, 656, 657, 658, 695, 701, 734, 802, 807], "account": [1, 264, 326, 376, 430, 580, 644, 652, 659, 806], "command": [1, 145, 278], "config": 1, "yoshiki": 1, "v\u00e1zquez": 1, "baeza": [1, 641], "email": 1, "yoshiki89": 1, "gmail": 1, "com": [1, 68, 69, 72, 73, 81, 85, 89, 97, 98, 101, 104, 105, 131, 132, 133, 134, 138, 541, 769], "correctli": 1, "fix": [1, 86, 142], "handi": [1, 770, 809], "featur": [1, 3, 82, 135, 138, 144, 186, 195, 198, 206, 208, 209, 211, 213, 328, 378, 434, 476, 488, 632, 640, 644, 645, 651, 652, 749, 804], "link": [1, 106, 194, 541, 548, 666], "togeth": [1, 56, 134, 135, 137, 144, 476, 770], "ticket": 1, "tracker": [1, 135, 158], "special": [1, 20, 146], "close": [1, 3, 4, 5, 57, 61, 135, 136, 140, 142, 144, 210, 212, 261, 268, 278, 324, 327, 373, 377, 426, 433, 467, 469, 476, 506, 511, 531, 537, 569, 599, 609, 642, 643, 722, 743, 769], "automat": [1, 20, 47, 50, 56, 57, 61, 143, 170, 181, 186, 210, 212, 255, 261, 268, 318, 324, 327, 367, 373, 377, 420, 426, 433, 462, 467, 469, 489, 506, 511, 531, 537, 632, 642, 643, 690, 722, 743, 802], "merg": 1, "main": 1, "repositori": 1, "file": [2, 4, 5, 6, 57, 61, 112, 113, 114, 115, 116, 117, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 158, 170, 177, 178, 179, 181, 182, 183, 184, 185, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 476, 489, 505, 506, 511, 530, 531, 537, 569, 599, 609, 641, 642, 643, 657, 685, 722, 743, 768, 769, 801, 806], "test": [2, 3, 36, 44, 146, 187, 192, 198, 203, 218, 226, 270, 275, 285, 293, 333, 341, 383, 391, 439, 447, 473, 476, 489, 540, 542, 543, 544, 545, 547, 548, 559, 579, 589, 619, 629, 655, 658, 659, 748, 749, 768], "i": [2, 3, 4, 7, 20, 31, 32, 33, 34, 35, 36, 38, 42, 44, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 59, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 95, 96, 97, 98, 99, 101, 102, 104, 105, 106, 107, 110, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 147, 148, 157, 158, 159, 170, 171, 173, 177, 178, 179, 181, 182, 183, 184, 186, 187, 192, 194, 195, 198, 203, 205, 206, 207, 208, 210, 212, 213, 214, 215, 216, 217, 218, 220, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 239, 240, 241, 247, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 275, 278, 279, 280, 281, 282, 283, 284, 285, 287, 293, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 311, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 341, 344, 345, 346, 347, 348, 349, 350, 351, 353, 354, 359, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 412, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 441, 447, 450, 451, 452, 454, 456, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 498, 500, 502, 504, 505, 506, 507, 509, 510, 511, 513, 514, 515, 517, 521, 523, 524, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 537, 540, 541, 542, 543, 544, 546, 548, 569, 580, 599, 609, 610, 620, 630, 631, 640, 641, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 666, 667, 668, 671, 680, 683, 685, 687, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 703, 704, 705, 707, 709, 710, 711, 713, 715, 716, 718, 721, 722, 725, 726, 729, 731, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 755, 767, 768, 769, 770, 771, 780, 781, 791, 801, 804, 806, 807, 808, 809], "testrunn": 2, "__file__": 2, "usual": [2, 134, 137, 145, 685], "some": [2, 3, 20, 70, 82, 92, 135, 137, 140, 143, 157, 158, 159, 186, 208, 475, 485, 486, 487, 645, 655, 658, 770, 806, 809], "explicit": [2, 136], "rel": [2, 52, 134, 137, 239, 241, 242, 254, 256, 258, 305, 317, 319, 321, 353, 366, 368, 370, 404, 406, 407, 419, 421, 423, 454, 461, 463, 465, 524, 730, 781, 804], "neatli": 2, "face": 2, "deepli": 2, "nest": [2, 140, 489, 542, 732, 806], "necessari": [2, 3, 56, 131, 142, 195, 434, 476, 490, 540, 541, 542, 569, 599, 609, 690, 768, 802], "final": [2, 144, 548, 809], "guidelin": [2, 801], "analyz": [3, 473, 645, 658], "biolog": [3, 55, 62, 63, 64, 88, 91, 95, 135, 136, 138, 140, 143, 186, 232, 233, 234, 236, 237, 240, 243, 244, 245, 248, 260, 298, 299, 300, 302, 303, 306, 307, 308, 309, 312, 323, 346, 347, 348, 350, 351, 354, 355, 356, 357, 360, 372, 397, 398, 399, 401, 402, 405, 408, 409, 410, 413, 425, 434, 658, 801], "intend": [3, 86, 87, 280, 630, 641, 748, 749], "primari": [3, 146, 804], "support": [3, 4, 49, 57, 61, 82, 210, 212, 213, 261, 268, 324, 327, 328, 373, 377, 378, 426, 433, 467, 469, 506, 511, 531, 537, 542, 632, 642, 643, 650, 655, 666, 685, 722, 740, 743, 744, 751, 770, 791, 806, 808, 809], "discoveri": 3, "avail": [3, 106, 131, 135, 136, 137, 141, 145, 174, 175, 269, 277, 513, 540, 541, 542, 543, 544, 580, 655, 659, 746, 802, 809], "high": [3, 80, 104, 105, 135, 136, 641, 644, 650, 801], "how": [3, 4, 45, 55, 56, 92, 135, 137, 230, 252, 278, 279, 296, 315, 344, 364, 395, 417, 450, 459, 542, 650, 655, 657, 658, 659, 801, 802, 807, 809], "should": [3, 20, 49, 69, 80, 92, 102, 103, 104, 105, 106, 131, 137, 141, 145, 146, 157, 158, 159, 195, 235, 252, 253, 254, 269, 301, 315, 316, 317, 349, 364, 365, 366, 400, 417, 418, 419, 452, 459, 460, 461, 472, 474, 475, 476, 524, 542, 544, 548, 630, 644, 645, 650, 651, 652, 655, 658, 659, 703, 724, 807], "alpha_divers": [3, 80, 106, 108], "beta_divers": [3, 102, 104, 105, 107, 109, 110], "design": [3, 107, 130, 134, 489, 657], "accept": [3, 31, 58, 107, 262, 266, 267, 325, 374, 427, 431, 432, 468, 470, 476, 542, 546, 548, 655, 658, 659, 700, 729, 737, 740, 791], "loos": [3, 548], "practic": [3, 56, 135, 136, 143, 630, 693, 698], "repres": [3, 48, 76, 78, 80, 92, 97, 98, 104, 105, 107, 130, 131, 132, 134, 135, 139, 140, 142, 144, 145, 186, 205, 213, 328, 378, 434, 481, 482, 488, 494, 500, 503, 510, 517, 523, 527, 536, 548, 631, 641, 655, 666, 732, 737, 744, 745, 804, 806], "speci": [3, 71, 85, 90, 101, 141, 145, 473, 631, 645, 650, 652, 666], "gene": [3, 138, 186, 195, 206, 209, 213, 434], "metabolit": [3, 659], "what": [3, 80, 102, 104, 105, 106, 140, 146, 148, 174, 175, 179, 184, 209, 252, 315, 364, 417, 459, 548, 630, 658, 806, 807, 809], "vari": [3, 544, 655, 657, 658], "wide": [3, 56, 230, 296, 344, 395, 450], "exampl": [3, 5, 31, 32, 33, 34, 35, 36, 40, 42, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 80, 104, 105, 106, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 157, 158, 159, 186, 195, 206, 211, 213, 214, 215, 218, 220, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 277, 278, 279, 280, 281, 282, 285, 287, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 328, 329, 330, 333, 335, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 380, 383, 385, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 439, 441, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 500, 505, 508, 510, 523, 530, 533, 534, 536, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 630, 631, 641, 650, 655, 657, 658, 659, 660, 667, 668, 679, 680, 681, 682, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 746, 747, 748, 750, 769, 802, 804, 806, 807, 809], "microbiom": [3, 107, 476, 650], "survei": 3, "16": [3, 78, 133, 135, 136, 137, 141, 142, 229, 238, 263, 304, 352, 394, 403, 428, 453, 641, 655, 659, 705, 734], "rrna": 3, "oral": 3, "swab": 3, "genom": [3, 195], "studi": [3, 473, 476, 644, 652, 659], "organ": [3, 134, 137, 145], "throughout": [3, 139, 269, 277, 658, 808], "array_lik": [3, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 110, 220, 237, 238, 252, 262, 287, 303, 304, 315, 325, 335, 351, 352, 364, 374, 385, 402, 403, 417, 427, 441, 453, 459, 468, 476, 477, 478, 479, 480, 483, 484, 485, 486, 487, 490, 540, 542, 543, 544, 545, 548, 646, 649, 653, 656, 659, 660], "convert": [3, 4, 131, 133, 134, 135, 137, 140, 142, 144, 213, 235, 301, 328, 349, 378, 400, 434, 452, 490, 529, 541, 660, 685, 750], "nativ": [3, 507, 532, 650], "ident": [3, 131, 132, 140, 494, 513, 517, 548, 661, 690, 723, 806], "mention": [3, 140], "row": [3, 31, 102, 106, 107, 110, 130, 142, 186, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 494, 504, 517, 528, 529, 534, 540, 541, 542, 543, 544, 545, 546, 548, 632, 644, 645, 648, 652, 658, 659, 748], "column": [3, 20, 31, 54, 55, 56, 106, 130, 135, 137, 138, 141, 142, 144, 145, 230, 249, 255, 296, 313, 318, 344, 361, 367, 395, 414, 420, 434, 450, 457, 462, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 489, 494, 504, 508, 517, 528, 529, 533, 540, 541, 542, 543, 544, 545, 546, 548, 580, 620, 631, 641, 644, 645, 646, 648, 652, 653, 657, 658, 703, 707, 748, 749], "incorpor": [3, 472], "relationship": [3, 140, 644, 645, 652, 655, 659, 745], "phylogenet": [3, 80, 104, 105, 140, 142, 489, 548, 666, 688, 698, 745, 804], "tree": [3, 80, 104, 105, 140, 144, 145, 195, 801, 802], "treenod": [3, 80, 104, 105, 140, 744, 745, 802, 806], "identifi": [3, 59, 102, 106, 107, 110, 130, 133, 135, 136, 137, 138, 139, 142, 144, 145, 209, 237, 351, 402, 489, 545, 655, 659, 802], "tip": [3, 80, 104, 105, 666, 683, 685, 687, 688, 689, 690, 692, 693, 695, 696, 698, 705, 710, 711, 712, 713, 715, 716, 718, 719, 720, 726, 727, 728, 729, 731, 732, 734, 737, 738, 739, 744, 802, 806], "optim": [3, 20, 81, 102, 104, 105, 106, 544, 696, 746], "faster": [3, 80, 104, 105, 107, 239, 267, 279, 305, 353, 404, 432, 454, 544, 650, 718], "call": [3, 4, 56, 80, 86, 87, 104, 105, 133, 135, 142, 144, 146, 186, 230, 238, 241, 262, 278, 296, 304, 325, 344, 352, 374, 395, 403, 406, 427, 434, 450, 453, 468, 529, 541, 542, 630, 645, 655, 681, 683, 684, 687, 698, 699, 701, 714, 715, 721, 730, 735, 742, 768, 770, 771, 780, 802, 809], "matric": [3, 64, 67, 130, 139, 490, 492, 498, 515, 521, 541, 542, 545, 547, 548, 646, 650, 690], "thu": [3, 135, 136, 140, 239, 305, 353, 404, 434, 454, 494, 513, 517, 540, 542, 544, 548, 650], "slow": [3, 80, 102, 104, 105, 106], "disabl": [3, 80, 102, 104, 105, 106, 213, 328, 378, 809], "fals": [3, 4, 5, 18, 19, 20, 32, 33, 34, 35, 36, 47, 48, 50, 52, 53, 54, 55, 59, 62, 63, 64, 74, 75, 80, 102, 104, 105, 106, 131, 134, 135, 136, 137, 138, 140, 143, 157, 158, 159, 186, 195, 206, 207, 213, 214, 215, 216, 218, 220, 226, 229, 230, 232, 233, 234, 236, 239, 240, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 262, 263, 264, 265, 266, 267, 269, 270, 278, 279, 280, 281, 282, 283, 285, 287, 293, 296, 298, 299, 300, 302, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 328, 329, 330, 331, 333, 335, 341, 344, 346, 347, 348, 350, 353, 354, 355, 356, 357, 359, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 380, 381, 383, 385, 391, 394, 395, 397, 398, 399, 401, 404, 405, 407, 408, 409, 410, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 439, 441, 447, 450, 454, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 468, 476, 491, 492, 498, 500, 514, 515, 521, 523, 527, 529, 542, 545, 548, 549, 550, 570, 580, 610, 650, 652, 655, 657, 658, 660, 683, 688, 689, 692, 700, 706, 709, 710, 715, 723, 735, 737, 738, 740, 749, 770, 791, 804, 806, 809], "danger": 3, "invalid": [3, 52, 56, 80, 102, 104, 105, 106, 135, 213, 328, 378, 541, 542, 641, 682, 687, 697, 708, 717, 721, 807], "encount": [3, 696, 698, 705], "difficult": 3, "error": [3, 4, 49, 80, 81, 92, 102, 104, 105, 106, 135, 136, 142, 146, 208, 478, 484, 512, 538, 539, 540, 542, 544, 655, 659, 665, 750, 802], "messag": [3, 80, 102, 104, 105, 106, 560, 600, 750, 802], "recommend": [3, 85, 142, 144, 213, 280, 328, 378, 434, 476, 489, 641, 644, 652, 658, 807], "care": [3, 49, 135, 137, 544], "ensur": [3, 20, 49, 80, 104, 105, 146, 213, 328, 378, 478, 484, 492, 513, 515, 686, 748], "confid": [3, 70, 75, 79, 86, 655, 656, 666, 685, 807], "met": [3, 791], "safe": [3, 80, 102, 104, 105, 106, 650, 660, 683], "cast": [3, 140, 230, 296, 344, 395, 450, 489, 490, 546, 641], "dimension": [3, 475, 485, 486, 487, 490, 507, 524, 532, 644, 651, 652, 658, 659], "equal": [3, 36, 44, 49, 69, 71, 104, 105, 106, 135, 187, 192, 198, 203, 218, 226, 270, 275, 285, 293, 333, 341, 383, 391, 434, 439, 447, 471, 473, 492, 498, 515, 521, 540, 542, 543, 544, 546, 548, 630, 644, 649, 650, 653, 658, 659, 660, 688, 744, 748, 749], "confirm": [3, 118, 540, 544, 659], "uniqu": [3, 56, 60, 131, 135, 139, 140, 144, 145, 472, 489, 544, 641, 684, 693, 698], "root": [3, 80, 91, 104, 105, 140, 145, 667, 668, 680, 681, 682, 683, 685, 686, 687, 691, 694, 695, 696, 697, 700, 701, 703, 705, 709, 711, 713, 714, 721, 726, 727, 730, 732, 734, 736, 737, 739, 741, 742, 744, 745, 806], "node": [3, 80, 104, 105, 661, 662, 666, 667, 668, 671, 674, 680, 681, 682, 684, 685, 686, 687, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 726, 727, 730, 731, 734, 735, 736, 737, 738, 739, 740, 744, 802, 806], "branch": [3, 105, 666, 685, 686, 695, 736, 739, 745, 806], "name": [3, 57, 61, 80, 104, 105, 131, 132, 136, 137, 138, 140, 141, 143, 144, 146, 148, 171, 172, 173, 178, 183, 186, 210, 212, 255, 261, 268, 269, 270, 275, 277, 318, 324, 327, 367, 373, 377, 420, 426, 433, 462, 467, 469, 476, 506, 511, 531, 537, 540, 541, 543, 544, 549, 560, 600, 632, 641, 642, 643, 661, 666, 679, 681, 682, 683, 685, 687, 688, 689, 690, 693, 697, 698, 699, 700, 701, 703, 705, 711, 712, 713, 714, 715, 716, 718, 719, 720, 721, 722, 724, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 743, 744, 762, 768, 802, 806], "correspond": [3, 55, 80, 104, 105, 135, 136, 138, 143, 144, 178, 183, 242, 255, 269, 278, 318, 367, 407, 420, 431, 432, 462, 476, 488, 494, 517, 631, 632, 644, 645, 648, 659, 666, 698, 703, 707, 716, 737, 744], "ecolog": [3, 78, 645, 650], "literatur": [3, 659], "relat": [3, 80, 89, 104, 105, 107, 134, 135, 139, 144, 489, 534, 644, 645, 652], "measur": [3, 78, 84, 86, 87, 88, 90, 91, 94, 95, 99, 104, 105, 476, 489, 644, 657, 658, 666, 685], "three": [3, 31, 94, 142, 145, 489, 513, 545, 631, 641, 658, 659, 690, 809], "were": [3, 64, 67, 80, 85, 102, 104, 105, 106, 140, 142, 143, 218, 252, 285, 315, 333, 364, 383, 417, 439, 459, 540, 542, 544, 641, 658, 659, 711, 713, 747, 809], "wa": [3, 4, 62, 65, 71, 80, 82, 89, 95, 102, 104, 105, 106, 107, 133, 135, 136, 140, 142, 252, 278, 315, 364, 417, 434, 459, 476, 488, 542, 590, 649, 657, 659, 681, 723, 744, 745, 802, 806, 807, 809], "form": [3, 6, 31, 62, 490, 494, 513, 517, 534, 736], "among": [3, 137, 510, 536, 550, 645, 652], "tripleton": 3, "do": [3, 4, 47, 50, 92, 130, 135, 142, 146, 218, 259, 285, 322, 333, 371, 383, 424, 434, 439, 466, 471, 476, 542, 545, 580, 652, 685, 698, 728, 729, 806, 809], "doubleton": [3, 74, 75, 77, 79], "faith_pd": 3, "ten": 3, "faith": [3, 80, 489], "100": [3, 131, 132, 135, 138, 209, 476, 659, 809], "unweighted_unifrac": [3, 105], "hundr": [3, 107], "unweight": [3, 104, 105, 653], "unifrac": [3, 80, 104, 105, 107, 110, 650], "latter": 3, "neglig": 3, "know": [3, 20, 80, 104, 105, 133, 135, 142, 144, 146, 476, 655, 746, 802], "discov": [3, 693, 807], "get_alpha_diversity_metric": 3, "get_beta_diversity_metr": [3, 106, 108, 110], "respect": [3, 4, 31, 74, 135, 138, 141, 145, 157, 158, 159, 176, 177, 179, 182, 184, 239, 305, 353, 404, 434, 454, 476, 488, 500, 503, 510, 523, 527, 534, 536, 548, 632], "won": [3, 80, 102, 104, 105, 106, 136, 187, 645], "those": [3, 103, 548, 630, 644, 659, 695, 729, 734, 745, 770, 804], "scipi": [3, 81, 103, 106, 109, 471, 476, 481, 490, 507, 513, 524, 532, 534, 541, 542, 544, 548, 650, 655, 658, 659, 702], "spatial": [3, 103, 106, 109, 471, 490, 507, 513, 524, 532, 534, 544], "pdist": [3, 103, 106, 109, 548], "23": [3, 141, 144, 277, 476, 804], "64": [3, 107, 136, 269, 270, 740], "35": [3, 134, 136, 137, 143, 473, 659], "40": [3, 135, 145, 488, 657, 659], "44": [3, 95, 544, 744], "45": [3, 141, 659], "19": [3, 134, 141, 655], "abcdef": 3, "adiv_obs_otu": 3, "observed_otu": [3, 94], "b": [3, 5, 20, 51, 56, 58, 59, 60, 82, 92, 110, 136, 139, 140, 434, 489, 494, 500, 505, 508, 510, 517, 523, 530, 533, 534, 536, 541, 542, 630, 641, 657, 658, 667, 668, 679, 680, 681, 683, 685, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 698, 699, 700, 701, 705, 706, 709, 710, 711, 712, 713, 714, 715, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 729, 730, 731, 732, 734, 735, 736, 738, 739, 740, 741, 742, 744, 745, 769, 802, 804, 806], "f": [3, 5, 20, 56, 86, 107, 131, 132, 136, 140, 143, 144, 145, 542, 543, 544, 645, 648, 655, 658, 667, 668, 680, 681, 683, 685, 686, 687, 691, 692, 694, 695, 696, 698, 699, 700, 701, 705, 711, 712, 713, 714, 715, 721, 725, 726, 727, 730, 731, 732, 734, 735, 739, 740, 741, 742, 744, 806], "int64": [3, 31, 48, 56, 229, 233, 263, 299, 347, 394, 398, 428, 434, 476, 804], "next": [3, 80, 86, 87, 104, 105, 134, 140, 146, 434, 476, 620, 644, 744, 806, 809], "io": [3, 57, 61, 80, 104, 105, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 489, 506, 511, 531, 537, 641, 642, 643, 703, 722, 743, 744, 769, 801, 806], "stringio": [3, 4, 80, 104, 105, 131, 132, 133, 134, 135, 136, 137, 138, 140, 141, 142, 143, 144, 145, 489, 744, 745, 802, 806], "otu1": [3, 80, 104, 105], "otu2": [3, 80, 104, 105], "otu3": [3, 80, 104, 105], "otu4": [3, 80, 104, 105], "75": [3, 52, 80, 85, 104, 105, 256, 319, 368, 421, 463, 476, 489, 541, 544, 740], "otu5": [3, 80, 104, 105], "otu6": [3, 80, 104, 105], "otu7": [3, 80, 104, 105], "otu_id": [3, 80, 104, 105], "adiv_faith_pd": 3, "00": [3, 131, 132, 135, 138, 141, 230, 265, 296, 344, 395, 429, 450, 745, 804], "50": [3, 64, 67, 135, 138, 141, 230, 296, 344, 395, 450, 476, 549, 641, 658, 659, 804], "float64": [3, 56, 130, 230, 296, 344, 395, 450, 476, 478, 484, 485, 486, 487, 534, 544, 631], "now": [3, 85, 134, 135, 137, 142, 434, 473, 476, 541, 630, 631, 655, 658, 659, 806, 809], "brai": 3, "curti": 3, "notic": [3, 135, 140, 142, 659, 809], "bc_dm": 3, "braycurti": 3, "6x6": [3, 544], "78787879": 3, "86666667": 3, "30927835": 3, "85714286": 3, "81521739": 3, "78142077": 3, "86813187": 3, "1627907": 3, "87709497": 3, "09392265": 3, "71597633": 3, "87777778": 3, "89285714": 3, "68235294": 3, "weight": [3, 104, 105, 140, 549, 550, 570, 580, 590, 610, 649, 653, 744], "again": [3, 135, 136, 488, 745], "wu_dm": 3, "weighted_unifrac": [3, 104], "77549923": 3, "82857143": 3, "42512039": 3, "8547619": 3, "10937312": 3, "26433692": 3, "98435423": 3, "24270353": 3, "46774194": 3, "95224719": 3, "16025641": 3, "86111111": 3, "98796148": 3, "30870431": 3, "82967033": 3, "significantli": [3, 55, 476, 540, 543, 544], "correl": [3, 489, 541, 542, 545, 547, 548, 632, 645, 646, 652, 655, 659, 690, 806], "mantel": [3, 489, 545, 548], "Then": [3, 473, 476, 549, 631], "p": [3, 20, 68, 80, 89, 90, 476, 488, 489, 540, 542, 543, 544, 545, 548, 631, 644, 645, 646, 652, 655, 658, 659], "05": [3, 141, 476, 548, 655, 656, 658, 659, 748], "p_valu": [3, 542, 548], "n": [3, 4, 5, 20, 72, 73, 79, 81, 82, 83, 88, 89, 90, 91, 92, 96, 101, 130, 131, 132, 133, 135, 136, 137, 141, 142, 143, 144, 145, 146, 157, 158, 159, 252, 315, 351, 364, 417, 459, 484, 489, 542, 545, 548, 630, 644, 645, 646, 649, 651, 652, 653, 655, 659, 660, 667, 668, 679, 687, 691, 694, 700, 705, 707, 714, 729, 730, 737, 744, 745, 750, 804], "922404392093": 3, "princip": [3, 544, 631, 641, 644, 650, 651], "coordin": [3, 137, 143, 186, 195, 198, 205, 206, 211, 544, 549, 580, 610, 620, 631, 632, 641, 644, 650, 651, 652], "analysi": [3, 80, 92, 104, 105, 135, 142, 473, 474, 476, 488, 540, 543, 544, 549, 550, 569, 570, 599, 609, 610, 620, 631, 641, 644, 645, 650, 651, 652, 655, 658, 659], "pcoa": [3, 141, 544, 632, 641, 651], "ordin": [3, 124, 544, 749, 750, 805], "wu_pc": 3, "plot": [3, 632], "realli": 3, "interest": [3, 434, 476, 489, 548, 644, 652, 658, 711, 713, 809], "context": [3, 5, 20, 471, 641, 745], "let": [3, 135, 136, 138, 142, 143, 144, 186, 195, 262, 325, 374, 427, 434, 468, 476, 542, 630, 654, 655, 658, 659, 746, 804, 806, 809], "visual": [3, 641], "sample_md": 3, "datafram": [3, 31, 54, 106, 131, 132, 145, 213, 249, 313, 328, 361, 378, 414, 434, 457, 476, 500, 508, 510, 523, 533, 536, 540, 541, 543, 544, 545, 549, 580, 620, 631, 632, 641, 644, 645, 651, 652, 657, 658, 703, 748, 804], "gut": [3, 641], "skin": [3, 641], "tongu": 3, "body_sit": [3, 641], "subject": [3, 131, 132, 809], "color": [3, 86, 87, 505, 530, 641], "taken": [3, 131, 132, 135, 142, 144, 145, 476, 548, 769], "fig": [3, 505, 530, 641], "axis_label": [3, 641], "pc": [3, 549, 641], "titl": [3, 131, 132, 137, 144, 505, 530, 641], "cmap": [3, 505, 530, 641], "jet": 3, "sourc": [3, 4, 5, 6, 31, 32, 33, 34, 35, 36, 38, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 134, 135, 137, 138, 147, 148, 157, 158, 159, 160, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 192, 194, 195, 196, 197, 198, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 287, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 335, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 490, 491, 492, 494, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 550, 559, 560, 569, 570, 579, 580, 589, 590, 599, 600, 609, 610, 619, 620, 629, 630, 632, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 671, 674, 676, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 755, 761, 767, 768, 769, 770, 771, 780, 781, 782, 791, 792, 801], "code": [3, 133, 135, 136, 137, 145, 209, 265, 266, 267, 269, 270, 275, 276, 277, 278, 279, 429, 431, 432, 505, 530, 548, 641, 660, 688, 744, 746, 801, 804, 807], "png": [3, 505, 530, 632, 641], "cluster": [3, 542, 544, 702, 804], "group": [3, 264, 326, 376, 430, 476, 488, 500, 523, 540, 543, 544, 549, 550, 559, 560, 579, 589, 600, 609, 610, 619, 629, 657, 658, 659, 770, 806], "bodi": [3, 641], "site": [3, 137, 141, 252, 315, 364, 417, 459, 631, 632, 641, 650], "appear": [3, 71, 131, 142, 144, 502, 526, 541, 644, 645, 650, 655, 807], "techniqu": [3, 473, 644, 645, 805], "exploratori": 3, "quantifi": 3, "strength": 3, "accomplish": [3, 473, 802], "anosim": [3, 543, 544], "999": [3, 434, 540, 542, 543, 544, 545, 548], "33333333333333331": 3, "anti": [3, 540], "insignific": 3, "strong": [3, 540, 542, 548], "explor": [3, 103, 631], "add": [3, 63, 66, 144, 146, 169, 186, 195, 206, 208, 218, 285, 333, 383, 434, 439, 478, 484, 485, 486, 487, 682, 695, 697], "straight": 3, "forward": [3, 267, 278, 279, 432], "beaus": 3, "seri": [3, 59, 102, 138, 476, 534, 540, 541, 543, 544, 549, 632, 655], "investig": 3, "categori": [3, 144, 549, 550, 559, 560, 569, 579, 580, 589, 590, 600, 609, 610, 619, 620, 629, 641, 655, 657, 658], "boxplot": 3, "show": [3, 195, 655, 806], "spearman": [3, 541, 542, 545], "give": [3, 140, 644, 645, 652, 690], "symmetr": [3, 489, 490, 494, 513, 517, 527, 542, 546, 548, 644, 688], "2x2": [3, 139], "corr": 3, "numeric_onli": 3, "000000": [3, 745], "939336": 3, "encod": [4, 130, 135, 136, 143, 146, 148, 488, 631], "compress": [4, 146], "auto": 4, "compresslevel": [4, 146], "filehandl": [4, 5, 57, 61, 146, 157, 158, 159, 177, 178, 179, 182, 183, 184, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 506, 511, 531, 537, 642, 643, 722, 743], "state": [4, 5, 6, 32, 33, 34, 35, 36, 38, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 60, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 131, 132, 133, 134, 137, 138, 142, 144, 145, 157, 158, 159, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 187, 192, 194, 196, 197, 198, 203, 205, 206, 207, 208, 209, 211, 214, 215, 216, 217, 218, 220, 222, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 270, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 289, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 329, 330, 331, 332, 333, 335, 337, 339, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 352, 353, 354, 355, 356, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 374, 375, 376, 379, 380, 381, 382, 383, 385, 387, 389, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 427, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 441, 443, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 494, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 514, 515, 517, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 540, 541, 542, 543, 544, 545, 546, 548, 559, 569, 579, 589, 599, 609, 619, 629, 630, 640, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 667, 668, 671, 674, 676, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 748, 749, 750, 767, 768, 769, 770, 771, 780, 782, 791, 792, 807, 809], "stabl": [4, 5, 6, 53, 54, 157, 158, 159, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 214, 215, 216, 217, 218, 220, 222, 224, 226, 227, 228, 229, 231, 232, 233, 234, 236, 238, 240, 241, 242, 243, 244, 245, 247, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 263, 264, 265, 266, 267, 270, 275, 276, 277, 278, 279, 281, 282, 283, 284, 285, 287, 289, 291, 293, 294, 295, 297, 298, 299, 300, 302, 304, 306, 307, 308, 309, 311, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 326, 329, 330, 331, 332, 333, 335, 337, 339, 341, 342, 343, 345, 346, 347, 348, 350, 352, 354, 355, 356, 357, 359, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 375, 376, 379, 380, 381, 382, 383, 385, 387, 389, 391, 392, 393, 394, 396, 397, 398, 399, 401, 403, 405, 406, 407, 408, 409, 410, 412, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 428, 429, 430, 431, 432, 435, 436, 437, 438, 439, 441, 443, 445, 447, 448, 449, 451, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 500, 510, 523, 536, 684], "write": [4, 57, 133, 134, 136, 138, 139, 140, 142, 144, 146, 159, 175, 176, 210, 261, 324, 373, 426, 467, 489, 506, 531, 569, 599, 609, 642, 679, 722, 750], "binari": [4, 146, 148, 157, 158, 159, 488, 548, 644, 652, 738, 769], "url": [4, 57, 61, 177, 178, 179, 182, 183, 184, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 506, 511, 531, 537, 642, 643, 722, 743], "text": [4, 73, 89, 90, 101, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 145, 146, 157, 158, 159, 489, 569, 599, 609], "bytesio": [4, 5, 769], "textiowrapp": 4, "bufferedread": [4, 148, 157, 158], "bufferedwrit": [4, 148, 159], "bufferedrandom": 4, "tempfil": 4, "temporaryfil": 4, "namedtemporaryfil": 4, "unicod": [4, 130], "handl": [4, 49, 56, 135, 136, 143, 144, 145, 146, 148, 157, 159, 278, 279, 476, 542, 544, 545, 655, 738, 745, 769, 809], "element": [4, 20, 139, 478, 481, 482, 494, 503, 517, 527, 620, 641, 644, 648, 649, 653, 656, 658, 659, 660, 767], "composit": [4, 645], "readlin": [4, 157], "w": [4, 20, 49, 71, 79, 92, 101, 131, 132, 133, 476, 488], "whether": [4, 18, 32, 33, 36, 44, 53, 54, 74, 75, 138, 146, 157, 159, 215, 218, 226, 243, 244, 245, 246, 247, 248, 249, 252, 253, 254, 270, 275, 282, 285, 293, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 330, 333, 341, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 380, 383, 391, 408, 409, 410, 411, 412, 413, 414, 417, 418, 419, 436, 439, 447, 455, 456, 457, 459, 460, 461, 472, 476, 498, 521, 540, 542, 543, 544, 640, 652, 653], "readabl": [4, 130, 135, 136, 139, 140, 141, 142, 750], "writabl": 4, "convers": [4, 136, 524], "impli": [4, 49, 548], "unwrit": 4, "unread": 4, "scheme": [4, 145, 505, 530], "byte": [4, 262, 325, 374, 427, 468], "translat": [4, 134, 137, 140, 145, 265, 267, 269, 279, 429, 432, 804], "behavior": [4, 53, 54, 56, 62, 63, 64, 135, 136, 137, 247, 249, 278, 311, 313, 359, 361, 412, 414, 434, 456, 457, 540, 542, 544, 689, 809], "decod": [4, 136], "effect": [4, 20, 68, 78, 104, 105, 500, 523, 655, 657, 658, 659], "gzip": 4, "bz2": 4, "Will": [4, 52, 69, 176, 179, 184, 501, 509, 525, 535, 632, 660], "decompress": 4, "attempt": [4, 57, 135, 210, 261, 324, 373, 426, 467, 506, 531, 642, 685, 698, 722], "transpar": 4, "noth": [4, 59, 264, 326, 376, 430, 770], "legal": 4, "cannot": [4, 20, 31, 47, 50, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 135, 136, 140, 177, 178, 182, 183, 230, 280, 296, 344, 395, 450, 476, 540, 541, 542, 543, 544, 630, 641, 657, 659, 660, 698, 701, 729, 802], "int": [4, 20, 42, 52, 59, 62, 63, 64, 65, 66, 67, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 106, 107, 110, 131, 137, 138, 143, 158, 186, 195, 205, 209, 220, 224, 231, 237, 238, 242, 250, 252, 253, 254, 256, 258, 262, 277, 287, 291, 297, 303, 304, 314, 315, 316, 317, 319, 321, 325, 335, 339, 345, 351, 352, 363, 364, 365, 366, 368, 370, 374, 385, 389, 396, 402, 403, 407, 415, 417, 418, 419, 421, 423, 427, 431, 432, 441, 445, 451, 453, 458, 459, 460, 461, 463, 465, 468, 472, 474, 475, 488, 504, 528, 540, 542, 543, 544, 545, 546, 548, 580, 620, 630, 641, 645, 649, 650, 652, 653, 656, 658, 659, 660, 666, 686, 690, 692, 701, 707, 716, 717, 729, 744, 750, 769, 781], "inclus": [4, 186, 205, 231, 250, 297, 314, 345, 363, 396, 415, 451, 458, 541], "handler": [4, 148, 177, 179, 182, 184], "textiobas": [4, 148, 157, 158, 159], "resourc": [4, 145], "manag": [4, 5], "closeabl": 4, "garbag": 4, "reflect": [4, 548, 721, 726], "flush": 4, "buffer": [4, 146, 630], "clean": [4, 682, 721], "properli": [4, 140], "NOT": [4, 20, 90], "writer": [4, 61, 130, 131, 132, 133, 134, 136, 137, 139, 140, 141, 142, 143, 144, 145, 146, 148, 173, 176, 179, 184, 212, 268, 327, 377, 433, 469, 511, 537, 643, 743], "kwarg": [5, 6, 57, 61, 68, 102, 106, 107, 110, 111, 157, 159, 170, 177, 178, 179, 181, 182, 183, 184, 210, 212, 261, 266, 267, 268, 324, 327, 373, 377, 426, 431, 432, 433, 467, 469, 506, 511, 531, 537, 620, 642, 643, 722, 743, 770, 802], "signatur": [5, 107], "did": [5, 71, 135, 143, 177, 182, 809], "isn": [5, 31, 47, 50, 56, 82, 144, 157, 159, 186, 481, 482, 660], "neither": [5, 31, 58, 729, 738], "bzh91ai": 5, "sy": 5, "x03": 5, "x89": 5, "x0c": 5, "xa6": 5, "x00": 5, "x01": 5, "xc1": 5, "x108": 5, "x9ah3m": 5, "x1c": 5, "xb7": 5, "x8b": 5, "xb9": 5, "x9c": 5, "h": [5, 20, 71, 84, 95, 96, 97, 135, 142, 144, 686, 687, 692, 695, 726, 727, 728, 731, 732, 741, 742, 744, 806], "xc4": 5, "x86": 5, "nb": 5, "nc": 5, "wrap": [7, 142, 144, 792], "cigar": [7, 20], "empti": [7, 32, 53, 132, 135, 138, 142, 174, 175, 239, 247, 305, 311, 353, 359, 404, 412, 454, 456, 476, 502, 526, 657, 687, 737, 748, 802], "target_begin": 7, "query_begin": 7, "read_sequ": 7, "ssw": [7, 20, 68], "reference_sequ": 7, "ins": [7, 20, 31, 148, 160, 186, 195, 213, 269, 280, 328, 378, 434, 490, 513, 550, 560, 570, 580, 590, 600, 610, 620, 632, 666, 751, 770, 781, 791], "hash": [12, 25, 152, 164, 554, 564, 574, 584, 594, 604, 614, 624, 636, 673, 757, 775, 786, 796], "inidic": [18, 20], "els": [18, 19, 140, 146, 158, 177, 182, 214, 264, 281, 326, 329, 376, 379, 430, 434, 435, 646, 687], "bool": [18, 20, 32, 33, 36, 44, 47, 50, 52, 53, 54, 55, 59, 62, 63, 64, 74, 75, 80, 102, 104, 105, 106, 107, 110, 157, 158, 159, 177, 182, 186, 187, 192, 198, 203, 205, 207, 211, 213, 214, 215, 218, 220, 226, 229, 230, 232, 234, 237, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 251, 252, 253, 254, 256, 257, 258, 259, 260, 262, 264, 270, 275, 281, 282, 285, 287, 293, 296, 298, 300, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 317, 319, 320, 321, 322, 323, 325, 326, 328, 329, 330, 333, 335, 341, 344, 346, 348, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 364, 365, 366, 368, 369, 370, 371, 372, 374, 375, 376, 378, 379, 380, 383, 385, 391, 394, 395, 397, 399, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 421, 422, 423, 424, 425, 427, 430, 434, 435, 436, 439, 441, 447, 450, 453, 454, 455, 456, 457, 459, 460, 461, 463, 464, 465, 466, 468, 472, 476, 481, 482, 490, 491, 492, 498, 500, 502, 514, 515, 521, 523, 526, 529, 542, 545, 548, 580, 590, 649, 650, 652, 653, 657, 658, 660, 683, 688, 689, 692, 706, 708, 709, 710, 712, 715, 718, 719, 720, 723, 735, 737, 738, 745, 749, 770], "alig": 19, "stripe": [20, 68], "band": 20, "instanti": [20, 134, 146, 280, 809], "callabl": [20, 31, 47, 50, 58, 102, 106, 107, 110, 503, 527], "reus": [20, 654], "upper": [20, 85, 86, 135, 142, 186, 195, 206, 208, 527, 534, 542], "lowercas": [20, 134, 135, 136, 137, 143, 213, 230, 280, 296, 328, 344, 378, 395, 434, 450], "q": [20, 85, 132, 645, 646], "l": [20, 85, 86, 101, 134, 136, 145, 278, 488, 542, 631, 644, 645, 652, 737], "m": [20, 65, 71, 80, 104, 105, 131, 132, 134, 136, 142, 145, 269, 270, 278, 541, 548, 641, 644, 645, 651, 652, 654, 657, 728, 745], "y": [20, 71, 82, 136, 143, 483, 485, 486, 542, 545, 548, 631, 641, 645, 646, 651, 652, 657, 690, 736], "v": [20, 104, 105, 218, 226, 285, 293, 333, 341, 383, 391, 439, 447, 473, 488, 657, 658, 736], "z": [20, 56, 79, 545, 641, 690, 736], "x": [20, 82, 96, 136, 143, 280, 473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 542, 545, 548, 631, 632, 641, 644, 645, 646, 652, 655, 658, 659, 690, 700, 721, 724, 736, 740, 745, 769, 809], "gap_open_penalti": [20, 62, 63, 64, 65, 66, 67], "gap_extend_penalti": [20, 62, 63, 64, 65, 66, 67], "score_s": 20, "estim": [20, 71, 74, 75, 79, 81, 83, 85, 86, 87, 92, 96, 649, 657, 658, 659], "best": [20, 62, 63, 64, 65, 66, 67, 86, 87, 473, 541, 644, 747], "255": [20, 645], "mask_length": 20, "suboptim": 20, "len": [20, 31, 42, 224, 291, 339, 389, 445, 546, 659, 667, 668, 691, 694, 732, 744, 809], "concern": [20, 139], "detail": [20, 55, 56, 68, 107, 109, 110, 134, 135, 136, 137, 138, 142, 143, 144, 145, 146, 279, 434, 494, 517, 541, 545, 641, 644, 645, 652, 802, 807], "locat": [20, 57, 61, 134, 140, 144, 171, 172, 173, 186, 210, 212, 237, 238, 261, 268, 303, 304, 324, 327, 351, 352, 373, 377, 402, 403, 426, 433, 453, 467, 469, 506, 511, 531, 537, 642, 643, 722, 726, 743, 748, 808], "heurist": [20, 544, 650], "found": [20, 132, 134, 135, 136, 137, 140, 142, 144, 177, 179, 182, 184, 488, 502, 526, 541, 542, 544, 659, 688, 698, 699, 700, 701, 711, 713, 729, 744], "largest": [20, 101], "maxim": [20, 541, 645], "sw": [20, 657], "pick": [20, 658], "belong": [20, 72, 138, 476, 540, 543, 544], "partial": [20, 208], "librari": [20, 68, 104, 105, 135, 801, 802], "mask": 20, "loci": 20, "nearbi": 20, "unmask": 20, "15": [20, 64, 67, 85, 132, 141, 549, 655, 658, 659, 734], "mask_auto": 20, "score_onli": 20, "begin": [20, 134, 135, 136, 137, 141, 144, 158, 186, 278, 659], "babp": 20, "overrid": [20, 63, 66, 148, 157, 158, 159, 177, 182, 721, 809], "score_filt": 20, "distance_filt": 20, "override_skip_babp": 20, "highest": [20, 140], "preced": [20, 133, 140, 142], "save": [20, 195, 490, 569, 599, 609, 718], "computation": 20, "filter": [20, 49, 68, 143, 233, 299, 347, 398, 545, 737, 809], "overridden": [20, 31, 137, 745], "regardless": [20, 48, 55, 56, 144, 278, 546], "argument": [20, 31, 57, 58, 61, 68, 139, 157, 158, 159, 170, 177, 178, 179, 181, 182, 183, 184, 210, 212, 255, 261, 266, 267, 268, 318, 324, 327, 367, 373, 377, 420, 426, 431, 432, 433, 462, 467, 469, 474, 476, 503, 506, 511, 527, 531, 537, 546, 642, 643, 722, 743, 770, 791], "substitution_matrix": [20, 62, 63, 64, 65, 66, 67], "suppli": [20, 131, 135, 143, 177, 182, 235, 301, 349, 400, 452, 470, 659, 695], "match_scor": [20, 63, 66, 69], "mismatch_scor": [20, 63, 66, 69], "subtract": [20, 620], "2d": [20, 62, 63, 64, 65, 66, 67, 102, 106, 107, 110, 474, 475, 476, 483, 546, 646, 653], "substitut": [20, 62, 63, 64, 65, 66, 67, 69, 139, 473, 747], "charact": [20, 36, 48, 49, 52, 56, 69, 131, 132, 133, 135, 136, 139, 140, 141, 142, 143, 144, 145, 146, 213, 218, 220, 222, 224, 226, 227, 228, 232, 233, 234, 237, 239, 240, 241, 242, 243, 244, 245, 248, 255, 260, 262, 269, 278, 280, 285, 287, 289, 291, 293, 294, 295, 298, 299, 300, 303, 305, 306, 307, 308, 309, 312, 318, 323, 325, 328, 333, 335, 337, 339, 341, 342, 343, 346, 347, 348, 351, 353, 354, 355, 356, 357, 360, 362, 367, 372, 374, 375, 378, 383, 385, 387, 389, 391, 392, 393, 397, 398, 399, 402, 404, 405, 406, 407, 408, 409, 410, 413, 420, 425, 427, 434, 439, 441, 443, 445, 447, 448, 449, 454, 462, 468, 471, 804], "entir": [20, 31, 76, 213, 328, 378, 434], "combin": [20, 31, 47, 50, 137, 541, 632, 645], "enumer": 20, "suppress_sequ": [20, 68], "zero_index": [20, 68], "wrapper": [20, 68, 86, 87, 748], "meaning": [20, 47, 50, 56, 650, 804], "zhao": [20, 68], "mengyao": [20, 68], "wan": [20, 68], "ping": [20, 68], "lee": [20, 68, 71], "erik": [20, 68], "garrison": [20, 68], "gabor": [20, 68], "marth": [20, 68], "simd": [20, 68], "applic": [20, 49, 62, 68, 690, 809], "plo": [20, 68, 86, 87], "ONE": [20, 68], "web": [20, 62, 65, 68, 133, 145, 540, 541, 542, 543, 544], "juli": [20, 68], "2014": [20, 68, 131, 142, 488], "http": [20, 49, 62, 63, 64, 65, 66, 67, 68, 69, 71, 72, 73, 75, 76, 81, 85, 89, 95, 97, 98, 99, 101, 104, 105, 107, 130, 131, 132, 133, 134, 135, 136, 137, 138, 140, 142, 143, 144, 145, 269, 276, 277, 488, 490, 507, 513, 524, 532, 540, 541, 542, 543, 544, 641, 744, 745, 769], "www": [20, 62, 65, 68, 72, 73, 81, 85, 89, 97, 98, 99, 101, 107, 130, 131, 132, 133, 134, 135, 136, 137, 142, 145, 269, 276, 277, 541], "ploson": [20, 68], "org": [20, 68, 95, 107, 130, 135, 136, 137, 142, 144, 488, 490, 507, 513, 524, 532, 540, 541, 542, 543, 544, 641, 745], "articl": [20, 68, 133], "info": [20, 68, 195, 549, 600], "doi": [20, 68, 134, 136, 488], "1371": [20, 68], "journal": [20, 68, 71, 74, 95, 137, 476, 540], "pone": [20, 68], "0082138": [20, 68], "alignmentstructur": 21, "positional_metadata": [31, 36, 48, 54, 55, 56, 135, 144, 213, 218, 229, 230, 233, 249, 255, 262, 263, 280, 285, 296, 299, 313, 318, 325, 328, 333, 344, 347, 361, 367, 374, 378, 383, 394, 395, 398, 414, 420, 427, 428, 434, 439, 450, 457, 462, 468, 804], "tabular": [31, 131, 132, 145], "grammaredsequ": [31, 40, 45, 47, 50, 51, 62, 65, 133, 135, 142, 144, 213, 233, 236, 328, 347, 350, 378, 398, 401], "shallow": [31, 34, 195, 196, 216, 283, 331, 381, 434, 437], "copi": [31, 34, 35, 135, 142, 144, 195, 196, 197, 216, 217, 262, 283, 284, 325, 331, 332, 374, 381, 382, 427, 434, 437, 438, 468, 490, 507, 509, 532, 535, 653, 660, 667, 668, 694, 726, 727, 733, 741, 742, 764, 765, 766], "consum": [31, 50, 159, 213, 269, 328, 378, 434], "abl": [31, 50, 107, 213, 328, 378, 434, 476, 658, 695], "directli": [31, 47, 50, 213, 269, 328, 378, 434, 470, 548, 770, 807, 809], "constructor": [31, 47, 50, 58, 133, 135, 136, 137, 142, 143, 144, 158, 170, 181, 213, 255, 269, 318, 328, 367, 378, 420, 434, 462, 546], "label": [31, 33, 36, 38, 47, 50, 51, 56, 58, 59, 60, 133, 135, 137, 142, 144, 488, 489, 505, 530, 540, 541, 543, 544, 545, 632, 641, 685, 749], "content": [31, 48, 134, 135, 136, 137, 138, 140, 146, 157, 158, 159, 213, 229, 230, 233, 236, 263, 265, 296, 299, 302, 344, 347, 350, 378, 394, 395, 398, 401, 428, 429, 450, 804], "hashabl": [31, 33, 630, 791], "both": [31, 48, 56, 58, 69, 74, 75, 130, 131, 132, 135, 136, 142, 145, 177, 182, 209, 278, 479, 480, 481, 482, 489, 503, 527, 529, 534, 541, 542, 543, 544, 650, 689, 690, 729, 738, 802, 804], "typeerror": [31, 47, 50, 56, 102, 106, 177, 178, 182, 183, 215, 230, 231, 235, 239, 250, 251, 256, 257, 258, 259, 282, 296, 297, 301, 305, 314, 319, 320, 321, 322, 330, 344, 345, 349, 353, 363, 368, 369, 370, 371, 380, 395, 396, 400, 404, 415, 416, 421, 422, 423, 424, 436, 450, 451, 452, 454, 458, 463, 464, 465, 466, 471, 472, 541, 542, 544, 658, 659, 660, 687], "exactli": [31, 47, 50, 55, 65, 66, 67, 135, 136, 142, 146, 218, 226, 270, 285, 293, 333, 341, 383, 391, 439, 447, 641, 683], "reassign_index": [31, 47, 50, 59, 60, 142], "nor": [31, 47, 50, 58, 142, 490, 729], "rangeindex": [31, 47, 50, 58, 142], "stop": [31, 47, 50, 58, 71, 142, 231, 250, 266, 267, 269, 278, 279, 297, 314, 328, 345, 362, 363, 396, 415, 431, 432, 451, 458, 685, 771, 804], "four": [31, 136, 144, 476, 641], "acgt": [31, 47, 50, 51, 53, 54, 60, 214, 218, 226, 230, 241, 242, 247, 249, 251, 255, 281, 285, 293, 296, 311, 313, 318, 329, 333, 341, 344, 359, 361, 367, 379, 383, 391, 395, 406, 407, 412, 414, 416, 420, 434, 435, 439, 447, 450, 456, 457, 462], "ag": [31, 47, 50, 52, 489, 657, 658], "wasn": [31, 136], "non": [31, 74, 82, 131, 133, 134, 138, 186, 248, 260, 312, 323, 360, 372, 413, 425, 474, 475, 476, 484, 513, 540, 543, 544, 548, 644, 650, 655, 689, 690, 695], "seq3": [31, 50, 135, 142], "boolean": [32, 105, 135, 138, 143, 213, 220, 232, 234, 237, 240, 252, 255, 257, 259, 260, 262, 287, 298, 300, 303, 306, 315, 318, 320, 322, 323, 325, 328, 335, 346, 348, 351, 354, 364, 367, 369, 371, 372, 374, 375, 378, 385, 397, 399, 402, 405, 417, 420, 422, 424, 425, 427, 434, 441, 459, 462, 464, 466, 468, 527], "experiment": [32, 33, 34, 35, 36, 38, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 55, 58, 60, 62, 63, 64, 65, 66, 67, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 131, 132, 134, 137, 138, 144, 145, 187, 192, 194, 196, 197, 198, 203, 205, 206, 207, 208, 209, 211, 230, 235, 239, 246, 262, 296, 301, 305, 310, 325, 344, 349, 353, 358, 374, 395, 400, 404, 411, 427, 450, 452, 454, 455, 468, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 494, 498, 499, 500, 501, 502, 503, 504, 505, 507, 508, 509, 510, 514, 515, 517, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 535, 536, 540, 541, 542, 543, 544, 545, 546, 548, 559, 569, 579, 589, 599, 609, 619, 629, 630, 640, 641, 644, 645, 646, 647, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 667, 668, 671, 674, 676, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 744, 745, 748, 749, 750, 767, 768, 769, 771, 780, 782, 792], "OR": 32, "acg": [32, 33, 34, 35, 36, 40, 42, 45, 52, 55, 56, 58, 59, 143, 144, 250, 253, 314, 316, 363, 365, 415, 418, 458, 460], "No": [32, 75, 131, 132, 134, 143, 145, 195, 228, 295, 343, 393, 449, 542], "l1": 33, "l2": 33, "l3": 33, "__deepcopy__": [34, 196], "msa_copi": [34, 35], "memo": [35, 197, 217, 284, 332, 382, 438], "__copy__": [35, 197], "deepcopi": [35, 667, 668, 691, 741, 742], "against": [36, 44, 62, 65, 136, 187, 192, 198, 203, 218, 226, 270, 275, 285, 293, 333, 341, 383, 391, 439, 447, 476, 548, 688], "slice": [38, 220, 237, 238, 252, 262, 287, 303, 304, 315, 325, 335, 351, 352, 364, 374, 385, 402, 403, 417, 427, 441, 453, 459, 468, 489, 494, 517, 671, 804], "axi": [38, 52, 82, 96, 139, 580, 620, 632, 641, 649, 656, 659, 749], "iloc": 38, "pleas": [38, 57, 61, 135, 143, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 506, 511, 531, 537, 642, 643, 722, 743], "loc": [38, 434, 476, 658], "restrict": [38, 80, 104, 105, 142, 804], "over": [40, 45, 55, 107, 135, 136, 143, 144, 222, 227, 289, 294, 337, 342, 387, 392, 443, 448, 546, 559, 579, 589, 619, 629, 655, 656, 674, 712, 715, 718, 719, 720, 732, 735, 738, 806], "yield": [40, 45, 55, 135, 209, 222, 227, 236, 237, 238, 252, 253, 267, 279, 289, 294, 302, 303, 304, 315, 316, 337, 342, 350, 351, 352, 364, 365, 387, 392, 401, 402, 403, 417, 418, 432, 443, 448, 453, 459, 460, 544, 700, 712, 715, 718, 719, 720, 729, 735, 737, 738, 771, 802, 809], "1st": [42, 610, 750], "dimens": [42, 141, 142, 474, 478, 481, 482, 499, 522, 544, 632, 640, 641, 650, 651], "equival": [42, 78, 136, 216, 217, 239, 241, 262, 263, 267, 279, 283, 284, 305, 325, 331, 332, 353, 374, 381, 382, 404, 406, 427, 428, 432, 437, 438, 454, 468, 471, 473, 476, 500, 510, 523, 536, 542, 804], "shape": [42, 51, 130, 141, 492, 515, 542, 646, 649, 660], "inequ": [44, 192, 203, 226, 275, 293, 341, 391, 447, 513, 650], "__eq__": [44, 203, 498, 521], "revers": [45, 55, 59, 146, 227, 229, 251, 263, 267, 278, 279, 294, 342, 392, 394, 416, 428, 429, 432, 448, 540, 544, 729, 804, 809], "reset_index": [47, 50], "recomput": [47, 50, 56], "reset": [47, 50, 58], "acga": [47, 50, 218, 226, 285, 293, 333, 341, 383, 391, 439, 447], "major": [48, 473, 534, 744], "ti": [48, 72, 744], "broken": [48, 744], "manner": [48, 135, 142, 220, 233, 287, 299, 335, 347, 385, 398, 441, 542, 650], "default_gap_char": [48, 49, 56, 280], "distinct": [48, 93, 471, 489], "AT": [48, 135, 136, 142], "tt": [48, 252, 315, 364, 417, 459], "cg": [48, 262, 325, 374, 427, 434, 468], "degener": [48, 49, 134, 135, 136, 137, 138, 213, 229, 230, 232, 233, 236, 241, 242, 243, 244, 248, 260, 263, 264, 265, 266, 267, 269, 278, 279, 280, 296, 298, 299, 302, 307, 308, 312, 323, 326, 328, 344, 346, 347, 350, 355, 356, 360, 372, 376, 378, 394, 395, 397, 398, 401, 406, 407, 408, 409, 413, 425, 428, 429, 430, 431, 432, 450, 804], "definit": [48, 134, 135, 136, 137, 138, 145, 213, 229, 230, 233, 234, 236, 243, 244, 248, 260, 263, 264, 265, 266, 267, 269, 278, 279, 280, 296, 299, 300, 302, 307, 308, 312, 323, 326, 328, 344, 347, 348, 350, 355, 356, 360, 372, 376, 378, 394, 395, 398, 399, 401, 408, 409, 413, 425, 428, 429, 430, 431, 432, 450, 745, 804, 807, 808, 809], "gc": [48, 134, 135, 136, 137, 138, 145, 213, 229, 230, 233, 236, 242, 263, 265, 270, 279, 296, 299, 302, 344, 347, 350, 378, 394, 395, 398, 401, 407, 428, 429, 450, 804], "33": [48, 80, 104, 105, 136, 236, 302, 350, 401, 541, 544, 655, 658, 804], "metric": [49, 71, 80, 81, 102, 103, 104, 105, 106, 107, 108, 109, 110, 136, 235, 301, 349, 400, 452, 472, 503, 513, 527, 666, 804], "inverse_shannon_uncertainti": 49, "degenerate_mod": 49, "gap_mod": 49, "nan": [49, 52, 56, 87, 131, 230, 239, 296, 305, 344, 353, 395, 404, 450, 454, 471, 472, 540, 541, 542, 543, 544, 545, 548, 641, 657, 658, 736, 748], "larger": [49, 658], "assign": [49, 58, 69, 102, 106, 142, 187, 262, 325, 374, 427, 434, 468, 476, 540, 543, 544, 630, 659, 684, 685, 686], "remov": [49, 68, 69, 110, 135, 139, 142, 207, 233, 248, 260, 299, 312, 323, 347, 360, 372, 398, 413, 425, 682, 697, 717, 721, 724, 728, 739, 804, 807], "unknown": [49, 86, 87, 129, 137, 186, 237, 303, 351, 402, 630], "compos": [49, 136, 143], "tryptophan": 49, "highli": 49, "alanin": 49, "glycin": 49, "recod": 49, "awar": [49, 434, 807], "simpli": [49, 56, 146, 269, 507, 532, 650, 655, 698, 809], "minu": [49, 137, 144, 610], "uncertainti": [49, 548], "invers": [49, 475, 480, 482, 486], "higher": [49, 476, 781], "symbol": [49, 135], "valdar": 49, "residu": [49, 652], "2002": [49, 101, 132, 135], "schneider": 49, "pitfal": 49, "theori": 49, "websit": 49, "ca": [49, 141, 632, 645, 652], "2015": [49, 473, 476], "ncifcrf": 49, "gov": [49, 63, 64, 66, 67, 131, 132, 135, 137, 143, 145, 269, 276, 277], "glossari": 49, "html": [49, 72, 73, 76, 81, 85, 89, 97, 98, 99, 101, 131, 133, 135, 137, 140, 142, 144, 186, 490, 507, 513, 524, 532, 540, 541, 542, 543, 544, 641, 744, 745], "shannon_entropi": 49, "classmethod": [51, 57, 206, 210, 230, 261, 277, 296, 324, 344, 373, 395, 426, 450, 467, 503, 506, 527, 531, 642, 702, 703, 704, 722], "construct": [51, 60, 137, 145, 186, 187, 489, 631, 693, 703, 704, 745, 801, 802, 806], "to_dict": 51, "across": [52, 135, 136, 142, 195, 476, 542, 658, 744], "vector": [52, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 139, 232, 234, 237, 240, 252, 255, 257, 259, 260, 262, 269, 298, 300, 303, 306, 315, 318, 320, 322, 323, 325, 346, 348, 351, 354, 364, 367, 369, 371, 372, 374, 375, 397, 399, 402, 405, 417, 420, 422, 424, 425, 427, 459, 462, 464, 466, 468, 473, 474, 475, 476, 481, 482, 485, 486, 487, 489, 490, 494, 513, 517, 540, 543, 544, 590, 645, 659, 660, 736], "1d": [52, 102, 213, 215, 220, 231, 232, 234, 235, 237, 238, 240, 250, 251, 252, 256, 257, 258, 259, 260, 262, 282, 287, 297, 298, 300, 301, 303, 304, 306, 314, 315, 319, 320, 321, 322, 323, 325, 328, 330, 335, 345, 346, 348, 349, 351, 352, 354, 363, 364, 368, 369, 370, 371, 372, 374, 375, 378, 380, 385, 396, 397, 399, 400, 402, 403, 405, 415, 416, 417, 421, 422, 423, 424, 425, 427, 434, 436, 441, 451, 452, 453, 458, 459, 463, 464, 465, 466, 468, 475, 476], "ndarrai": [52, 106, 213, 215, 231, 232, 234, 235, 240, 250, 251, 256, 257, 258, 259, 260, 282, 297, 298, 300, 301, 306, 314, 319, 320, 321, 322, 323, 328, 330, 345, 346, 348, 349, 354, 363, 368, 369, 370, 371, 372, 375, 378, 380, 396, 397, 399, 400, 405, 415, 416, 421, 422, 423, 424, 425, 434, 436, 451, 452, 458, 463, 464, 465, 466, 474, 475, 477, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 494, 507, 517, 524, 529, 532, 546, 548, 653, 660, 702], "demonstr": [53, 54, 146, 247, 249, 311, 313, 359, 361, 412, 414, 456, 457], "rang": [54, 76, 85, 105, 136, 137, 229, 233, 239, 249, 252, 263, 299, 305, 313, 315, 347, 353, 361, 364, 394, 398, 404, 414, 417, 428, 454, 457, 459, 540, 541, 641, 659, 707, 809], "qualiti": [54, 135, 143, 213, 218, 229, 233, 249, 263, 285, 299, 313, 328, 333, 347, 361, 378, 383, 394, 398, 414, 428, 434, 439, 457, 641, 804], "ignore_metadata": 55, "improv": [55, 140, 142, 213, 328, 378, 527], "__iter__": 55, "__reversed__": 55, "concat": [55, 56], "artifact": [55, 62, 63, 64], "real": [55, 135, 136, 143, 473, 474, 475, 479, 480, 481, 482, 485, 486, 487], "concaten": [55, 144, 206, 230, 296, 344, 395, 450], "outer": [55, 56, 230, 296, 344, 395, 450], "join": [55, 131, 132, 136, 143, 144, 145, 230, 296, 344, 395, 450, 737, 744, 745], "aa": [55, 135, 137, 142, 269], "gt": 55, "strict": [56, 142, 230, 296, 344, 395, 450, 502, 526, 542, 545, 548], "horizont": 56, "control": [56, 135, 540, 542, 543, 549, 652, 655, 657, 658, 659], "dure": [56, 135, 187, 230, 296, 344, 395, 450, 544, 768], "inner": [56, 140, 230, 296, 344, 395, 450], "left": [56, 71, 97, 140, 474, 475, 479, 483, 485, 486, 487, 488, 685, 707, 748, 749, 806], "unshar": 56, "pad": [56, 142, 230, 296, 344, 395, 450], "guarante": [56, 87, 213, 236, 302, 328, 350, 378, 401, 490, 546, 695], "duplic": [56, 110, 136, 144, 208, 502, 526, 661, 767], "likewis": [56, 144], "per": [56, 131, 132, 143, 144, 213, 328, 378, 434, 545, 548, 630, 652, 658, 659, 683, 769], "retain": [56, 230, 262, 296, 325, 344, 374, 395, 427, 450, 468, 502, 526, 630], "reproduc": [56, 80, 104, 105], "msa1": 56, "msa2": 56, "unnecessari": 56, "By": [56, 85, 102, 106, 135, 137, 474, 475, 476, 544, 649, 650, 653, 734, 745, 771], "col1": 56, "col2": 56, "col3": 56, "o": [56, 57, 61, 134, 135, 136, 143, 144, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 506, 511, 531, 537, 642, 643, 722, 743, 801, 808], "format": [57, 61, 112, 113, 114, 115, 116, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 160, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 210, 212, 261, 264, 268, 269, 276, 324, 326, 327, 373, 376, 377, 426, 430, 433, 467, 469, 490, 506, 507, 511, 513, 524, 529, 531, 532, 537, 569, 599, 609, 642, 643, 683, 703, 722, 743, 745, 806, 807], "registri": [57, 61, 135, 136, 143, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 506, 511, 531, 537, 642, 643, 722, 743, 802], "clustal": [57, 61, 113, 802], "fasta": [57, 61, 115, 136, 138, 143, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 802], "fastq": [57, 61, 116, 143, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 802], "phylip": [57, 61, 125, 135, 140, 744, 745, 802, 806], "stockholm": [57, 61, 128], "understood": [57, 61, 140, 177, 178, 179, 182, 183, 184, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 506, 511, 531, 537, 642, 643, 722, 743], "respons": [57, 61, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 506, 511, 531, 537, 569, 599, 609, 631, 642, 643, 645, 652, 722, 743], "caller": [57, 61, 210, 212, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469, 506, 511, 531, 537, 569, 599, 609, 642, 643, 722, 743], "reader": [57, 130, 131, 132, 133, 134, 136, 139, 140, 141, 142, 143, 144, 145, 146, 148, 158, 171, 176, 177, 178, 182, 183, 210, 261, 324, 373, 426, 467, 506, 531, 642, 722], "reassign": [58, 142, 542], "remain": [58, 135], "ccg": 58, "altern": [58, 145, 146, 278, 473, 503, 527, 542, 544, 545, 548, 650, 655, 703, 729], "ascend": [59, 211], "multiindex": [59, 534], "descend": [59, 211, 666, 695, 707, 715, 724, 731, 732, 735, 738, 806], "sort_index": 59, "passthrough": 59, "intern": [59, 137, 140, 683, 685, 687, 693, 695, 698, 707, 716, 721, 727, 737, 739, 740, 802, 806], "from_dict": [60, 540, 544, 549, 641, 657, 658], "regist": [61, 146, 147, 148, 157, 158, 159, 170, 176, 178, 181, 183, 212, 268, 327, 377, 433, 469, 511, 537, 643, 743], "penalize_terminal_gap": [62, 63, 64], "unalign": [62, 63, 64, 65, 66, 67, 68, 804], "substract": [62, 63, 64, 65, 66, 67, 648], "typic": [62, 63, 64, 65, 66, 67, 69, 135, 136, 143, 144, 186, 195, 650, 685, 807], "continu": [62, 63, 64, 631], "penal": [62, 63, 64], "irrelev": [62, 63, 64], "nearli": [62, 63, 64], "tupl": [62, 63, 64, 65, 66, 67, 68, 75, 79, 86, 92, 94, 110, 138, 158, 186, 205, 209, 266, 267, 431, 432, 494, 517, 704, 705, 736, 737], "local_pairwise_align": [62, 63, 64, 66, 67], "local_pairwise_align_nucleotid": [62, 63, 64, 65, 67], "global_pairwise_align_protein": [62, 63, 65, 66, 67], "global_pairwise_align_nucelotid": [62, 64, 65, 66, 67], "slightli": [62, 85, 544], "basic": [62, 82, 131, 132, 548, 632, 641], "valid": [62, 65, 80, 102, 104, 105, 106, 107, 110, 135, 136, 140, 142, 213, 280, 328, 378, 490, 512, 513, 527, 538, 804, 809], "emboss": [62, 65], "needl": 62, "server": [62, 63, 64, 65, 66, 67, 145], "amino": [62, 64, 67, 134, 135, 139, 269, 278], "acid": [62, 64, 67, 134, 135, 136, 139, 142, 145, 213, 269, 278, 280, 328, 378, 434], "sb": 62, "cd": [62, 134, 137, 278], "j": [62, 64, 65, 67, 80, 84, 92, 95, 104, 105, 130, 131, 132, 135, 136, 137, 144, 145, 473, 481, 482, 483, 484, 488, 500, 510, 523, 536, 542, 543, 544, 645, 695, 744], "mol": [62, 65, 131, 132, 134, 137], "biol": [62, 65, 80, 84, 95, 131, 132, 134, 137], "1970": [62, 72], "mar": [62, 65, 84, 95], "48": [62, 89], "443": 62, "53": [62, 141, 688], "ebi": [62, 65, 134, 137, 186], "uk": [62, 65, 84, 95, 134, 137, 186, 473], "psa": [62, 65], "emboss_needl": 62, "global_pairwise_align": [63, 64, 65, 66, 67], "deriv": [63, 64, 66, 67, 134, 252, 315, 364, 417, 434, 459, 481, 482, 488, 658, 745], "ncbi": [63, 64, 66, 67, 131, 132, 135, 137, 145, 266, 267, 269, 270, 276, 277, 278, 279, 431, 432, 703, 804], "blast": [63, 64, 66, 67, 135], "nlm": [63, 64, 66, 67, 131, 132, 135, 137, 145, 269, 276, 277], "nih": [63, 64, 66, 67, 131, 132, 135, 137, 143, 145, 269, 276, 277], "cgi": [63, 64, 66, 67, 269, 276, 277], "blosum": [64, 67], "henikoff": [64, 67], "proc": [64, 67], "natl": [64, 67], "acad": [64, 67], "sci": [64, 67, 132, 488], "nov": [64, 67, 134, 641], "1992": [64, 67, 71, 80, 489], "89": [64, 67, 137], "22": [64, 67, 141, 145, 476, 655, 804], "10915": [64, 67], "10919": [64, 67], "water": 65, "identif": 65, "molecular": [65, 548, 685, 745], "subsequ": [65, 133, 135, 215, 222, 227, 231, 250, 252, 282, 289, 294, 297, 314, 315, 330, 337, 342, 345, 363, 364, 380, 387, 392, 396, 415, 417, 434, 436, 443, 448, 451, 458, 459, 770, 804], "tf": 65, "1981": [65, 688, 744], "147": 65, "195": 65, "emboss_wat": 65, "sequence1": 68, "sequence2": 68, "deprec": [68, 69, 110, 248, 260, 312, 323, 360, 372, 413, 425], "favor": 68, "biocor": [68, 69, 104, 105, 134, 641], "1814": 68, "acgtu": 69, "substitutionmatrix": 69, "track": [69, 134], "progress": [69, 541], "161": [69, 131], "rich": [70, 74, 88, 91], "domin": [70, 72, 78, 89, 98, 99, 101], "interv": [70, 75, 79, 86, 134, 137, 138, 195, 196, 197, 198, 203, 205, 206, 207, 208, 209, 211, 213, 218, 229, 246, 265, 285, 310, 328, 333, 358, 378, 383, 394, 411, 434, 439, 455, 656], "suffix": 70, "_ci": 70, "rare_threshold": 71, "coverag": [71, 79, 83, 87, 131, 132], "s_": [71, 73, 74, 92, 99], "frac": [71, 72, 73, 74, 78, 79, 81, 82, 83, 84, 88, 89, 90, 91, 92, 95, 96, 99, 101, 474, 475, 479, 483, 484, 485, 486, 487, 488, 542, 652], "rare": [71, 659, 807], "c_": 71, "f_1": [71, 74, 79, 83, 96], "gamma": 71, "2_": 71, "pool": 71, "coeffici": [71, 541, 542, 548, 632, 652, 655, 690], "variat": [71, 542, 645], "sum": [71, 73, 76, 79, 83, 89, 90, 92, 98, 206, 239, 305, 353, 404, 454, 475, 479, 480, 483, 659, 660, 680, 736, 769], "_": [71, 133, 135, 136, 140, 144, 206, 218, 285, 333, 383, 439, 489, 542], "f_i": 71, "n_": [71, 72], "threshold": [71, 748], "fewer": [71, 142, 658, 659], "introduc": [71, 82, 133, 135, 473], "manual": [71, 72, 73, 75, 81, 85, 89, 90, 97, 101, 744, 745], "zero": [71, 110, 130, 186, 205, 239, 305, 353, 404, 454, 473, 476, 478, 484, 490, 540, 541, 542, 543, 544, 545, 548, 644, 650, 653, 658, 660, 745, 809], "environ": [71, 104, 105, 473, 645], "chao": [71, 74], "american": 71, "87": [71, 141], "210": 71, "217": 71, "ma": 71, "yang": 71, "1993": [71, 540, 541], "rule": [71, 135, 142, 144, 744], "recaptur": 71, "unequ": [71, 270], "rate": [71, 655], "biometrika": 71, "80": [71, 135, 631, 658, 659, 685, 740, 809], "193": 71, "201": 71, "viceroi": [71, 75], "eeb": [71, 75], "uconn": [71, 75], "edu": [71, 75, 99, 133, 135, 140, 142, 744, 745], "hwang": 71, "chen": 71, "kuo": 71, "2000": [71, 659], "commun": [71, 76, 78, 80, 97, 98, 101, 104, 105, 489, 540, 541, 543, 544, 641, 645, 652, 659], "statistica": [71, 82], "sinica": 71, "227": [71, 135], "246": [71, 101, 144], "berger": 72, "parker": 72, "fraction": [72, 472, 659, 689, 806], "sdr": [72, 73, 81, 85, 89, 90, 97, 101], "iv": [72, 73, 81, 85, 89, 90, 97, 101], "onlin": [72, 73, 81, 85, 89, 90, 97, 101, 136], "pisc": [72, 73, 81, 85, 89, 97, 98, 101], "conserv": [72, 73, 80, 81, 85, 86, 89, 97, 98, 101, 133, 230, 296, 344, 395, 450, 476, 489], "sdrhelp": [72, 73, 81, 85, 89, 97, 98, 101], "brillouin": 73, "hb": 73, "ln": [73, 81, 88, 95, 474, 476, 479, 483, 488], "n_i": [73, 89, 90], "th": [73, 89, 90, 101], "bias_correct": [74, 75], "bia": [74, 75], "equat": [74, 75, 81, 92, 542], "uncorrect": [74, 75], "bias": [74, 75], "chao1_ci": 74, "2f_2": 74, "f_2": [74, 79], "1984": [74, 213, 280, 328, 378, 434], "parametr": [74, 473, 476, 540, 543], "popul": [74, 143, 144, 255, 318, 367, 420, 462, 473, 546, 655, 659], "scandinavian": [74, 476], "265": 74, "270": 74, "zscore": 75, "96": [75, 138], "chao1": 75, "scalar": [75, 97, 487, 489, 494, 517, 641], "95": [75, 79, 80, 86, 136, 141, 685], "lower_bound": [75, 79, 86], "upper_bound": [75, 79, 86, 195, 206], "presenc": [75, 270, 278, 659], "absenc": [75, 659], "specif": [75, 80, 85, 102, 104, 105, 106, 107, 110, 146, 209, 434, 548, 580, 658, 659, 729, 802, 807, 808, 809], "p_i": [76, 78, 97, 98], "proport": [76, 78, 82, 92, 97, 98, 141, 242, 407, 471, 473, 474, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 540, 542, 543, 549, 580, 620, 632, 644, 650, 652, 688], "simpson": [76, 99], "folk": [76, 98], "uio": [76, 98], "ohamm": [76, 98], "past": [76, 98], "occurr": [77, 100, 231, 243, 244, 245, 248, 297, 307, 308, 309, 312, 345, 355, 356, 357, 360, 362, 396, 408, 409, 410, 413, 451], "ens_pi": 78, "ens_": 78, "pie": 78, "sum_": [78, 82, 97, 473, 475, 485, 486, 487, 542], "chase": 78, "knight": [78, 80, 104, 105, 641], "scale": [78, 541, 631, 644, 645, 646, 652], "driver": 78, "biodivers": 78, "standardis": 78, "ecologi": [78, 89, 101, 476, 540, 541, 542, 543, 631, 644, 645, 650, 651, 652], "volum": 78, "supplement": 78, "pg": 78, "17": [78, 80, 104, 105, 134, 141, 631, 658], "26": [78, 132, 140, 476, 543, 548, 641], "esti": 79, "pm": 79, "sqrt": [79, 89, 90, 91, 488, 652], "2nf_2": 79, "hardcod": 79, "1983": 79, "law": 79, "nonparametr": [79, 473, 476, 484], "ann": [79, 96], "905": 79, "912": 79, "superset": [80, 104, 105, 540, 544], "subset": [80, 104, 105, 110, 130, 134, 541, 689, 695, 806], "elsewher": [80, 102, 104, 105, 106], "bypass": [80, 102, 104, 105, 106], "certain": [80, 89, 102, 104, 105, 106, 213, 328, 378, 471, 740], "entail": [80, 102, 104, 105, 106], "missingnodeerror": [80, 102, 104, 105, 106, 698, 699, 701, 716, 729], "duplicatenodeerror": [80, 102, 104, 105, 106, 693], "exact": [80, 102, 104, 105, 106, 186, 230, 296, 344, 395, 450, 544, 650, 802], "pycog": [80, 104, 105, 744], "qiim": [80, 104, 105], "impos": [80, 104, 105], "unroot": [80, 104, 105, 140, 702, 726, 741, 742, 745], "had": [80, 104, 105, 540, 544, 659], "trifurc": [80, 104, 105, 140], "newick": [80, 104, 105, 123, 679, 685, 722, 743, 745, 802, 806], "convent": [80, 104, 105, 131, 134, 137], "silent": [80, 104, 105], "evalu": [80, 131, 132, 220, 287, 335, 385, 441, 489, 541, 630, 655, 687, 724, 727, 806, 809], "hamadi": [80, 104, 105], "lozupon": [80, 104, 105], "fast": [80, 104, 105, 549, 650], "facilit": [80, 104, 105, 107, 130, 513, 655, 693, 745], "throughput": [80, 104, 105, 135, 136, 641, 658], "analys": [80, 104, 105, 540], "microbi": [80, 86, 87, 104, 105, 476, 540, 541, 543, 544, 641], "pyrosequenc": [80, 104, 105], "phylochip": [80, 104, 105], "ism": [80, 104, 105], "2010": [80, 104, 105, 136], "u_count": [80, 104, 105], "otu8": [80, 104, 105], "62": [80, 104, 105, 133, 136, 544, 804], "round": [80, 85, 92, 104, 105, 542, 655, 658, 659, 695], "fisher": 81, "solv": [81, 655], "runtimeerror": 81, "converg": 81, "minimize_scalar": 81, "rectangl": 82, "gini": 82, "area": 82, "lorenz": 82, "curv": [82, 85, 92, 645, 655, 658, 659], "simplifi": 82, "2b": 82, "entri": [82, 130, 134, 145, 630], "trapezoid": 82, "connect": [82, 140, 666, 714, 721], "parallel": [82, 107], "opinion": 82, "desir": [82, 86, 131, 139, 650, 728, 809], "circumst": [82, 658], "linear": [82, 134, 137, 632, 645], "segment": 82, "accur": [82, 86, 87], "fall": [82, 85, 105, 630], "gradient": [82, 644, 645, 650, 652], "formula": [82, 544], "dx": [82, 488], "h_i": 82, "h_0": 82, "h_n": 82, "1912": 82, "variabl": [82, 130, 262, 325, 374, 427, 434, 468, 476, 541, 544, 631, 632, 641, 645, 650, 651, 652, 655, 657, 658, 770, 791, 809], "mutabl": [82, 434, 751, 804], "cuppini": 82, "bologna": 82, "156": 82, "page": [82, 476, 745, 806], "reprint": 82, "memori": [82, 133, 135, 136, 137, 142, 143, 144, 489, 545, 630, 650, 769, 802], "di": [82, 804], "metodologica": 82, "ed": 82, "pizetti": 82, "salvemini": 82, "rome": 82, "libreria": 82, "eredi": 82, "virgilio": 82, "veschi": 82, "1955": 82, "heip": [84, 90, 95], "wiener": [84, 95, 97], "logarithm": [84, 97, 476], "pielou_": 84, "1974": [84, 90, 95], "ass": [84, 95], "54": [84, 95, 105], "555": [84, 95], "557": [84, 95], "lower_quantil": 85, "upper_quantil": 85, "kempton": 85, "taylor": 85, "slope": 85, "cumul": [85, 101, 133], "interquantil": 85, "lower": [85, 86, 135, 142, 186, 476, 527, 534, 542, 630, 659], "quartil": 85, "inward": 85, "bound": [85, 86, 137, 138, 146, 186, 187, 194, 195, 198, 205, 206, 208, 209, 434, 476, 656, 659], "magurran": [85, 88, 91], "1998": [85, 631, 644, 645, 647, 648, 650, 652], "half": [85, 473], "uq": 85, "lq": 85, "justif": 85, "unclear": 85, "overlap": [85, 209, 253, 254, 316, 317, 365, 366, 418, 419, 460, 461, 472, 500, 523, 689], "quantil": 85, "consider": [85, 658], "1976": 85, "model": [85, 86, 87, 92, 473, 489, 659], "natur": 85, "262": 85, "818": 85, "820": 85, "ci_typ": 86, "ulcl": 86, "uncov": [86, 87], "predict": [86, 87, 144, 658], "ratio": [86, 473, 474, 475, 476, 479, 480, 481, 482, 659], "ulcu": 86, "lladser_p": 86, "around": [86, 87, 107, 135, 142, 144, 477, 542, 656, 806], "theorem": [86, 87], "iii": 86, "lladser": [86, 87, 104, 105], "gouet": [86, 87], "reeder": [86, 87], "extrapol": [86, 87, 655], "urn": [86, 87], "poisson": [86, 87], "2011": [86, 87, 104, 105], "lladser_ci": 87, "low": [87, 650, 658], "log": [88, 473, 474, 475, 476, 479, 480, 481, 482], "accumul": [88, 91, 680], "2004": [88, 91], "blackwel": [88, 91], "pp": [88, 91, 96, 645], "76": [88, 91, 141], "77": [88, 91, 544], "mcintosh": [89, 90], "mcintosh_": 89, "propos": [89, 95, 745], "1967": [89, 542], "concept": [89, 488], "1115": 89, "1126": 89, "mcintosh_d": 90, "engel": 90, "560": 90, "d_": 91, "mn": 91, "squar": [91, 92, 106, 140, 490, 513, 647], "num_repeat": 92, "params_guess": 92, "micha": 92, "menten": 92, "fit": [92, 630, 632, 652, 808], "rarefact": 92, "ns_": 92, "datapoint": 92, "subsampl": [92, 630, 655, 658, 659, 660, 690], "s_max": 92, "subsample_count": [92, 630], "controversi": 92, "ml": 92, "assumpt": [92, 140, 471, 476, 698, 699, 747], "roughli": 92, "magnitud": [92, 542, 544, 650, 746], "enzym": 92, "kinet": 92, "nonlinear": 92, "raaijmak": 92, "1987": [92, 745], "biometr": [92, 544], "793": 92, "803": 92, "reli": [94, 213, 328, 378, 807], "pielou": 95, "heip_": 95, "wikipedia": [95, 135, 136, 144, 745, 806], "en": [95, 135, 136, 144, 745], "wiki": [95, 135, 136, 142, 144, 745], "species_even": 95, "1966": 95, "theoret": 95, "biologi": [95, 278, 548, 685, 698, 744, 745], "131": [95, 688], "unobserv": 96, "outcom": [96, 658], "1968": 96, "vol": 96, "36": [96, 141, 655], "256": [96, 655], "257": 96, "bit": [97, 131, 132], "log_2": 97, "enspi": 99, "tiem": 99, "utk": 99, "gross": 99, "bealsmodul": 99, "simpsondi": 99, "d_w": 101, "max_i": 101, "b_i": [101, 488], "sequenti": [101, 135, 136, 142, 476, 488, 641, 739], "rank": [101, 145, 476, 540, 541, 542, 654, 703], "smallest": [101, 142, 658, 659], "express": [101, 238, 264, 304, 326, 352, 376, 403, 430, 453, 658, 804], "bracket": [101, 140], "denot": [101, 135, 476, 540, 543, 544], "dw": 101, "assess": [101, 540, 542, 543, 544, 548], "uneven": 101, "plant": [101, 134, 488], "237": 101, "get_alpha_diversity_metr": [102, 109], "dissimilar": [103, 106, 139, 489, 490, 491, 492, 494, 498, 499, 500, 501, 502, 503, 504, 505, 507, 509, 510, 512, 514, 515, 517, 521, 522, 523, 525, 526, 528, 530, 532, 535, 536, 539], "v_count": [104, 105], "qualit": [104, 105, 641], "versu": [104, 105], "quantit": [104, 105, 644, 659], "deeper": [104, 105], "mathemat": [104, 473, 685, 688, 744], "advis": [104, 105, 110], "appl": [104, 105], "microbiol": [104, 105], "71": [104, 141, 144], "8228": 104, "8235": 104, "2005": [104, 134], "kellei": [104, 105], "insight": [104, 105], "factor": [104, 105, 540, 543, 548, 645, 659], "structur": [104, 105, 132, 137, 140, 145, 490, 540, 541, 548, 727, 770], "73": [104, 105], "1576": [104, 105], "1585": [104, 105], "2007": [104, 105], "stombaugh": [104, 105], "comparison": [104, 105, 476, 548, 657, 688, 745, 748, 806], "169": [104, 105], "172": [104, 105], "uu": 104, "37": [104, 144], "quantiti": 105, "mathemt": 105, "wu": 105, "pairwise_func": 106, "pairwis": [106, 107, 110, 476, 503, 527, 545, 548, 696, 734, 806], "hollow": [106, 130, 490, 527, 529, 546], "sklearn": 106, "pairwise_dist": 106, "reduce_f": 107, "map_f": 107, "decomposit": 107, "resolv": [107, 110, 121, 548], "partialdistancematrix": 107, "_block_comput": 107, "ipyparallel": 107, "map_async": 107, "blocksiz": 107, "process": [107, 135, 144, 208, 652, 747, 771, 809], "motiv": 107, "earth": 107, "dataset": [107, 130, 473, 544, 631, 645, 650], "span": [107, 135, 137, 140, 186, 209], "000": 107, "partial_beta_divers": 107, "earthmicrobiom": 107, "id_pair": 110, "unstabl": 110, "caution": 110, "unresolv": 110, "warn": [111, 118, 136, 650, 687, 741, 746, 747, 807, 808], "blast7": 112, "pars": [112, 113, 114, 115, 116, 117, 119, 120, 122, 123, 124, 125, 126, 127, 128, 135, 136, 137, 139, 146, 802], "embl": [114, 137, 145, 186, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469], "sniffer": [118, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 172, 177, 178, 182, 183, 802], "gff3": [119, 137, 210, 212, 261, 268, 324, 327, 467, 469], "genbank": [120, 134, 138, 145, 261, 268, 324, 327, 373, 377, 426, 433, 467, 469], "lsmat": [122, 506, 511, 531, 537], "written": [125, 133, 135, 136, 140, 142, 744, 802, 806], "qseq": [126, 131, 132, 261, 324, 373, 426, 467], "qual": [127, 136], "ambigu": [129, 178, 183], "unidentifi": 129, "rapid": [130, 135, 707], "ye": [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "dissimilaritymatrix": [130, 139, 513, 515, 517, 521, 523, 525, 526, 530, 533, 535, 536, 546], "hdf5": 130, "datatyp": [130, 630, 660], "diagon": [130, 527, 534], "float32": [130, 544], "human": [130, 135, 136, 139, 140, 141, 750], "hdfgroup": 130, "header": [131, 132, 133, 136, 137, 139, 141], "tab": [131, 132, 138, 139, 140, 141, 143, 145], "moac": 131, "gi": [131, 132, 137], "15800534": 131, "np_286546": 131, "3e": [131, 132, 655], "114": 131, "330": 131, "170768970": 131, "zp_02903423": 131, "99": [131, 132, 134, 141, 540, 544, 548], "9e": 131, "329": 131, "outfmt": [131, 132], "legaci": [131, 132, 135], "With": [131, 473, 484], "qseqid": [131, 132], "sseqid": [131, 132], "bitscor": [131, 132], "qstart": [131, 132], "sstart": [131, 132], "qgi": [131, 132], "qacc": [131, 132], "acces": 131, "qaccver": [131, 132], "qlen": [131, 132], "sallseqid": [131, 132], "sgi": [131, 132], "sallgi": [131, 132], "sacc": [131, 132], "saccver": [131, 132], "sallacc": [131, 132], "slen": [131, 132], "qend": [131, 132], "send": [131, 132], "sseq": [131, 132], "raw": [131, 569, 599], "pident": [131, 132], "percent": [131, 804], "nident": [131, 132], "gapopen": [131, 132], "ppo": [131, 132], "percentag": [131, 473], "frame": [131, 132, 267, 278, 279, 432, 541, 703], "qframe": [131, 132], "sframe": [131, 132], "btop": [131, 132], "traceback": [131, 142, 278, 434, 542], "staxid": [131, 132], "sscinam": [131, 132], "scomnam": [131, 132], "sblastnam": [131, 132], "sskingdom": [131, 132], "super": [131, 132], "kingdom": [131, 132, 145], "stitl": [131, 132], "sstrand": [131, 132], "strand": [131, 132, 137, 138, 144, 186, 265, 266, 267, 429], "salltitl": [131, 132], "qcov": [131, 132], "qcovhsp": [131, 132], "hsp": [131, 132], "miss": [131, 135, 144, 230, 296, 344, 395, 450, 473, 484, 541, 641, 657, 658, 663, 664, 809], "default_column": 131, "suppos": [131, 132, 134, 135, 136, 137, 140, 143, 144, 473, 655, 659], "tgi": 131, "t100": [131, 132], "t161": 131, "t0": [131, 132, 138, 141, 143, 489], "t1": [131, 132, 141, 143, 145, 489], "t3e": [131, 132], "t330": 131, "t99": 131, "t9e": 131, "t329": 131, "fh": [131, 132, 133, 135, 136, 137, 138, 142, 143, 144, 145, 146, 157, 158, 159], "df": [131, 132, 145, 508, 533, 540, 541, 544, 641, 656], "000000e": [131, 132], "altschul": [131, 132], "gish": [131, 132], "miller": [131, 132], "myer": [131, 132], "lipman": [131, 132, 135], "1990": [131, 132, 134], "215": [131, 132], "403": [131, 132], "410": [131, 132], "blastedbio": 131, "blogspot": 131, "csv": [131, 139, 802], "book": [131, 132, 135], "nbk279675": 131, "blastn": 132, "18": [132, 141, 144, 540, 655, 804], "1786181": 132, "gb": [132, 137], "ae000111": 132, "ecoli": 132, "field": [132, 136, 143, 269], "hit": 132, "10596": 132, "ae000174": 132, "8e": 132, "5565": 132, "5671": 132, "6928": 132, "6821": 132, "ae000394": 132, "1e": [132, 140, 748], "5587": 132, "135": 132, "219": [132, 134, 541], "ae000425": 132, "6e": 132, "8552": 132, "8468": 132, "ae000171": 132, "2214": 132, "2130": 132, "minor": 132, "blastp": 132, "31": 132, "query1": 132, "subject2": 132, "sbjctframe": 132, "ver": 132, "subject1": 132, "other_vertebr": 132, "af178033": 132, "emorg": 132, "811": 132, "1566": 132, "af031394": 132, "63": [132, 141], "909": 132, "1542": [132, 685], "blast6": 132, "sbjct": 132, "tae000111": 132, "t10596": 132, "tae000174": 132, "t8e": 132, "t5565": 132, "t5671": 132, "t6928": 132, "t6821": 132, "tae000171": 132, "t5587": 132, "t2214": 132, "t2130": 132, "tae000425": 132, "t6e": 132, "t8552": 132, "t8468": 132, "temorg": 132, "t811": 132, "t1566": 132, "af178032": 132, "t94": 132, "57": [132, 141, 645], "t44": 132, "t1217": 132, "af178031": 132, "82": [132, 133, 144], "t42": 132, "t1233": 132, "94": [132, 141], "nbk279682": 132, "plain": [133, 135, 136, 137, 140, 142, 143], "degre": [133, 649, 656, 658], "divid": [133, 488, 647, 649, 653], "60": [133, 134, 138, 549, 658], "properti": [133, 142, 145, 270, 275, 280, 503, 513, 527, 655, 685, 721, 751, 762, 764, 765, 766], "abc": [133, 218, 280, 285, 333, 383, 439], "gcaugcaucugcauacguacguacgcaugcauca": 133, "xyz": 133, "gucgauacauacguacgucguacguacgu": 133, "cgac": 133, "cgcgaugcaugcau": 133, "cgau": 133, "caugcaucguacguacgcaugac": 133, "clustal_f": 133, "gcaugcaucugcauacguacguacgcaugca": 133, "gucgauacauacguacgucgguacgu": 133, "cgugcaugcau": 133, "cauucguacguacgcaugac": 133, "gcaugcaucugcauacguacguacgcaugcagucgauacauacguacgucgguacgu": 133, "accgttgta": [133, 142], "gtagct": [133, 142], "gtcgaa": [133, 142], "gtacct": [133, 142], "agagttgaaggtatct": [133, 142], "getvalu": [133, 135, 136, 137, 138, 142, 144, 489], "sciencedirect": 133, "scienc": [133, 135, 645], "pii": 133, "0378111988903307": 133, "mit": 133, "meme_v4": 133, "clustalw": 133, "annot": [134, 137, 138, 195], "mark": [134, 137, 144, 809], "termin": [134, 266, 278, 431, 738], "comment": [134, 135, 137, 138, 139, 144, 145], "extens": 134, "seen": [134, 137, 659], "ena": [134, 137], "assembl": 134, "flatfil": 134, "parent": [134, 138, 140, 145, 434, 488, 664, 666, 682, 685, 697, 700, 709, 717, 721, 730, 736, 739, 741, 742, 806], "metatdata": 134, "moment": [134, 542, 809], "1499": 134, "rn": [134, 144], "download": [134, 137, 145], "molecul": [134, 135, 137, 434, 804], "thymin": [134, 137, 265, 429], "uracil": [134, 137, 265, 429], "embl_str": 134, "x56734": 134, "sv": 134, "mrna": 134, "std": [134, 649, 653, 658], "pln": [134, 145], "1859": 134, "bp": [134, 137], "xx": 134, "s46826": 134, "dt": 134, "sep": 134, "1991": 134, "29": [134, 136, 137], "85": [134, 141, 659, 740], "de": [134, 144], "trifolium": 134, "repen": 134, "cyanogen": 134, "glucosidas": 134, "kw": 134, "white": 134, "clover": 134, "oc": 134, "eukaryota": 134, "viridiplanta": 134, "streptophyta": 134, "embryophyta": 134, "tracheophyta": 134, "spermatophyta": 134, "magnoliophyta": 134, "eudicotyledon": 134, "gunnerida": 134, "pentapetala": 134, "rosid": 134, "fabid": 134, "fabal": 134, "fabacea": 134, "papilionoidea": 134, "trifoliea": 134, "rp": 134, "rx": 134, "1007": 134, "bf00039495": 134, "pubm": [134, 137, 434], "1907511": 134, "ra": [134, 144], "oxtobi": 134, "dunn": 134, "pancoro": 134, "hugh": 134, "rt": [134, 144], "linamaras": 134, "rl": [134, 144], "209": [134, 137, 542], "insdc": [134, 137, 186], "univers": [134, 135, 142, 148], "newcastl": 134, "upon": 134, "tyne": 134, "medic": 134, "school": 134, "ne2": 134, "4hh": 134, "dr": 134, "md5": [134, 769], "1e51ca3a5450c43524b9185c236cc5cc": 134, "qualifi": [134, 137], "mol_typ": [134, 137], "clone_lib": 134, "lambda": [134, 630, 655, 658, 659, 687, 700, 721, 724, 729, 740, 744, 745, 809], "gt10": 134, "clone": 134, "tre361": 134, "tissue_typ": 134, "db_xref": [134, 137], "3899": 134, "evid": [134, 140], "1495": 134, "ec_numb": 134, "21": [134, 141, 476, 648, 659], "goa": 134, "p26204": 134, "interpro": 134, "ipr001360": 134, "ipr013781": 134, "ipr017853": 134, "ipr033132": 134, "uniprotkb": 134, "swiss": 134, "protein_id": 134, "caa40058": 134, "mdfivaifalfvissftitstnaveastlldignlsr": 134, "sfprgfifgagssayqfegavneggrgpsiwdtfthkypekirdgsnaditv": 134, "dqyhrykedvgimkdqnmdsyrfsiswprilpkgklsgginhegikyynnli": 134, "nellangiqpfvtlfhwdlpqvledeyggflnsgvindfrdytdlcfkefgd": 134, "rvrywstlnepwvfsnsgyalgtnapgrcsasnvakpgdsgtgpyivthnqi": 134, "lahaeavhvyktkyqayqkgkigitlvsnwlmplddnsipdikaaersldfq": 134, "fglfmeqlttgdysksmrrivknrlpkfskfesslvngsfdfiginyysssi": 134, "isnapshgnakpsystnpmtnisfekhgiplgpraasiwiyvypymfiqedf": 134, "eifcyilkinitilqfsitengmnefndatlpveeallntyridyyyrhlyi": 134, "irsairagsnvkgfyawsfldcnewfagftvrfglnfvd": 134, "609": 134, "314": 134, "355": [134, 549], "581": 134, "aaacaaacca": 134, "aatatggatt": 134, "ttattgtagc": 134, "catatttgct": 134, "ctgtttgtta": 134, "ttagctcatt": 134, "cacaattact": 134, "tccacaaatg": 134, "cagttgaagc": 134, "ttctactctt": 134, "cttgacatag": 134, "gtaacctgag": 134, "tcggagcagt": 134, "tttcctcgtg": 134, "gcttcatctt": 134, "tggtgctgga": 134, "tcttcagcat": 134, "accaatttga": 134, "aggtgcagta": 134, "aacgaaggcg": 134, "gtagaggacc": 134, "aagtatttgg": 134, "gataccttca": 134, "cccataaata": 134, "tccagaaaaa": 134, "ataagggatg": 134, "gaagcaatgc": 134, "agacatcacg": 134, "gttgaccaat": 134, "atcaccgcta": 134, "caaggaagat": 134, "gttgggatta": 134, "tgaaggatca": 134, "aaatatggat": 134, "tcgtatagat": 134, "tctcaatctc": 134, "ttggccaaga": 134, "atactcccaa": 134, "agggaaagtt": 134, "gagcggaggc": 134, "ataaatcacg": 134, "aaggaatcaa": 134, "atattacaac": 134, "aaccttatca": 134, "acgaactatt": 134, "ggctaacggt": 134, "atacaaccat": 134, "ttgtaactct": 134, "ttttcattgg": 134, "gatcttcccc": 134, "aagtcttaga": 134, "agatgagtat": 134, "ggtggtttct": 134, "taaactccgg": 134, "tgtaataaat": 134, "gattttcgag": 134, "actatacgga": 134, "tctttgcttc": 134, "aaggaatttg": 134, "gagatagagt": 134, "gaggtattgg": 134, "agtactctaa": 134, "atgagccatg": 134, "ggtgtttagc": 134, "aattctggat": 134, "atgcactagg": 134, "aacaaatgca": 134, "ccaggtcgat": 134, "gttcggcctc": 134, "caacgtggcc": 134, "aagcctggtg": 134, "attctggaac": 134, "aggaccttat": 134, "atagttacac": 134, "acaatcaaat": 134, "tcttgctcat": 134, "gcagaagctg": 134, "tacatgtgta": 134, "taagactaaa": 134, "taccaggcat": 134, "atcaaaaggg": 134, "aaagataggc": 134, "ataacgttgg": 134, "tatctaactg": 134, "gttaatgcca": 134, "cttgatgata": 134, "atagcatacc": 134, "agatataaag": 134, "gctgccgaga": 134, "gatcacttga": 134, "cttccaattt": 134, "ggattgttta": 134, "tggaacaatt": 134, "aacaacagga": 134, "gattattcta": 134, "agagcatgcg": 134, "gcgtatagtt": 134, "aaaaaccgat": 134, "tacctaagtt": 134, "ctcaaaattc": 134, "gaatcaagcc": 134, "tagtgaatgg": 134, "ttcatttgat": 134, "tttattggta": 134, "taaactatta": 134, "ctcttctagt": 134, "tatattagca": 134, "atgccccttc": 134, "acatggcaat": 134, "gccaaaccca": 134, "gttactcaac": 134, "aaatcctatg": 134, "accaatattt": 134, "catttgaaaa": 134, "acatgggata": 134, "cccttaggtc": 134, "caagggctgc": 134, "ttcaatttgg": 134, "atatatgttt": 134, "atccatatat": 134, "gtttatccaa": 134, "gaggacttcg": 134, "agatcttttg": 134, "ttacatatta": 134, "aaaataaata": 134, "taacaatcct": 134, "gcaattttca": 134, "atcactgaaa": 134, "atggtatgaa": 134, "tgaattcaac": 134, "gatgcaacac": 134, "ttccagtaga": 134, "agaagctctt": 134, "ttgaatactt": 134, "acagaattga": 134, "ttactattac": 134, "cgtcacttat": 134, "actacattcg": 134, "ttctgcaatc": 134, "agggctggct": 134, "caaatgtgaa": 134, "gggtttttac": 134, "gcatggtcat": 134, "ttttggactg": 134, "taatgaatgg": 134, "tttgcaggct": 134, "ttactgttcg": 134, "ttttggatta": 134, "aactttgtag": 134, "attagaaaga": 134, "tggattaaaa": 134, "aggtacccta": 134, "agctttctgc": 134, "ccaatggtac": 134, "aagaactttc": 134, "tcaaaagaaa": 134, "ctagctagta": 134, "ttattaaaag": 134, "tagattacag": 134, "tacatcgttt": 134, "gaagttgagt": 134, "tggtgcacct": 134, "aattaaataa": 134, "aagaggttac": 134, "tcttaacata": 134, "tttttaggcc": 134, "attcgttgtg": 134, "aagttgttag": 134, "gctgttattt": 134, "ctattatact": 134, "atgttgtagt": 134, "aataagtgca": 134, "ttgttgtacc": 134, "agaagctatg": 134, "atcataacta": 134, "taggttgatc": 134, "cttcatgtat": 134, "cagtttgatg": 134, "ttgagaatac": 134, "tttgaattaa": 134, "aagtcttttt": 134, "ttattttttt": 134, "aaaaaaaaaa": 134, "aaaaaaaaa": 134, "dna_seq": [134, 135, 137], "cross_refer": 134, "date": 134, "dbsourc": 134, "locu": [134, 137, 145], "1740": 134, "1800": 134, "rna_seq": [134, 137], "aauauggauu": 134, "uuauuguagc": 134, "cauauuugcu": 134, "cuguuuguua": 134, "uuagcucauu": 134, "cacaauuacu": 134, "uccacaaaug": 134, "caguugaagc": 134, "uucuacucuu": 134, "cuugacauag": 134, "guaaccugag": 134, "agaagcuaug": 134, "aucauaacua": 134, "uagguugauc": 134, "cuucauguau": 134, "caguuugaug": 134, "uugagaauac": 134, "uuugaauuaa": 134, "aagucuuuuu": 134, "uuauuuuuuu": 134, "trascrib": 134, "transcrib": [134, 137, 266, 267, 429, 804], "soppos": 134, "deal": [134, 185, 473, 484, 650, 802], "embl_gen": 134, "ftp": [134, 145, 186], "pub": [134, 145, 186], "releas": [134, 145, 807], "usrman": 134, "view": 134, "displai": [134, 239, 254, 262, 269, 305, 317, 325, 353, 366, 374, 404, 419, 427, 434, 454, 461, 468, 545, 632, 807], "brows": 134, "149855": 135, "cgatgtcgatcgatcgatcgatcag": 135, "34989": 135, "catcgatcgatcgatgcatgcatgcatg": 135, "accompani": [135, 490, 747], "particuarli": 135, "instrument": 135, "phred": [135, 136], "nonneg": 135, "deflin": 135, "split": [135, 136, 142, 144], "blank": [135, 136, 140, 141, 142, 505, 530], "whitespac": [135, 136, 139, 141, 144], "semicolon": [135, 138], "resembl": 135, "request": [135, 500, 510, 523, 536, 695, 768, 802], "pull": 135, "welcom": 135, "greater": [135, 195, 214, 281, 329, 379, 435, 540, 542, 543, 544, 545, 548, 658, 659, 660], "repect": 135, "strictli": [135, 476, 686], "enforc": [135, 434], "remaind": 135, "iupac": [135, 136, 142, 143, 213, 242, 269, 278, 328, 378, 407, 434, 804], "lexicon": [135, 136, 142], "sciki": 135, "additon": 135, "maintain": [135, 140, 146, 529, 644, 645, 655, 658, 807], "futur": 135, "seq_num": [135, 136, 137, 138, 143], "50th": [135, 476], "id_whitespace_replac": [135, 136], "disk": [135, 490], "potenti": [135, 252, 315, 364, 417, 459, 630, 724, 746, 809], "description_newline_replac": [135, 136], "max_width": 135, "width": [135, 142], "longer": [135, 142, 473, 659], "caveat": [135, 473], "exce": [135, 142], "12345": [135, 434], "runtim": [135, 213, 328, 378, 770, 809], "affect": [135, 140, 269, 270, 275, 434, 540, 544], "five": [135, 145, 476, 505, 530, 745], "turkei": [135, 142], "aagctngggcatttcagggtgagcccgggcaatacagggtat": 135, "salmo": [135, 142], "gair": 135, "aagccttggcagtgcagggtgagccgtgg": 135, "ccgggcacggtat": 135, "sapien": 135, "accggttggccgttcagggtacaggttggccgttcagggtaa": 135, "seq4": 135, "chimp": [135, 142], "aaacccttgccg": 135, "ttacgcttaaac": 135, "cgaggccgggac": 135, "actcat": 135, "seq5": 135, "gorilla": [135, 142], "aaacccttgccggtacgcttaaaccattgccggtacgcttaa": 135, "1986": [135, 140, 142, 645], "2008": [135, 142], "washington": [135, 140, 142, 744, 745], "joseph": [135, 142, 806], "felsenstein": [135, 142, 806], "permiss": [135, 140, 142], "grant": [135, 142], "fee": [135, 142], "charg": [135, 142], "fl": 135, "presum": 135, "aagccttggcagtgcagggtgagccgtggccgggcacggtat": 135, "aaacccttgccgttacgcttaaaccgaggccgggacactcat": 135, "detect": [135, 137, 178, 183, 476, 542, 659], "infeas": 135, "stream": [135, 138, 802], "aagctngggc": [135, 142], "atttcagggt": [135, 142], "gagcccgggc": [135, 142], "aatacagggt": [135, 142], "aagccttggc": 135, "agtgcagggt": [135, 142], "gagccgtggc": [135, 142], "cgggcacggt": [135, 142], "accggttggc": 135, "cgttcagggt": [135, 142], "acaggttggc": [135, 142], "aaacccttgc": [135, 142], "cgttacgctt": [135, 142], "aaaccgaggc": [135, 142], "cgggacactc": [135, 142], "cggtacgctt": [135, 142], "aaaccattgc": [135, 142], "fifth": 135, "standalon": 135, "cgatgtc": 135, "catcgtc": 135, "39": [135, 141, 488], "79": [135, 138, 141], "fasta_fl": 135, "qual_fl": 135, "uint8": [135, 136, 143, 213, 215, 231, 235, 250, 251, 256, 257, 258, 259, 282, 297, 301, 314, 319, 320, 321, 322, 328, 330, 345, 349, 363, 368, 369, 370, 371, 378, 380, 396, 400, 415, 416, 421, 422, 423, 424, 434, 436, 451, 452, 458, 463, 464, 465, 466], "new_fasta_fh": 135, "new_qual_fh": 135, "dj": 135, "pearson": [135, 542, 545, 548, 690], "wr": [135, 548], "1985": [135, 213, 280, 328, 378, 434], "sensit": [135, 255, 318, 367, 420, 462], "4693": 135, "1435": 135, "41": [135, 141], "fasta_format": 135, "blastcgihelp": 135, "shtml": 135, "broadinstitut": 135, "crd": 135, "php": 135, "madden": 135, "oct": [135, 137], "2003": [135, 473], "aug": 135, "mcentyr": 135, "ostel": 135, "editor": 135, "handbook": 135, "internet": [135, 145], "bethesda": 135, "nation": [135, 145], "center": [135, 145, 477, 541, 644, 646, 650, 653], "biotechnologi": [135, 145], "chapter": [135, 651], "nbk21097": 135, "evolut": [135, 140, 142, 547, 548, 685, 744, 745], "genet": [135, 140, 142, 145, 266, 267, 269, 270, 275, 276, 277, 278, 279, 431, 432, 547, 744, 745, 804], "mullikin": 136, "wellcom": 136, "sanger": 136, "institut": 136, "formal": [136, 145, 473], "conceptu": [136, 543], "aacaccaaacttctccaccacgtgagctacaaaag": 136, "cabcacc": 136, "lb": 136, "ccyt": 136, "wf": [136, 809], "tatgtatatataacatatacatatatacatacata": 136, "kz": 136, "yy": 136, "bt": 136, "aT": 136, "bbb": 136, "printabl": [136, 143], "ascii": [136, 143, 146, 683, 806], "excel": 136, "supplementari": [136, 476], "solexa": 136, "unfortun": [136, 658], "notabl": 136, "illumina": [136, 143], "tabl": [136, 137, 145, 266, 267, 269, 277, 278, 279, 431, 432, 476, 631, 644, 645, 651, 652, 770, 804], "highlight": 136, "bioinformat": [136, 142, 685], "foundat": 136, "obf": 136, "biopython": 136, "bioperl": [136, 142], "offset": [136, 137], "126": 136, "93": 136, "illumina1": [136, 143], "59": 136, "Not": [136, 544], "truncat": [136, 499, 522, 640, 745, 809], "outsid": [136, 186, 208, 239, 305, 353, 404, 454], "phred_offset": [136, 143], "whenev": [136, 650], "aacaccaaacttctccacc": 136, "acgtgagctacaaaag": 136, "reload": 136, "tatgtatata": 136, "taacatatac": 136, "atatatacat": 136, "acata": 136, "new_fh": 136, "ffffx": 136, "ab": [136, 280], "bbf": 136, "ka": 136, "bbx": 136, "jyzox": 136, "zxx": 136, "fff": 136, "fasffbf": 136, "sffaaa": 136, "peter": 136, "cock": 136, "christoph": 136, "naohisa": 136, "goto": 136, "michael": 136, "heuer": 136, "rice": 136, "nucl": 136, "1767": 136, "1771": 136, "publish": [136, 144], "decemb": 136, "2009": [136, 137, 548], "1093": 136, "nar": 136, "gkp1137": 136, "oxfordjourn": 136, "fastq_format": 136, "flat": [137, 252, 315, 364, 417, 459], "gbk": 137, "genpept": 137, "essenti": 137, "collabor": 137, "joint": 137, "effort": [137, 807], "ddbj": 137, "organis": 137, "layout": 137, "webpag": 137, "interval_metadata": [137, 138, 186, 195, 206, 209, 213, 218, 220, 246, 280, 285, 287, 310, 328, 333, 335, 358, 378, 383, 385, 411, 434, 439, 441, 455], "sub": [137, 138, 186, 660], "vocabulari": [137, 138], "infer": [137, 177, 182, 768, 802], "stranded": 137, "codon_start": 137, "phase": [137, 138, 807], "codon": [137, 145, 266, 269, 278, 279, 431], "dbxref": [137, 138], "cross": 137, "descriptor": [137, 651, 764, 765, 766], "67": [137, 141, 229, 236, 263, 302, 350, 394, 401, 428, 540, 544, 645, 655, 804], "66": [137, 141, 236, 302, 350, 401, 544, 804], "neighbor": [137, 730, 745], "68": [137, 549, 658], "remot": 137, "j00123": 137, "discard": [137, 542], "200": 137, "kept": 137, "199": 137, "__locat": 137, "__": 137, "gb_str": 137, "3k1v_a": 137, "34": [137, 143, 685], "syn": 137, "2012": [137, 145, 542], "chain": 137, "Of": 137, "mutant": 137, "preq1": 137, "260656459": 137, "synthet": 137, "artifici": [137, 631], "author": [137, 144, 434, 476], "klein": 137, "edward": 137, "ferr": 137, "amar": 137, "cocryst": 137, "riboswitch": [137, 186], "nat": 137, "343": 137, "344": 137, "19234468": 137, "seqr": 137, "32630": 137, "misc_bind": 137, "bound_moieti": 137, "agaggttcta": 137, "gcacatccct": 137, "ctataaaaaa": 137, "ctaa": 137, "agagguucua": 137, "gcacaucccu": 137, "cuauaaaaaa": 137, "cuaa": 137, "sitemap": 137, "samplerecord": 137, "feature_t": 137, "webfeat": 137, "nuccor": 137, "delimit": [138, 139, 141, 143, 145, 489], "intervalmetadata": [138, 186, 194, 213, 328, 378, 434], "seq_id": 138, "seqid": 138, "attr": [138, 708, 736], "tag": [138, 144, 236, 264, 302, 326, 350, 376, 401, 430, 488], "comma": [138, 140], "predefin": [138, 235, 301, 349, 400, 452], "derives_from": 138, "ontology_term": 138, "is_circular": 138, "parser": [138, 140], "skip_subregion": 138, "contigu": [138, 186, 252, 315, 364, 417, 459], "region": [138, 186, 195, 252, 315, 364, 417, 459], "exon": [138, 186, 255, 318, 367, 378, 420, 434, 462], "gff_str": 138, "gff": 138, "seq_1": 138, "tgene": 138, "t10": [138, 141], "t90": 138, "tid": 138, "gen1": 138, "texon": 138, "t30": [138, 143], "tparent": 138, "t50": 138, "seq_2": 138, "t80": 138, "t96": 138, "gen2": 138, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 138, "atgcatgcatgcatgcatgcatgcatgcatgcatgcatgc": 138, "im": [138, 195, 206], "4604421736": 138, "fuzzi": [138, 186, 187, 194, 195, 205, 206, 434], "foo": [138, 195, 434, 769, 809], "gen": [138, 809], "4603377592": 138, "4603378712": 138, "atgcatgcat": 138, "gcatgcatgc": 138, "120": 138, "ontologi": 138, "blob": 138, "master": 138, "along": [139, 641, 649, 650], "tsv": 139, "varieti": 139, "serial": [139, 489, 632, 802], "del": [139, 631], "anywher": [139, 140, 476], "easili": [139, 804], "program": [139, 140, 145], "june": 140, "english": [140, 542], "subtre": [140, 145, 700, 806], "node_info": 140, "children": [140, 666, 671, 674, 682, 686, 697, 699, 706, 710, 717, 721, 723, 730], "null": [140, 476, 548, 655], "comment_char": 140, "all_char": 140, "safe_char": 140, "decim": [140, 749], "vice": [140, 548], "versa": [140, 548], "escap": 140, "semi": 140, "colon": 140, "recal": 140, "alon": [140, 541], "imagin": 140, "parenthesi": 140, "insert": [140, 205, 686], "abil": 140, "child": [140, 195, 230, 296, 344, 395, 450, 488, 666, 686, 717, 721, 739, 806], "bifurc": [140, 702], "alreadi": [140, 144, 146, 147, 157, 158, 159, 434, 490, 542], "sibl": [140, 230, 296, 344, 395, 450], "multifurc": [140, 806], "recurs": [140, 683, 741, 742], "infinitum": 140, "clariti": 140, "estrang": 140, "omit": [140, 489, 703, 737, 739, 744, 802], "technic": 140, "expon": 140, "due": [140, 208, 484, 541, 544, 645, 658], "disallow": [140, 144, 542], "stricter": [140, 748], "obviou": 140, "yet": [140, 145, 146], "regular": [140, 238, 264, 304, 326, 352, 376, 403, 430, 453, 804], "surround": 140, "a_1": 140, "_1": 140, "commonli": [140, 544, 652, 806], "unpair": 140, "worri": 140, "un": 140, "permit": [140, 158], "isomorph": [140, 479, 480, 481, 482], "convert_underscor": 140, "unescap": 140, "extern": 140, "ascii_art": [140, 686, 703, 704, 745, 806], "b_b": 140, "d_d": 140, "becam": 140, "preserv": [140, 644, 645, 650, 727], "newick_doc": 140, "newicktre": 140, "variou": [141, 489, 632, 655, 805, 808], "rda": [141, 632, 644, 645], "cca": [141, 631, 632, 644, 652], "ordinationresult": [141, 544, 644, 645, 650, 651, 652, 749], "six": [141, 267, 279, 432], "eigval": [141, 632], "biplot": [141, 644, 652], "constraint": [141, 632, 645, 652], "07": 141, "08": [141, 655, 658], "46": [141, 543, 659], "species0": 141, "species1": 141, "species2": 141, "01": [141, 655], "09": 141, "species3": 141, "03": [141, 544], "species4": 141, "species5": 141, "species6": 141, "species7": 141, "species8": 141, "70": 141, "69": 141, "site0": 141, "site1": [141, 631], "58": [141, 655], "site2": [141, 631], "site3": [141, 631], "site4": [141, 631], "97": 141, "06": 141, "61": [141, 544, 659], "site5": [141, 631], "04": [141, 655], "site6": [141, 631], "site7": [141, 631], "52": 141, "site8": [141, 631], "47": [141, 655], "site9": [141, 631], "74": 141, "32": [141, 543], "78": [141, 740], "55": [141, 233, 299, 347, 398, 544, 549, 655, 745], "02": [141, 145, 476], "declar": 141, "or_f": 141, "t4": 141, "t9": 141, "t2": [141, 143], "ord_r": 141, "joe": 142, "raxml": 142, "gairaagccttggc": 142, "sapiensaccggttggc": 142, "relax": 142, "interleav": [142, 144], "1x1": 142, "reach": 142, "11th": 142, "reserv": 142, "explicitli": [142, 631], "nucleic": [142, 145, 213, 280, 328, 378, 434], "older": 142, "chunk": 142, "2a": 142, "agagttgaag": 142, "gtatct": 142, "surpass": 142, "recent": [142, 278, 434, 542], "_except": 142, "phylipformaterror": 142, "shorter": 142, "post": [142, 655, 659], "obsolet": 142, "phylip_multiple_alignment_format": 142, "machin": 143, "lane": 143, "tile": 143, "casava": 143, "ommit": 143, "clear": 143, "variant": [143, 145], "exclud": [143, 488, 527, 534, 730], "acgtac": 143, "rubbbbrbcefgh": 143, "cgggcattgca": 143, "cgggcasdgca": 143, "acgta": 143, "aataaac": 143, "getaaafhwqaaf": 143, "catttagga": 143, "tgca": 143, "tjflkafnkkghvm": 143, "t3": 143, "t34": 143, "tacg": 143, "trubbbbrbcefgh": 143, "tcgggcattgca": 143, "tcgggcasdgca": 143, "t35": 143, "tacgta": 143, "tgetaaafhwqaaf": 143, "tcatttagga": 143, "ttjflkafnkkghvm": 143, "illumina_1": 143, "lane_numb": 143, "machine_nam": 143, "read_numb": 143, "run_numb": 143, "tile_numb": 143, "tac": 143, "aata": 143, "aac": 143, "biowulf": 143, "app": 143, "casava_ug_15011196b": 143, "pdf": 143, "upsk": 144, "se": 144, "infern": 144, "ss": 144, "pmid": [144, 542, 745], "9223489": 144, "rm": [144, 550, 610], "role": [144, 658], "pseudoknot": 144, "turnip": 144, "yellow": 144, "mosaic": 144, "viru": 144, "synthesi": 144, "viral": 144, "polymeras": 144, "deiman": 144, "ba": 144, "kortlev": 144, "pleij": 144, "cw": 144, "virol": 144, "1997": 144, "5990": 144, "5996": 144, "af035635": 144, "619": 144, "641": 144, "ugaguucucgaucucuaaaaucg": 144, "m24804": 144, "104": 144, "ugaguucucuaucucuaaaaucg": 144, "j04373": 144, "6212": 144, "6234": 144, "uaaguucucgaucuuuaaaaucg": 144, "m24803": 144, "uaaguucucgaucucuaaaaucg": 144, "ss_con": 144, "aaa": [144, 252, 315, 364, 417, 459], "ggt": [144, 262, 325, 374, 427, 468], "accgttcg": 144, "pfam": 144, "rfam": 144, "whole": [144, 648, 656], "cb": [144, 657], "domain": [144, 328, 703, 737], "nh": 144, "tn": 144, "unlik": [144, 630], "nhx": 144, "rc": [144, 229, 394, 505, 530, 641], "kestrel": 144, "gorlick": 144, "medlin": 144, "o83071": 144, "259": 144, "312": 144, "083071": 144, "o31698": 144, "ccchhhhhhhhhhhhhhh": 144, "eeeeeeee": 144, "eeeeeeeehhh": 144, "ccccchhhhhhhhhhhhh": 144, "eeeeeeeeeeh": 144, "cc": [144, 262, 269, 325, 374, 427, 468], "intracellular": 144, "mostli": 144, "192": 144, "88": [144, 544, 658], "139": 144, "bacillu": 144, "subtili": 144, "mtcraqliavprassla": 144, "aiacaqkm": 144, "rvsrv": 144, "sa": 144, "999887756453524252": 144, "55152525": 144, "36463": 144, "mqhvsapvfvfectrlai": 144, "vqhklrah": 144, "srava": 144, "mieadkvahvqvgnnleh": 144, "allvltkt": 144, "gytai": 144, "evmltdiprlhindpimk": 144, "gfgmvinn": 144, "gfv": 144, "o31699": 144, "AS": 144, "________________": 144, "____________________": 144, "IN": 144, "____________1______________2_________": 144, "eeeee": 144, "ordereddict": 144, "stockholm_format": 144, "sonnhamm": 144, "sbc": 144, "su": 144, "dump": [145, 806, 809], "classif": [145, 641], "pipe": 145, "host": [145, 548], "portal": 145, "daili": 145, "archiv": [145, 769], "pattern": [145, 238, 264, 304, 326, 352, 376, 403, 430, 453, 804, 809], "taxid": 145, "hierarch": [145, 488], "tax_id": [145, 703], "superkingdom": 145, "inherit": [145, 213, 280, 328, 378, 434], "div": 145, "flag": [145, 806], "mgc": 145, "hidden": 145, "suppress": [145, 540, 544, 545], "lineag": [145, 658, 704, 737], "free": [145, 770, 809], "2018": 145, "new_taxdump": 145, "compat": [145, 269, 807], "classic": 145, "plu": 145, "aforement": 145, "plastid": 145, "pgc": 145, "specified_": 145, "hydrogenosom": 145, "hgc": 145, "name_txt": 145, "synonym": 145, "cde": 145, "bct": 145, "vrt": 145, "mam": 145, "pri": 145, "abbrevi": [145, 632], "nodes_new": 145, "nodes_slim": 145, "parent_tax_id": [145, 703], "leftmost": 145, "till": 145, "crop": 145, "tno": 145, "t131567": 145, "tsuperkingdom": 145, "t335928": 145, "tgenu": 145, "131567": 145, "335928": 145, "genu": 145, "federhen": 145, "research": [145, 542, 650], "d1": [145, 804], "d136": 145, "d143": 145, "schoch": 145, "ciufo": 145, "domrachev": 145, "hotton": 145, "kannan": 145, "khovanskaya": 145, "karsch": 145, "mizrachi": 145, "2020": 145, "comprehens": 145, "curat": 145, "kan": 145, "2022": 145, "entrez": 145, "direct": [145, 645, 666], "unix": 145, "taxdump_readm": 145, "ncbiinsight": 145, "ioregistri": [146, 157, 159], "io_registri": 146, "focu": 146, "tutori": 146, "submodul": 146, "myformat": [146, 157, 158, 159], "create_format": [146, 157, 158, 159], "factori": [146, 157, 158, 159, 170, 181], "ideal": 146, "At": 146, "evaul": 146, "readi": 146, "decor": [146, 157, 158, 159, 195, 280, 687, 744, 751, 770, 781, 791], "onto": [146, 176, 651, 744], "_myformat_sniff": 146, "membership": 146, "futher": 146, "someskbioclass": [146, 802], "_myformat_to_some_skbio_class": 146, "kwarg1": 146, "filesentinel": [146, 157, 159], "auxilari": 146, "_some_skbio_class_to_myformat": 146, "receiv": [146, 148, 158, 239, 305, 353, 404, 454, 744], "fileformaterror": 146, "satisfi": [146, 209, 657, 791], "import_modul": 146, "boilerpl": 146, "busi": 146, "logic": [146, 770], "arg": [146, 170, 181, 266, 267, 431, 432], "auth": 146, "password": 146, "buffer_s": 146, "closefd": 146, "exclus": [146, 186, 195, 205, 231, 250, 297, 314, 345, 363, 396, 415, 451, 458, 476], "unabl": 148, "cl": [157, 159, 171, 173, 174, 175, 280, 755], "monkey_patch": [157, 159], "transform": [157, 159, 252, 315, 364, 417, 459, 473, 474, 475, 479, 480, 481, 482, 644, 650, 652], "attach": [157, 159, 685], "overriden": [157, 158, 159], "duplicateregistrationerror": [157, 158, 159], "add_format": [157, 159], "myobject": [157, 159], "myformat_read": [157, 159], "myformat2": [157, 158, 159], "thrown": [158, 705], "ask": 158, "report": [158, 548, 652], "myformat_sniff": 158, "default_write_format": 159, "format_object": 169, "regsistri": [170, 181], "format_nam": [171, 172, 173], "monkei": 176, "patch": 176, "useabl": 176, "unrecognizedformaterror": [177, 178, 179, 182, 183, 184], "formatidentificationwarn": [177, 182], "agre": [177, 182], "member": [177, 182, 770, 791, 809], "argumentoverridewarn": [177, 182], "claim": [178, 183], "registr": 180, "entiti": 186, "transcript": 186, "operon": 186, "accommod": 186, "gene_nam": 186, "ft_current": 186, "hypothet": 186, "gena": 186, "nt": 186, "shown": [186, 476, 644], "diagram": [186, 807], "tggattctgc": 186, "0123456789": 186, "matter": [187, 206, 494, 517], "setter": 194, "copy_from": 195, "storag": 195, "modif": [195, 548], "unbound": [195, 208], "speed": [195, 650], "build": [195, 488], "defer": 195, "until": [195, 488, 728], "fetch": [195, 806], "_interval_tre": 195, "_rebuild_tre": 195, "stale": 195, "delet": [195, 708, 724, 752], "_is_stale_tre": 195, "sagb": [195, 206], "sagc": 195, "saga": [195, 206, 434], "intvl": 195, "drop": [195, 220, 287, 335, 385, 441, 545, 631, 645, 724, 744], "interablemetadata": 206, "shift": 206, "im1": 206, "im2": 206, "negat": 207, "middl": 208, "live": 208, "reca": 209, "900": 209, "criteria": [209, 657, 740], "front": [211, 488], "uppercas": [213, 328, 378, 434], "compliant": [213, 328, 378], "nomenclatur": [213, 280, 328, 378, 434], "incomplet": [213, 280, 328, 378, 434], "3021": [213, 280, 328, 378, 434], "3030": [213, 280, 328, 378, 434], "cornish": [213, 280, 328, 378, 434], "bowden": [213, 280, 328, 378, 434], "accgaat": 213, "86": [213, 378], "truth": [214, 281, 329, 379, 435], "truthi": [214, 281, 329, 379, 435], "put": [215, 282, 330, 380, 436], "ggucgugaagga": [215, 220, 282, 287, 330, 335, 380, 385, 434, 436, 441], "ggu": [215, 282, 330, 380, 436], "ccc": [215, 282, 330, 380, 436], "obtain": [220, 287, 335, 385, 434, 441, 476, 489, 500, 510, 523, 534, 536, 540, 542, 544, 764, 765, 766], "aagga": [220, 287, 335, 385, 441], "cgagc": [220, 287, 335, 385, 441], "ggucg": [220, 231, 287, 297, 335, 345, 385, 396, 441, 451], "guc": [220, 287, 335, 385, 441], "gguc": [222, 224, 227, 235, 256, 257, 258, 259, 289, 291, 294, 301, 319, 320, 321, 322, 337, 339, 342, 349, 368, 369, 370, 371, 387, 389, 392, 400, 421, 422, 423, 424, 443, 445, 448, 452, 463, 464, 465, 466], "ggucguaaagga": [228, 295, 343, 393, 449], "hello": [228, 295, 343, 393, 449], "nucleotidemixin": [229, 263, 394, 428], "reverse_compl": [229, 251, 394, 416, 804], "complement_map": [229, 394], "ttcatt": [229, 251, 263, 394, 416, 428], "aagtaa": [229, 394], "aatgaa": [229, 251, 263, 394, 416, 428], "intersect": [230, 296, 344, 395, 450, 667, 668, 691, 694], "ancestor": [230, 296, 344, 395, 450, 680, 711, 713], "ggaa": [230, 296, 344, 395, 450], "acgtggaa": [230, 296, 344, 395, 450], "coercion": [230, 296, 344, 395, 450], "gg": [231, 237, 297, 303, 345, 351, 396, 402, 451], "has_definit": [232, 234, 244, 248, 260, 298, 300, 308, 312, 323, 346, 348, 356, 360, 372, 397, 399, 409, 413, 425], "acwgn": [232, 234, 260, 298, 300, 323, 346, 348, 372, 397, 399, 425], "gap_char": [233, 280, 299, 347, 398], "ggtc": [233, 299, 347, 398], "att": [233, 299, 347, 398], "56": [233, 299, 347, 398], "ggtccattc": [233, 299, 347, 398], "has_degener": [234, 243, 248, 300, 307, 312, 348, 355, 360, 399, 408, 413], "ham": [235, 301, 349, 400, 452, 489, 804], "fraction_diff": [235, 301, 349, 400, 452], "fraction_sam": [235, 301, 349, 400, 452], "aguc": [235, 256, 258, 301, 319, 321, 349, 368, 370, 400, 421, 423, 452, 463, 465], "custom_metr": [235, 301, 349, 400, 452], "degenerate_map": [236, 280, 302, 350, 401, 804], "trg": [236, 264, 302, 326, 350, 376, 401, 430], "seq_gener": [236, 302, 350, 401], "tgg": [236, 264, 302, 326, 350, 376, 401, 430], "motif_typ": [237, 303, 351, 402], "min_length": [237, 252, 303, 315, 351, 364, 402, 417, 459, 804], "motif": [237, 303, 351, 402, 804], "purin": [237, 303, 351, 402, 804], "pyrimidin": [237, 402], "acggggaggcggag": [237, 303, 351, 402], "motif_slic": [237, 303, 351, 402], "ggggagg": [237, 303, 351, 402], "ggag": [237, 303, 351, 402], "disrupt": [237, 303, 351, 402, 804], "regex": [238, 264, 304, 326, 352, 376, 403, 430, 453], "compil": [238, 264, 304, 326, 352, 376, 403, 430, 453, 660], "pre": [238, 264, 304, 326, 352, 376, 403, 430, 453, 659], "aatataccggttataa": [238, 304, 352, 403, 453], "tata": [238, 304, 352, 403, 453], "tataa": [238, 304, 352, 403, 453], "char": [239, 264, 305, 326, 353, 376, 404, 430, 454], "kmer_frequ": [239, 305, 353, 404, 454], "iter_km": [239, 305, 353, 404, 454], "observed_char": [239, 305, 353, 404, 454], "pprint": [239, 254, 305, 317, 353, 366, 404, 419, 434, 454, 461, 736], "agaagacc": [239, 305, 353, 404, 454], "has_gap": [240, 306, 354, 405], "gc_frequenc": [241, 406], "degap": [241, 242, 406, 407, 804], "acgtacgt": [241, 406], "acttagtt": [241, 406], "asst": [241, 242, 406, 407], "rykmbdhvn": [241, 242, 406, 407], "stand": [242, 407, 542], "ie": [242, 407], "gc_content": [242, 407], "nwnnnnnn": [243, 248, 307, 312, 355, 360, 408, 413], "ancacwwgacgtt": [243, 244, 248, 307, 308, 312, 355, 356, 360, 408, 409, 413], "acac": [244, 253, 308, 316, 356, 365, 409, 418, 460], "gacgtt": [244, 245, 308, 309, 356, 357, 409, 410], "acacgacgtt": [245, 250, 253, 309, 314, 316, 357, 363, 365, 410, 415, 418, 458, 460], "cac": [245, 253, 309, 316, 357, 365, 410, 418, 460], "complement": [251, 263, 278, 416, 428, 804], "aatgtt": [251, 416], "invert": [252, 315, 364, 417, 459], "skip": [252, 315, 364, 417, 459, 540, 542, 543, 544, 548], "adjac": [252, 315, 364, 417, 459], "ungap": [252, 315, 364, 417, 459], "cccc": [252, 315, 364, 417, 459], "no_gap": [252, 315, 364, 417, 459], "ungapped_subsequ": [252, 315, 364, 417, 459], "smaller": [252, 315, 364, 417, 459, 545], "find_motif": [252, 315, 364, 417, 459, 804], "find_with_regex": [252, 315, 364, 417, 459, 804], "acdfnasanftacgnpnrtesl": [252, 315, 364, 417, 459], "subseq": [252, 315, 364, 417, 434, 459], "glycosyl": [252, 315, 351, 364, 417, 459, 804], "nasanfta": [252, 315, 364, 417, 459], "nrte": [252, 315, 364, 417, 459], "kmer": [253, 254, 316, 317, 365, 366, 418, 419, 460, 461, 472], "gacg": [253, 316, 365, 418, 460], "aca": [253, 254, 316, 317, 365, 366, 418, 419, 460, 461], "cga": [253, 316, 365, 418, 460], "gac": [253, 316, 365, 418, 460], "cgt": [253, 316, 365, 418, 460], "gtt": [253, 316, 365, 418, 460], "acacatttatta": [254, 317, 366, 419, 461], "cat": [254, 317, 366, 419, 461, 657, 658], "tta": [254, 317, 366, 419, 461], "intron": [255, 318, 367, 378, 420, 462], "mismatch_frequ": [256, 319, 368, 421, 463, 804], "gauu": [257, 259, 320, 322, 369, 371, 422, 424, 464, 466], "match_frequ": [258, 321, 370, 423, 465, 804], "chosen": [262, 325, 374, 427, 468, 484, 541, 641, 652, 660], "ggtaccaacg": [262, 325, 374, 427, 468], "is_reverse_compl": [263, 428], "within_captur": [264, 326, 376, 430], "captur": [264, 326, 376, 430], "tcg": [264, 326, 376, 430], "translate_six_fram": [265, 266, 278, 429, 431], "taacgtta": [265, 429], "uaacguua": [265, 429], "reverse_transcrib": 266, "atgccactttaa": [266, 267], "mpl": [266, 267, 269, 278, 279, 431, 432], "yeast": [266, 431], "mpt": [266, 431], "independ": [267, 279, 432, 548, 559, 560, 579, 589, 619, 629, 738], "reading_fram": [267, 278, 279, 432], "rf": [267, 279, 432], "geneticcod": [267, 431, 432, 804], "chf": [267, 279, 432], "atl": [267, 279, 432], "lkwh": [267, 279, 432], "sg": [267, 279, 432], "kva": [267, 279, 432], "amino_acid": [269, 270, 275], "from_ncbi": [269, 270, 278, 279, 431, 432], "uuuuuuuuuuuuuuuuccccccccccccccccaaaaaaaaaaaaaaaagggggggggggggggg": 269, "uuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggguuuuccccaaaagggg": 269, "ucagucagucagucagucagucagucagucagucagucagucagucagucagucagucagucag": 269, "histor": [269, 685], "wprintgc": [269, 276, 277], "ffllssssyi": 269, "wllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 269, "base1": 269, "base2": 269, "base3": 269, "candid": [269, 659], "divis": [269, 488, 653], "sr1": 269, "gracilibacteria": 269, "ccgwllllpppphhqqrrrriiimttttnnkkssrrvvvvaaaaddeegggg": 269, "mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm": 269, "augccacuuuaa": [269, 279, 431, 432], "named_gc": 270, "table_id": 277, "thraustochytrium": 277, "tmgc": 277, "prior": [278, 542, 545, 703, 771, 780, 809], "methionin": 278, "fmet": 278, "aguauucugccacuguaagaa": 278, "sgc": [278, 279], "silpl": 278, "cug": 278, "trim": 278, "fact": 278, "conform": 280, "abstract": 280, "grammar": [280, 434], "static": 280, "classproperti": 280, "customsequ": 280, "definite_char": 280, "ababacac": 280, "xxxxxx": 280, "paw": [328, 362, 375], "has_stop": 375, "accgaau": 378, "genetic_cod": [431, 432], "immut": [434, 804], "metdata": 434, "ncrna": 434, "ggucgugaag": 434, "ga": [434, 804], "alic": 434, "desc": 434, "retriev": [434, 513], "attributeerror": [434, 751], "destin": 434, "Be": 434, "illustr": [434, 540, 544, 807], "hasn": [434, 660], "bob": 434, "propag": 434, "carol": 434, "from_iter": 470, "agggta": 471, "cgttta": 471, "atcggcgat": 472, "gcagatgtg": 472, "9230769230": 472, "omic": 473, "inher": [473, 548], "absolut": [473, 542, 768], "x_": [473, 474, 488, 655, 659], "leq": 473, "compon": [473, 474, 475, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 610, 632, 644, 650, 809], "aitchison": [473, 474, 475, 479, 480, 481, 482, 488], "geometri": [473, 475, 479, 480, 482], "euclidean": [473, 489, 541, 644, 650, 652], "perturb": [473, 486], "power": [473, 802], "simul": [473, 655, 658, 659], "strategi": [473, 484, 745], "centr": [473, 479, 480, 648], "clr": [473, 480], "isometr": [473, 474, 475, 481, 482], "ilr": [473, 482], "hypothesi": [473, 476, 542, 545, 548, 655], "nonzero": [473, 478, 484, 485, 486, 487], "pseudocount": [473, 476], "distort": 473, "pawlowski": 473, "glahn": 473, "egozcu": [473, 481, 482, 488], "tolosana": [473, 488], "delgado": [473, 488], "wilei": 473, "chichest": 473, "logratio": 473, "geologi": 473, "martin": [473, 484], "fernandez": [473, 484], "imput": [473, 484], "antibiot": [473, 657], "kill": 473, "harm": 473, "mat": [474, 475, 477, 478, 479, 480, 481, 482, 484, 734], "denominator_idx": [474, 475], "simplex": [474, 481, 482, 488], "denominator_col": 474, "denomin": [474, 475, 488], "amen": 474, "multivari": [474, 540, 541, 543, 544, 644, 645], "involv": 474, "rightarrow": [474, 475, 479, 480, 481, 482], "mathbb": [474, 475, 476, 479, 480, 481, 482], "x_1": [474, 475, 479, 480, 485, 486, 487], "x_d": [474, 475, 479, 480, 485, 486, 487], "ldot": [474, 475, 479, 480, 481, 482, 485, 486, 487], "09861229": 474, "38629436": 474, "69314718": 474, "alr": 475, "y_1": [475, 485, 486], "y_2": 475, "y_": [475, 659], "closur": [475, 485, 486, 487], "x_i": [475, 479, 483, 485, 486, 487, 488], "tau": 476, "theta": 476, "multiple_comparisons_correct": 476, "holm": 476, "bonferroni": 476, "significance_test": 476, "percentil": 476, "differenti": 476, "treatment": [476, 549, 658], "h_": 476, "0i": 476, "u_i": 476, "cutoff": [476, 744], "procedur": [476, 544, 802], "boniferroni": 476, "f_onewai": 476, "25th": 476, "median": [476, 544], "75th": 476, "reject": [476, 655], "multi": 476, "multiplicative_replac": 476, "ttest_ind": 476, "wilcoxon": 476, "kruskal": [476, 658, 659], "top": [476, 703], "mann": 476, "whitnei": 476, "mannwhitneyu": 476, "ttest_rel": 476, "sign": [476, 749], "anova": [476, 543, 559, 560, 579, 589, 619, 629], "walli": [476, 658, 659], "friedman": 476, "friedmanchisquar": 476, "understand": 476, "unsolv": 476, "promis": [476, 807], "001": [476, 655], "address": [476, 802], "1979": 476, "mandal": 476, "et": [476, 548], "al": [476, 548], "novel": 476, "health": [476, 657, 658], "diseas": [476, 542], "s3": [476, 540, 544], "s4": [476, 540, 544], "s5": [476, 540, 544], "s6": [476, 544], "b1": 476, "b2": 476, "b3": 476, "b4": 476, "b5": 476, "b6": 476, "b7": 476, "placebo": 476, "ancom_df": 476, "percentile_df": 476, "scenario": 476, "summar": 476, "conclud": 476, "tell": 476, "geometr": [477, 479, 488, 544], "averag": [477, 549, 550, 649, 653, 718, 744], "17445763": 477, "30216948": 477, "34891526": 477, "32495488": 477, "18761279": 477, "16247744": 477, "isometri": [479, 480, 481, 482], "limits_": [479, 480, 482, 483, 488], "foral": [479, 480], "g_m": 479, "prod": [479, 488], "79451346": 479, "30409883": 479, "5917809": 479, "10136628": 479, "21383822": 480, "26118259": 480, "28865141": 480, "23632778": 480, "basi": [481, 482, 488], "langl": [481, 483], "e_1": [481, 482], "rangle_a": [481, 483], "e_": [481, 482], "orthonorm": [481, 482, 488], "orthornorm": 481, "gram": [481, 482], "schmidt": [481, 482], "orthogon": [481, 482, 488], "spars": [481, 644, 652], "7768362": 481, "68339802": 481, "11704769": 481, "bigoplu": 482, "odot": [482, 487], "e_i": 482, "34180297": 482, "29672718": 482, "22054469": 482, "14092516": 482, "aitchson": 483, "x_j": 483, "y_i": 483, "y_j": 483, "2107852473": 483, "delta": [484, 649], "1875": [484, 485], "375": 484, "0625": [484, 485], "4375": 484, "oplu": 485, "y_d": [485, 486], "ominu": 486, "14285714": 486, "42857143": 486, "28571429": 486, "23059566": 487, "25737316": 487, "26488486": 487, "24714631": 487, "sbp": 488, "partit": 488, "gsi": 488, "buildilrbas": 488, "ith": 488, "balanc": 488, "r_i": 488, "s_i": 488, "contrast": 488, "54772256": 488, "36514837": 488, "70710678": 488, "81649658": 488, "40824829": 488, "\u00e9": 488, "rozan": 488, "hernand": 488, "lapoint": 488, "h\u00e9bert": 488, "gentil": 488, "naess": 488, "marchand": 488, "lafond": 488, "matto": 488, "barlow": 488, "natal": 488, "ionom": 488, "revisit": 488, "nutrient": 488, "3389": 488, "fpl": 488, "00039": 488, "van": 488, "den": 488, "boogaart": 488, "gerald": 488, "raimon": 488, "bren": 488, "matevz": 488, "cran": [488, 540, 541, 542, 543, 544], "subpackag": 489, "deseri": [489, 632], "gender": [489, 657, 658], "gain": [489, 650], "symmetri": [489, 490, 513, 527, 529], "ta": [489, 804], "tb": 489, "tc": 489, "dm_fh": 489, "3x3": [489, 542, 545, 546], "extract": [489, 490, 494, 517, 540, 544, 645, 685, 804], "out_fh": 489, "dm_from_np": 489, "monoton": [489, 490, 545, 546], "asarrai": 490, "squareform": [490, 534], "col": 490, "redund": [490, 507, 513, 532, 631, 652], "lookup_id": [491, 504, 514, 528], "asymmetr": [494, 517], "missingiderror": [494, 500, 502, 504, 510, 517, 523, 526, 528, 536], "from_": [500, 523], "to_": [500, 523], "allow_overlap": [500, 523], "heatmap": [505, 530], "colormap": [505, 530, 641], "colorbar": [505, 530, 641], "red": [505, 530], "binary_dm": [506, 511, 531, 537], "gather": [510, 536, 806], "advantag": [513, 770], "routin": 513, "condens": [513, 524, 529, 534], "condensed_form": [513, 529, 534], "indiscern": 513, "triangl": [513, 527, 534, 542, 650], "planetmath": 513, "metricspac": 513, "randomli": [529, 540, 542, 543, 546, 630, 660, 690, 729], "to_data_fram": 534, "missing_id": 539, "distance_matrix": [540, 541, 543, 544, 647, 650], "categor": [540, 543, 631, 641], "statis": [540, 543], "unpermut": [540, 542, 543], "permanova": [540, 544], "vegan": [540, 541, 542, 543, 544, 644, 645, 652], "clark": [540, 541], "kr": 540, "australian": 540, "117": 540, "143": 540, "4x4": [540, 541, 734], "group1": 540, "group2": 540, "determinist": [540, 544], "group3": 540, "data_fram": 541, "environment": [541, 631, 645, 650, 651], "ph": 541, "rho": 541, "spearmanr": [541, 542], "env": 541, "primer": 541, "ainsworth": 541, "marin": 541, "92": 541, "205": 541, "htm": 541, "elev": 541, "400": 541, "530": 541, "450": 541, "810": 541, "771517": 541, "714286": 541, "side": [542, 545, 548], "triangular": 542, "portion": 542, "r_m": 542, "d_x": 542, "d_y": 542, "ij": 542, "extrem": 542, "reorder": [542, 545, 686, 690], "kendalltau": 542, "nonmatch": [542, 545], "corr_coeff": [542, 548], "pearsonr": [542, 548, 655], "pwmantel": 542, "legendr": [542, 631, 644, 645, 647, 648, 650, 651, 652], "3rd": [542, 610, 651, 750, 809], "edit": [542, 651], "elsevi": [542, 631, 644, 645, 652], "cancer": 542, "220": 542, "6018555": 542, "coeff": 542, "7559": 542, "moder": 542, "rerun": 542, "notifi": 542, "redefin": [542, 751], "henc": 542, "notion": 542, "pseudo": [543, 655], "adoni": 543, "anderson": [543, 544], "marti": [543, 544], "austral": 543, "2001": 543, "usag": 543, "eigh": [544, 650], "number_of_dimens": [544, 650], "homogen": [544, 644, 652], "disperison": 544, "permdisp2": 544, "analogu": 544, "leven": 544, "dispers": 544, "centroid": 544, "spaitial": 544, "eigendecomposit": [544, 650], "eigenvector": [544, 645, 650], "eigenvalu": [544, 632, 644, 650, 652], "fsvd": [544, 650], "lose": [544, 650], "accuraci": [544, 650], "lost": [544, 650], "select": [544, 657, 658, 729], "keyerror": 544, "betadisp": 544, "2006": 544, "245": 544, "253": 544, "g1": 544, "g2": 544, "calucul": 544, "thought": 544, "robust": [544, 548], "yeild": 544, "s7": 544, "conjunct": 544, "collat": 545, "consumpt": [545, 650], "oppos": [545, 809], "dm1": 545, "dm2": 545, "755929": 545, "142857": 545, "num_object": 546, "random_fn": 546, "drawn": [546, 655, 658, 659], "uniform": 546, "rand": 546, "pertain": 547, "host_dist": 548, "par_dist": 548, "hommola": 548, "parasit": 548, "cospeci": 548, "expand": [548, 737], "symbiont": 548, "somewhat": [548, 718], "weaker": 548, "incid": 548, "speciat": 548, "recapitul": 548, "co": 548, "cladogenesi": 548, "although": [548, 658], "loss": 548, "explanatori": [548, 631, 632, 645, 652], "poorli": [548, 650], "perm_stat": 548, "je": 548, "qiu": 548, "gilk": 548, "1457": 548, "1468": 548, "hdist": 548, "3f": 548, "832": 548, "fairli": 548, "inde": 548, "chanc": 548, "mainli": 549, "volatil": 549, "averagegradientanova": 549, "coord_data": 549, "354": 549, "2761": 549, "0341": 549, "0633": 549, "1004": 549, "2364": 549, "2186": 549, "0301": 549, "0225": 549, "356": 549, "2208": 549, "0874": 549, "3519": 549, "0031": 549, "607": 549, "1055": 549, "4140": 549, "116": 549, "634": 549, "3716": 549, "1154": 549, "0721": 549, "0898": 549, "coord": [549, 550, 570, 580, 610, 620], "orient": [549, 641, 657, 726, 802], "metadata_map": [549, 550, 570, 580, 610, 620], "65": 549, "prop_expl": [549, 550, 570, 580, 610, 620], "6216": 549, "7715": 549, "1215": 549, "6913": 549, "8304": 549, "trajectori": [549, 550, 559, 560, 569, 570, 579, 580, 589, 590, 599, 600, 609, 610, 619, 620, 629], "av": 549, "trajectory_categori": [549, 550, 570, 580, 610], "sort_categori": [549, 550, 570, 580, 610], "trajectory_result": 549, "get_trajectori": 549, "avg": 549, "0118478282382": 549, "52199973": 549, "29597001": 549, "20309816": 549, "007022633956606": 549, "ax": [550, 570, 580, 610, 631, 641, 644, 645], "norm": [550, 570, 610, 620], "gradientanova": [550, 570, 610, 620], "gradientanovaresult": [559, 579, 589, 619, 629], "groupresult": 560, "out_f": [569, 599, 609], "raw_f": [569, 599, 609], "categoryresult": 590, "2nd": [610, 750], "window_s": 620, "window": 620, "buf_siz": 630, "bin_f": 630, "bin": 630, "unsign": [630, 716], "resid": 630, "prng": 630, "wherea": 630, "decreas": 630, "overhead": 630, "demultiplex": 630, "123": 630, "samplea": 630, "aattgg": 630, "sampleb": 630, "atatatat": 630, "samplec": 630, "atggcc": 630, "atggct": 630, "atggcg": 630, "atggca": 630, "bin_": 630, "canon": [631, 645, 652, 801], "fish": 631, "transect": 631, "depth": [631, 655, 658, 659, 738, 806], "substrate_cor": 631, "substrate_sand": 631, "substrate_oth": 631, "site10": 631, "specie1": 631, "specie2": 631, "specie3": 631, "specie4": 631, "specie5": 631, "specie6": 631, "specie7": 631, "specie8": 631, "specie9": 631, "substrat": 631, "hot": 631, "perfect": [631, 645], "collinear": [631, 645], "ordination_result": 631, "proportion_explain": [631, 632], "cca1": 631, "466911": 631, "cca2": 631, "238327": 631, "cca3": 631, "100548": 631, "cca4": 631, "104937": 631, "cca5": 631, "044805": 631, "cca6": 631, "029747": 631, "cca7": 631, "012631": 631, "cca8": 631, "001562": 631, "cca9": 631, "000532": 631, "amsterdam": [631, 644, 645, 652], "short_method_nam": [632, 749], "long_method_nam": [632, 749], "biplot_scor": [632, 749], "sample_constraint": 632, "scatterplot": [632, 641], "svg": 632, "ipython": [632, 641], "notebook": [632, 641], "constrain": [632, 645], "legend": 641, "evenli": 641, "set1": 641, "grei": 641, "axes3d": 641, "situat": [641, 657], "mpl_toolkit": 641, "mplot3d": 641, "emperor": 641, "colormaps_refer": 641, "vazquez": 641, "pirrung": 641, "gonzalez": 641, "gigasci": 641, "21712454": 641, "5007512": 641, "91769271": 641, "45995501": 641, "80332382": 641, "65463348": 641, "pcoa_result": 641, "chi": [644, 645], "pca": [644, 650, 652], "steep": 644, "kind": 644, "ecologist": 644, "456": 644, "exhibit": 644, "multimod": 644, "notimplementederror": [644, 645], "nich": 645, "unimod": [645, 650], "habitat": 645, "unconstrain": 645, "deem": 645, "ones": [645, 658], "confus": 645, "ccora": 645, "cajo": 645, "ter": 645, "braak": 645, "1167": 645, "1179": 645, "piet": 645, "verdonschot": 645, "aquat": 645, "1995": 645, "289": 645, "covari": 646, "columnwis": 646, "elementwis": 647, "eq": [647, 648], "e_matrix": 648, "with_mean": [649, 653], "with_std": [649, 653], "ddof": [649, 653], "flatten": 649, "accord": [649, 653], "freedom": [649, 656], "likelyhood": [649, 653], "inplac": [650, 729], "euclidian": 650, "absent": 650, "On": 650, "semimetr": 650, "heterogen": 651, "physic": [651, 659], "scale_i": 652, "conting": 652, "Its": 652, "geq": 652, "focus": 652, "stimat": 653, "wherev": 653, "m_shape": 654, "tol": 654, "linalg": 654, "matrix_rank": 654, "rational": 654, "toler": 654, "precomput": 654, "svd": 654, "hoc": 655, "mont": 655, "carlo": 655, "k_": 655, "mu": 655, "mu_": 655, "neq": 655, "approx": 655, "commit": 655, "ii": 655, "repeatedli": 655, "underpow": 655, "statsmodel": 655, "ind": [655, 659], "dep": 655, "randint": 655, "randn": [655, 658, 659], "617": 655, "533": 655, "788": 655, "602": 655, "229": 655, "779": 655, "838": 655, "032": 655, "157": 655, "051": 655, "601": 655, "664": 655, "783": 655, "646e": 655, "subsample_pow": 655, "draw_mod": [655, 659], "pwr_100": 655, "counts_100": 655, "max_count": [655, 658, 659], "min_count": [655, 658, 659], "counts_interv": [655, 658, 659], "alpha_pwr": [655, 658, 659], "num_it": [655, 658, 659], "pwr_010": 655, "counts_010": 655, "pwr_001": 655, "counts_001": 655, "484": 655, "844": 655, "932": 655, "984": 655, "044": 655, "224": 655, "572": 655, "836": 655, "928": 655, "996": [655, 659], "016": 655, "108": 655, "332": 655, "848": 655, "956": 655, "vec": 656, "meta": [657, 658], "control_cat": [657, 658], "strict_match": [657, 658], "sex": [657, 658], "educ": 657, "diet": 657, "exercis": 657, "statu": [657, 658], "healthi": [657, 658, 659], "undefin": [657, 658, 690], "hous": 657, "abx": 657, "bb": 657, "hstack": [657, 658], "500": [658, 659], "num_run": [658, 659], "sample_count": [658, 659], "cytokin": 658, "transloc": 658, "myeloid": 658, "cell": 658, "cultur": 658, "macrophag": 658, "bone": 658, "marrow": 658, "phagocyt": 658, "periton": 658, "growth": 658, "media": 658, "acquir": 658, "lab": 658, "compani": 658, "labor": 658, "intens": 658, "assai": 658, "preliminari": 658, "cell_lin": 658, "incub": 658, "untreat": 658, "treatment_stat": 658, "groupbi": 658, "00193863362662502": 658, "receptor": 658, "temperatur": 658, "co2": 658, "pwr": 658, "cnt": 658, "528": 658, "088": 658, "127": 658, "168": 658, "adequ": 658, "sublist": 659, "reciproc": 659, "bacteria": [659, 703, 704, 737], "gardnerella": 659, "vaginali": 659, "vagin": 659, "menopaus": 659, "woman": 659, "experienc": 659, "urinari": 659, "tract": 659, "infect": 659, "uti": 659, "women": 659, "enrol": 659, "eight": 659, "week": 659, "particip": 659, "fecal": 659, "clinic": 659, "symptom": 659, "endpoint": [659, 734], "premenopaus": 659, "postmenopaus": 659, "pcr": 659, "pre_rat": 659, "pos_rat": 659, "chisquar": 659, "003": 659, "reproduct": 659, "histori": 659, "bmi": 659, "tobacco": 659, "subsample_paired_pow": 659, "linkag": [659, 702], "pwr_est": 659, "nanmean": 659, "056": 659, "074": 659, "226": 659, "806": 659, "952": 659, "stool": 659, "secondari": 659, "met_po": 659, "2500": 659, "met_neg": 659, "concentr": 659, "chemic": 659, "metabolite_test": 659, "005": 659, "pwr_est2": 659, "counts2": 659, "272": 659, "426": 659, "646": 659, "824": 659, "efficiencywarn": 660, "acceler": 660, "isubsampl": 660, "frequent": [666, 687], "grand": 666, "ellaps": 666, "mutat": 666, "evolutionari": [666, 745], "bootstrap": 666, "posterior": 666, "assur": [667, 668, 691, 694], "unrooted_deepcopi": [667, 668, 691, 694, 726, 727, 741], "unrooted_copi": [667, 668, 691, 694, 727, 742], "tree_copi": [667, 668, 691, 694], "tree_nod": [667, 668, 691, 694], "travers": [667, 668, 687, 691, 694, 698, 701, 712, 715, 718, 719, 720, 735, 741, 742, 806], "tree_copy_nod": [667, 668, 691, 694], "deleg": 671, "noparenterror": 680, "nolengtherror": [680, 696, 705], "lack": 680, "toward": 681, "cach": [682, 687, 693, 697, 698, 699, 701, 708, 717, 721], "child1": [682, 697], "child2": [682, 697], "show_intern": 683, "compact": 683, "topolog": 684, "incom": 685, "species_a": 685, "successfulli": 685, "strip": [685, 689, 690], "czech": 685, "luca": 685, "jaim": 685, "huerta": 685, "cepa": 685, "alexandro": 685, "stamataki": 685, "review": 685, "viewer": 685, "toolkit": 685, "2017": 685, "1535": 685, "speciesa": 685, "lca": [685, 713], "insert_length": 686, "intermedi": 686, "prune": [686, 728, 739, 740], "collaps": 686, "func": [687, 700, 724, 729, 740, 751, 782, 792], "cache_attrnam": 687, "cache_typ": 687, "frozenset": [687, 731, 732], "topologi": [687, 721, 806], "invalidate_cach": [687, 693], "is_tip": [687, 706, 709, 806], "tip_nam": 687, "include_self": [687, 712, 715, 718, 719, 720, 735, 738, 806], "robinson": 688, "fould": 688, "julia": 688, "goodrich": 688, "compare_subset": [688, 690, 731, 732, 806], "compare_tip_dist": [688, 689, 696, 705, 734, 806], "bioscienc": 688, "141": 688, "tree1": [688, 689, 690, 806], "tree2": [688, 689, 690, 806], "exclude_absent_taxa": 689, "compare_rfd": [689, 690], "dist_f": 690, "distance_from_r": 690, "shuffle_f": [690, 729], "mtrand": [690, 729], "randomst": [690, 729], "m1": 690, "m2": 690, "distance_from_r_squar": 690, "dist": [690, 705], "9f": 690, "000133446": 690, "cache_attr": [693, 708], "tip_subset": 695, "replic": 695, "cogent": 695, "totaldescendingbranch": 695, "postord": [695, 698, 712, 715, 719, 720, 735, 738, 806], "tr": 695, "tdbl": 695, "sdbl": 695, "tip_tip_dist": [696, 705], "accumulate_to_ancestor": 696, "get_max_dist": 696, "tip_a": [696, 725], "tip_d": 696, "find_al": [698, 700, 701], "find_by_id": [698, 699, 700], "find_by_func": [698, 699, 701], "node_id": [701, 707, 736], "linkage_matrix": 702, "id_list": 702, "hierarchi": [702, 703, 806], "dmp": 703, "from_taxonomi": [703, 737], "taxdump": 703, "phylum": 703, "set_index": 703, "archaea": [703, 704, 737], "firmicut": [703, 704, 737], "bacteroidet": [703, 704, 737], "lineage_map": 704, "from_taxdump": 704, "clostridia": [704, 737], "bacilli": [704, 737], "sphingobacteria": [704, 737], "euryarchaeota": [704, 737], "thermoplasmata": [704, 737], "halobacteria": [704, 737], "cytophagia": [704, 737], "distant": 705, "is_root": [706, 710, 806], "_leaf_index": 707, "create_cach": 708, "has_children": [709, 710], "tipnam": [711, 713], "lowest": [711, 713], "lowest_common_ancestor": 711, "convienc": [711, 713], "preorder": [712, 715, 718, 719, 735, 738, 806], "pre_and_postord": [712, 715, 718, 720, 735, 738], "non_tip": [712, 718, 719, 720, 735, 738, 744, 806], "node_c": 714, "nontip": 715, "levelord": [715, 718, 719, 720, 735, 738], "tip_count": 716, "remove_delet": [717, 721, 723, 728], "ineleg": 718, "stack": 718, "3x": 718, "worst": 718, "comb": 718, "visit": 719, "reconstruct": [721, 745, 804], "shear": 721, "pop": [721, 723, 724, 728], "to_delet": 721, "clade": [724, 731, 744, 806], "knowledg": [726, 802], "treeerror": [726, 727], "root_at_midpoint": [726, 745], "midpoint": [727, 745], "farthest": 727, "apart": 727, "mid": 727, "lengtherror": 727, "indirectli": 727, "root_at": [727, 741, 742], "lop": 728, "inf": 729, "infinit": [729, 741, 742], "rev": 729, "shuffler": 729, "shuffled_tre": 729, "tip_": 730, "tip_list": 733, "representationwarn": 734, "nan_length_valu": 736, "attribute_nam": 736, "aris": [736, 744], "problemat": 736, "id_index": 736, "child_index": 736, "left_child_id": 736, "right_child_id": 736, "attr_1": 736, "attr_n": 736, "allow_empti": 737, "filter_f": 737, "self_befor": 738, "self_aft": 738, "inord": 738, "elong": 739, "graft": 739, "unpack_by_func": 739, "unpack": 740, "assign_support": 740, "walk": [741, 742, 806, 809], "_not_": 741, "new_tre": [741, 742], "support_attr": 744, "tree_node_class": 744, "_tree": 744, "consensu": 744, "arbitrarili": [744, 809], "usefulli": 744, "disjoint": 744, "adapt": [744, 807], "matthew": 744, "wakefield": 744, "margush": 744, "mcmorri": 744, "fr": 744, "bulletin": 744, "239": 744, "consens": 744, "support_valu": 744, "consensus_tre": 744, "disallow_negative_branch_length": 745, "result_constructor": 745, "saitou": 745, "nei": 745, "3447015": 745, "neighbour_join": 745, "abcd": 745, "contstruct": 745, "render": 745, "newick_str": 745, "ineffici": 746, "success": [747, 771, 809], "alter": 747, "task": [747, 802], "deleteri": 747, "rtol": 748, "assertionerror": [748, 749], "almost": 748, "assert_frame_equ": 748, "helper": [748, 749, 806], "ignore_method_nam": 749, "ignore_axis_label": 749, "ignore_direction": 749, "assert": 749, "direction": 749, "cardin": 750, "0th": 750, "owner": 755, "fn": 768, "subfold": 768, "filenam": 768, "open_fil": 769, "block_siz": 769, "1048576": 769, "checksum": 769, "hashlib": 769, "answer": 769, "stackoverflow": 769, "1131255": 769, "379593": 769, "fd": 769, "baz": 769, "hexdigest": 769, "ab07acbb1e496801937adfa772424bf7": 769, "short_circuit": 770, "offer": 770, "mechan": [770, 809], "prealloc": 770, "enabl": [770, 807, 809], "interrog": 770, "contextu": 770, "iter_": 771, "success_callback": [771, 809], "fail_callback": [771, 809], "engin": 771, "callback": [771, 809], "short_cicruit": 771, "aspect": 771, "_setup_debug_trac": 780, "prioriti": [781, 809], "not_non": [791, 809], "pronounc": 801, "sigh": 801, "kit": 801, "bui": 801, "oh": 801, "workflow": 801, "stabil": 801, "writeabl": 802, "snif": 802, "my_obj": 802, "someformat": 802, "oo": 802, "open_filehandl": 802, "unnam": 802, "twofold": 802, "nonbiolog": 804, "accgggta": 804, "my": 804, "gfp": 804, "ggg": 804, "d2": 804, "d3": 804, "tacccggt": 804, "straightforward": 804, "r1": 804, "gacccgcuuu": 804, "r2": 804, "gccccccuuu": 804, "r3": 804, "accguuaguc": 804, "r4": 804, "acgggu": 804, "uc": 804, "r5": 804, "agg": 804, "ggacugaa": 804, "gga": 804, "gaa": 804, "achiev": 804, "agggga": 804, "ut": 804, "atgtgtatttga": 804, "auguguauuu": 804, "protein_from_dna": 804, "mci": 804, "protein_from_rna": 804, "parenthes": 806, "traver": 806, "wish": 806, "tree3": 806, "6666666666666667": 806, "120492524415": 806, "extent": 807, "numpydoc": 807, "lifecycl": 807, "backward": 807, "cycl": 807, "seriou": 807, "methodolog": 807, "flaw": 807, "aim": 807, "move": 807, "quickli": 807, "philosophi": 807, "transit": 807, "awai": 807, "deprecationwarn": 807, "silenc": 807, "upcom": 807, "circuit": 809, "processor": 809, "nuc_pattern": 809, "aattg": 809, "has_nuc_pattern": 809, "sequenceprocessor": 809, "initialize_st": 809, "check_length": 809, "indicatd": 809, "specfi": 809, "aaaaaaattttttt": 809, "atagacc": 809, "aattgccggac": 809, "atatgaacaaa": 809, "fun": 809, "excit": 809, "success_f": 809, "fail_f": 809, "ccggac": 809, "assist": 809, "ahead": 809, "tttttttaaaaaaa": 809, "debug_trac": 809, "earlier": 809, "caggcc": 809, "anticip": 809, "debug_pre_st": 809, "debug_post_st": 809, "awesom": 809, "piec": 809, "debug_runtim": 809, "diagnos": 809, "aggreg": 809, "cprofil": 809, "quit": 809, "ex": 809, "do_someth": 809, "do_something_els": 809, "foobar": 809, "do_something_awesom": 809}, "objects": {"skbio": [[0, 0, 0, "-", "alignment"], [3, 0, 0, "-", "diversity"], [802, 0, 0, "-", "io"], [803, 0, 0, "-", "metadata"], [804, 0, 0, "-", "sequence"], [805, 0, 0, "-", "stats"], [806, 0, 0, "-", "tree"], [808, 0, 0, "-", "util"], [809, 0, 0, "-", "workflow"]], "skbio.alignment": [[7, 1, 1, "", "AlignmentStructure"], [20, 1, 1, "", "StripedSmithWaterman"], [31, 1, 1, "", "TabularMSA"], [62, 3, 1, "", "global_pairwise_align"], [63, 3, 1, "", "global_pairwise_align_nucleotide"], [64, 3, 1, "", "global_pairwise_align_protein"], [65, 3, 1, "", "local_pairwise_align"], [66, 3, 1, "", "local_pairwise_align_nucleotide"], [67, 3, 1, "", "local_pairwise_align_protein"], [68, 3, 1, "", "local_pairwise_align_ssw"], [69, 3, 1, "", "make_identity_substitution_matrix"]], "skbio.alignment.AlignmentStructure": [[8, 2, 1, "", "__eq__"], [9, 2, 1, "", "__ge__"], [10, 2, 1, "", "__getitem__"], [11, 2, 1, "", "__gt__"], [12, 2, 1, "", "__hash__"], [13, 2, 1, "", "__le__"], [14, 2, 1, "", "__lt__"], [15, 2, 1, "", "__ne__"], [16, 2, 1, "", "__setstate__"], [17, 2, 1, "", "__str__"], [18, 2, 1, "", "is_zero_based"], [19, 2, 1, "", "set_zero_based"]], "skbio.alignment.StripedSmithWaterman": [[21, 2, 1, "", "__call__"], [22, 2, 1, "", "__eq__"], [23, 2, 1, "", "__ge__"], [24, 2, 1, "", "__gt__"], [25, 2, 1, "", "__hash__"], [26, 2, 1, "", "__le__"], [27, 2, 1, "", "__lt__"], [28, 2, 1, "", "__ne__"], [29, 2, 1, "", "__setstate__"], [30, 2, 1, "", "__str__"]], "skbio.alignment.TabularMSA": [[32, 2, 1, "", "__bool__"], [33, 2, 1, "", "__contains__"], [34, 2, 1, "", "__copy__"], [35, 2, 1, "", "__deepcopy__"], [36, 2, 1, "", "__eq__"], [37, 2, 1, "", "__ge__"], [38, 2, 1, "", "__getitem__"], [39, 2, 1, "", "__gt__"], [40, 2, 1, "", "__iter__"], [41, 2, 1, "", "__le__"], [42, 2, 1, "", "__len__"], [43, 2, 1, "", "__lt__"], [44, 2, 1, "", "__ne__"], [45, 2, 1, "", "__reversed__"], [46, 2, 1, "", "__str__"], [47, 2, 1, "", "append"], [48, 2, 1, "", "consensus"], [49, 2, 1, "", "conservation"], [50, 2, 1, "", "extend"], [51, 2, 1, "", "from_dict"], [52, 2, 1, "", "gap_frequencies"], [53, 2, 1, "", "has_metadata"], [54, 2, 1, "", "has_positional_metadata"], [55, 2, 1, "", "iter_positions"], [56, 2, 1, "", "join"], [57, 2, 1, "", "read"], [58, 2, 1, "", "reassign_index"], [59, 2, 1, "", "sort"], [60, 2, 1, "", "to_dict"], [61, 2, 1, "", "write"]], "skbio.diversity": [[70, 0, 0, "-", "alpha"], [102, 3, 1, "", "alpha_diversity"], [103, 0, 0, "-", "beta"], [106, 3, 1, "", "beta_diversity"], [107, 3, 1, "", "block_beta_diversity"], [108, 3, 1, "", "get_alpha_diversity_metrics"], [109, 3, 1, "", "get_beta_diversity_metrics"], [110, 3, 1, "", "partial_beta_diversity"]], "skbio.diversity.alpha": [[71, 3, 1, "", "ace"], [72, 3, 1, "", "berger_parker_d"], [73, 3, 1, "", "brillouin_d"], [74, 3, 1, "", "chao1"], [75, 3, 1, "", "chao1_ci"], [76, 3, 1, "", "dominance"], [77, 3, 1, "", "doubles"], [78, 3, 1, "", "enspie"], [79, 3, 1, "", "esty_ci"], [80, 3, 1, "", "faith_pd"], [81, 3, 1, "", "fisher_alpha"], [82, 3, 1, "", "gini_index"], [83, 3, 1, "", "goods_coverage"], [84, 3, 1, "", "heip_e"], [85, 3, 1, "", "kempton_taylor_q"], [86, 3, 1, "", "lladser_ci"], [87, 3, 1, "", "lladser_pe"], [88, 3, 1, "", "margalef"], [89, 3, 1, "", "mcintosh_d"], [90, 3, 1, "", "mcintosh_e"], [91, 3, 1, "", "menhinick"], [92, 3, 1, "", "michaelis_menten_fit"], [93, 3, 1, "", "observed_otus"], [94, 3, 1, "", "osd"], [95, 3, 1, "", "pielou_e"], [96, 3, 1, "", "robbins"], [97, 3, 1, "", "shannon"], [98, 3, 1, "", "simpson"], [99, 3, 1, "", "simpson_e"], [100, 3, 1, "", "singles"], [101, 3, 1, "", "strong"]], "skbio.diversity.beta": [[104, 3, 1, "", "unweighted_unifrac"], [105, 3, 1, "", "weighted_unifrac"]], "skbio.io": [[111, 4, 1, "", "ArgumentOverrideWarning"], [112, 4, 1, "", "BLAST7FormatError"], [113, 4, 1, "", "ClustalFormatError"], [114, 4, 1, "", "EMBLFormatError"], [115, 4, 1, "", "FASTAFormatError"], [116, 4, 1, "", "FASTQFormatError"], [117, 4, 1, "", "FileFormatError"], [118, 4, 1, "", "FormatIdentificationWarning"], [119, 4, 1, "", "GFF3FormatError"], [120, 4, 1, "", "GenBankFormatError"], [121, 4, 1, "", "IOSourceError"], [122, 4, 1, "", "LSMatFormatError"], [123, 4, 1, "", "NewickFormatError"], [124, 4, 1, "", "OrdinationFormatError"], [125, 4, 1, "", "PhylipFormatError"], [126, 4, 1, "", "QSeqFormatError"], [127, 4, 1, "", "QUALFormatError"], [128, 4, 1, "", "StockholmFormatError"], [129, 4, 1, "", "UnrecognizedFormatError"], [146, 0, 0, "-", "registry"], [185, 0, 0, "-", "util"]], "skbio.io.format": [[130, 0, 0, "-", "binary_dm"], [131, 0, 0, "-", "blast6"], [132, 0, 0, "-", "blast7"], [133, 0, 0, "-", "clustal"], [134, 0, 0, "-", "embl"], [135, 0, 0, "-", "fasta"], [136, 0, 0, "-", "fastq"], [137, 0, 0, "-", "genbank"], [138, 0, 0, "-", "gff3"], [139, 0, 0, "-", "lsmat"], [140, 0, 0, "-", "newick"], [141, 0, 0, "-", "ordination"], [142, 0, 0, "-", "phylip"], [143, 0, 0, "-", "qseq"], [144, 0, 0, "-", "stockholm"], [145, 0, 0, "-", "taxdump"]], "skbio.io.registry": [[147, 4, 1, "", "DuplicateRegistrationError"], [148, 1, 1, "", "Format"], [160, 1, 1, "", "IORegistry"], [180, 4, 1, "", "InvalidRegistrationError"], [181, 3, 1, "", "create_format"], [182, 3, 1, "", "read"], [183, 3, 1, "", "sniff"], [184, 3, 1, "", "write"]], "skbio.io.registry.Format": [[149, 2, 1, "", "__eq__"], [150, 2, 1, "", "__ge__"], [151, 2, 1, "", "__gt__"], [152, 2, 1, "", "__hash__"], [153, 2, 1, "", "__le__"], [154, 2, 1, "", "__lt__"], [155, 2, 1, "", "__ne__"], [156, 2, 1, "", "__str__"], [157, 2, 1, "", "reader"], [158, 2, 1, "", "sniffer"], [159, 2, 1, "", "writer"]], "skbio.io.registry.IORegistry": [[161, 2, 1, "", "__eq__"], [162, 2, 1, "", "__ge__"], [163, 2, 1, "", "__gt__"], [164, 2, 1, "", "__hash__"], [165, 2, 1, "", "__le__"], [166, 2, 1, "", "__lt__"], [167, 2, 1, "", "__ne__"], [168, 2, 1, "", "__str__"], [169, 2, 1, "", "add_format"], [170, 2, 1, "", "create_format"], [171, 2, 1, "", "get_reader"], [172, 2, 1, "", "get_sniffer"], [173, 2, 1, "", "get_writer"], [174, 2, 1, "", "list_read_formats"], [175, 2, 1, "", "list_write_formats"], [176, 2, 1, "", "monkey_patch"], [177, 2, 1, "", "read"], [178, 2, 1, "", "sniff"], [179, 2, 1, "", "write"]], "skbio.io.util": [[4, 3, 1, "", "open"], [5, 3, 1, "", "open_file"], [6, 3, 1, "", "open_files"]], "skbio.metadata": [[186, 1, 1, "", "Interval"], [195, 1, 1, "", "IntervalMetadata"]], "skbio.metadata.Interval": [[187, 2, 1, "", "__eq__"], [188, 2, 1, "", "__ge__"], [189, 2, 1, "", "__gt__"], [190, 2, 1, "", "__le__"], [191, 2, 1, "", "__lt__"], [192, 2, 1, "", "__ne__"], [193, 2, 1, "", "__str__"], [194, 2, 1, "", "drop"]], "skbio.metadata.IntervalMetadata": [[196, 2, 1, "", "__copy__"], [197, 2, 1, "", "__deepcopy__"], [198, 2, 1, "", "__eq__"], [199, 2, 1, "", "__ge__"], [200, 2, 1, "", "__gt__"], [201, 2, 1, "", "__le__"], [202, 2, 1, "", "__lt__"], [203, 2, 1, "", "__ne__"], [204, 2, 1, "", "__str__"], [205, 2, 1, "", "add"], [206, 2, 1, "", "concat"], [207, 2, 1, "", "drop"], [208, 2, 1, "", "merge"], [209, 2, 1, "", "query"], [210, 2, 1, "", "read"], [211, 2, 1, "", "sort"], [212, 2, 1, "", "write"]], "skbio.sequence": [[213, 1, 1, "", "DNA"], [269, 1, 1, "", "GeneticCode"], [280, 1, 1, "", "GrammaredSequence"], [328, 1, 1, "", "Protein"], [378, 1, 1, "", "RNA"], [434, 1, 1, "", "Sequence"], [470, 0, 0, "-", "distance"]], "skbio.sequence.DNA": [[214, 2, 1, "", "__bool__"], [215, 2, 1, "", "__contains__"], [216, 2, 1, "", "__copy__"], [217, 2, 1, "", "__deepcopy__"], [218, 2, 1, "", "__eq__"], [219, 2, 1, "", "__ge__"], [220, 2, 1, "", "__getitem__"], [221, 2, 1, "", "__gt__"], [222, 2, 1, "", "__iter__"], [223, 2, 1, "", "__le__"], [224, 2, 1, "", "__len__"], [225, 2, 1, "", "__lt__"], [226, 2, 1, "", "__ne__"], [227, 2, 1, "", "__reversed__"], [228, 2, 1, "", "__str__"], [229, 2, 1, "", "complement"], [230, 2, 1, "", "concat"], [231, 2, 1, "", "count"], [232, 2, 1, "", "definites"], [233, 2, 1, "", "degap"], [234, 2, 1, "", "degenerates"], [235, 2, 1, "", "distance"], [236, 2, 1, "", "expand_degenerates"], [237, 2, 1, "", "find_motifs"], [238, 2, 1, "", "find_with_regex"], [239, 2, 1, "", "frequencies"], [240, 2, 1, "", "gaps"], [241, 2, 1, "", "gc_content"], [242, 2, 1, "", "gc_frequency"], [243, 2, 1, "", "has_definites"], [244, 2, 1, "", "has_degenerates"], [245, 2, 1, "", "has_gaps"], [246, 2, 1, "", "has_interval_metadata"], [247, 2, 1, "", "has_metadata"], [248, 2, 1, "", "has_nondegenerates"], [249, 2, 1, "", "has_positional_metadata"], [250, 2, 1, "", "index"], [251, 2, 1, "", "is_reverse_complement"], [252, 2, 1, "", "iter_contiguous"], [253, 2, 1, "", "iter_kmers"], [254, 2, 1, "", "kmer_frequencies"], [255, 2, 1, "", "lowercase"], [256, 2, 1, "", "match_frequency"], [257, 2, 1, "", "matches"], [258, 2, 1, "", "mismatch_frequency"], [259, 2, 1, "", "mismatches"], [260, 2, 1, "", "nondegenerates"], [261, 2, 1, "", "read"], [262, 2, 1, "", "replace"], [263, 2, 1, "", "reverse_complement"], [264, 2, 1, "", "to_regex"], [265, 2, 1, "", "transcribe"], [266, 2, 1, "", "translate"], [267, 2, 1, "", "translate_six_frames"], [268, 2, 1, "", "write"]], "skbio.sequence.GeneticCode": [[270, 2, 1, "", "__eq__"], [271, 2, 1, "", "__ge__"], [272, 2, 1, "", "__gt__"], [273, 2, 1, "", "__le__"], [274, 2, 1, "", "__lt__"], [275, 2, 1, "", "__ne__"], [276, 2, 1, "", "__str__"], [277, 2, 1, "", "from_ncbi"], [278, 2, 1, "", "translate"], [279, 2, 1, "", "translate_six_frames"]], "skbio.sequence.GrammaredSequence": [[281, 2, 1, "", "__bool__"], [282, 2, 1, "", "__contains__"], [283, 2, 1, "", "__copy__"], [284, 2, 1, "", "__deepcopy__"], [285, 2, 1, "", "__eq__"], [286, 2, 1, "", "__ge__"], [287, 2, 1, "", "__getitem__"], [288, 2, 1, "", "__gt__"], [289, 2, 1, "", "__iter__"], [290, 2, 1, "", "__le__"], [291, 2, 1, "", "__len__"], [292, 2, 1, "", "__lt__"], [293, 2, 1, "", "__ne__"], [294, 2, 1, "", "__reversed__"], [295, 2, 1, "", "__str__"], [296, 2, 1, "", "concat"], [297, 2, 1, "", "count"], [298, 2, 1, "", "definites"], [299, 2, 1, "", "degap"], [300, 2, 1, "", "degenerates"], [301, 2, 1, "", "distance"], [302, 2, 1, "", "expand_degenerates"], [303, 2, 1, "", "find_motifs"], [304, 2, 1, "", "find_with_regex"], [305, 2, 1, "", "frequencies"], [306, 2, 1, "", "gaps"], [307, 2, 1, "", "has_definites"], [308, 2, 1, "", "has_degenerates"], [309, 2, 1, "", "has_gaps"], [310, 2, 1, "", "has_interval_metadata"], [311, 2, 1, "", "has_metadata"], [312, 2, 1, "", "has_nondegenerates"], [313, 2, 1, "", "has_positional_metadata"], [314, 2, 1, "", "index"], [315, 2, 1, "", "iter_contiguous"], [316, 2, 1, "", "iter_kmers"], [317, 2, 1, "", "kmer_frequencies"], [318, 2, 1, "", "lowercase"], [319, 2, 1, "", "match_frequency"], [320, 2, 1, "", "matches"], [321, 2, 1, "", "mismatch_frequency"], [322, 2, 1, "", "mismatches"], [323, 2, 1, "", "nondegenerates"], [324, 2, 1, "", "read"], [325, 2, 1, "", "replace"], [326, 2, 1, "", "to_regex"], [327, 2, 1, "", "write"]], "skbio.sequence.Protein": [[329, 2, 1, "", "__bool__"], [330, 2, 1, "", "__contains__"], [331, 2, 1, "", "__copy__"], [332, 2, 1, "", "__deepcopy__"], [333, 2, 1, "", "__eq__"], [334, 2, 1, "", "__ge__"], [335, 2, 1, "", "__getitem__"], [336, 2, 1, "", "__gt__"], [337, 2, 1, "", "__iter__"], [338, 2, 1, "", "__le__"], [339, 2, 1, "", "__len__"], [340, 2, 1, "", "__lt__"], [341, 2, 1, "", "__ne__"], [342, 2, 1, "", "__reversed__"], [343, 2, 1, "", "__str__"], [344, 2, 1, "", "concat"], [345, 2, 1, "", "count"], [346, 2, 1, "", "definites"], [347, 2, 1, "", "degap"], [348, 2, 1, "", "degenerates"], [349, 2, 1, "", "distance"], [350, 2, 1, "", "expand_degenerates"], [351, 2, 1, "", "find_motifs"], [352, 2, 1, "", "find_with_regex"], [353, 2, 1, "", "frequencies"], [354, 2, 1, "", "gaps"], [355, 2, 1, "", "has_definites"], [356, 2, 1, "", "has_degenerates"], [357, 2, 1, "", "has_gaps"], [358, 2, 1, "", "has_interval_metadata"], [359, 2, 1, "", "has_metadata"], [360, 2, 1, "", "has_nondegenerates"], [361, 2, 1, "", "has_positional_metadata"], [362, 2, 1, "", "has_stops"], [363, 2, 1, "", "index"], [364, 2, 1, "", "iter_contiguous"], [365, 2, 1, "", "iter_kmers"], [366, 2, 1, "", "kmer_frequencies"], [367, 2, 1, "", "lowercase"], [368, 2, 1, "", "match_frequency"], [369, 2, 1, "", "matches"], [370, 2, 1, "", "mismatch_frequency"], [371, 2, 1, "", "mismatches"], [372, 2, 1, "", "nondegenerates"], [373, 2, 1, "", "read"], [374, 2, 1, "", "replace"], [375, 2, 1, "", "stops"], [376, 2, 1, "", "to_regex"], [377, 2, 1, "", "write"]], "skbio.sequence.RNA": [[379, 2, 1, "", "__bool__"], [380, 2, 1, "", "__contains__"], [381, 2, 1, "", "__copy__"], [382, 2, 1, "", "__deepcopy__"], [383, 2, 1, "", "__eq__"], [384, 2, 1, "", "__ge__"], [385, 2, 1, "", "__getitem__"], [386, 2, 1, "", "__gt__"], [387, 2, 1, "", "__iter__"], [388, 2, 1, "", "__le__"], [389, 2, 1, "", "__len__"], [390, 2, 1, "", "__lt__"], [391, 2, 1, "", "__ne__"], [392, 2, 1, "", "__reversed__"], [393, 2, 1, "", "__str__"], [394, 2, 1, "", "complement"], [395, 2, 1, "", "concat"], [396, 2, 1, "", "count"], [397, 2, 1, "", "definites"], [398, 2, 1, "", "degap"], [399, 2, 1, "", "degenerates"], [400, 2, 1, "", "distance"], [401, 2, 1, "", "expand_degenerates"], [402, 2, 1, "", "find_motifs"], [403, 2, 1, "", "find_with_regex"], [404, 2, 1, "", "frequencies"], [405, 2, 1, "", "gaps"], [406, 2, 1, "", "gc_content"], [407, 2, 1, "", "gc_frequency"], [408, 2, 1, "", "has_definites"], [409, 2, 1, "", "has_degenerates"], [410, 2, 1, "", "has_gaps"], [411, 2, 1, "", "has_interval_metadata"], [412, 2, 1, "", "has_metadata"], [413, 2, 1, "", "has_nondegenerates"], [414, 2, 1, "", "has_positional_metadata"], [415, 2, 1, "", "index"], [416, 2, 1, "", "is_reverse_complement"], [417, 2, 1, "", "iter_contiguous"], [418, 2, 1, "", "iter_kmers"], [419, 2, 1, "", "kmer_frequencies"], [420, 2, 1, "", "lowercase"], [421, 2, 1, "", "match_frequency"], [422, 2, 1, "", "matches"], [423, 2, 1, "", "mismatch_frequency"], [424, 2, 1, "", "mismatches"], [425, 2, 1, "", "nondegenerates"], [426, 2, 1, "", "read"], [427, 2, 1, "", "replace"], [428, 2, 1, "", "reverse_complement"], [429, 2, 1, "", "reverse_transcribe"], [430, 2, 1, "", "to_regex"], [431, 2, 1, "", "translate"], [432, 2, 1, "", "translate_six_frames"], [433, 2, 1, "", "write"]], "skbio.sequence.Sequence": [[435, 2, 1, "", "__bool__"], [436, 2, 1, "", "__contains__"], [437, 2, 1, "", "__copy__"], [438, 2, 1, "", "__deepcopy__"], [439, 2, 1, "", "__eq__"], [440, 2, 1, "", "__ge__"], [441, 2, 1, "", "__getitem__"], [442, 2, 1, "", "__gt__"], [443, 2, 1, "", "__iter__"], [444, 2, 1, "", "__le__"], [445, 2, 1, "", "__len__"], [446, 2, 1, "", "__lt__"], [447, 2, 1, "", "__ne__"], [448, 2, 1, "", "__reversed__"], [449, 2, 1, "", "__str__"], [450, 2, 1, "", "concat"], [451, 2, 1, "", "count"], [452, 2, 1, "", "distance"], [453, 2, 1, "", "find_with_regex"], [454, 2, 1, "", "frequencies"], [455, 2, 1, "", "has_interval_metadata"], [456, 2, 1, "", "has_metadata"], [457, 2, 1, "", "has_positional_metadata"], [458, 2, 1, "", "index"], [459, 2, 1, "", "iter_contiguous"], [460, 2, 1, "", "iter_kmers"], [461, 2, 1, "", "kmer_frequencies"], [462, 2, 1, "", "lowercase"], [463, 2, 1, "", "match_frequency"], [464, 2, 1, "", "matches"], [465, 2, 1, "", "mismatch_frequency"], [466, 2, 1, "", "mismatches"], [467, 2, 1, "", "read"], [468, 2, 1, "", "replace"], [469, 2, 1, "", "write"]], "skbio.sequence.distance": [[471, 3, 1, "", "hamming"], [472, 3, 1, "", "kmer_distance"]], "skbio.stats": [[473, 0, 0, "-", "composition"], [489, 0, 0, "-", "distance"], [547, 0, 0, "-", "evolve"], [549, 0, 0, "-", "gradient"], [630, 3, 1, "", "isubsample"], [631, 0, 0, "-", "ordination"], [655, 0, 0, "-", "power"], [660, 3, 1, "", "subsample_counts"]], "skbio.stats.composition": [[474, 3, 1, "", "alr"], [475, 3, 1, "", "alr_inv"], [476, 3, 1, "", "ancom"], [477, 3, 1, "", "centralize"], [478, 3, 1, "", "closure"], [479, 3, 1, "", "clr"], [480, 3, 1, "", "clr_inv"], [481, 3, 1, "", "ilr"], [482, 3, 1, "", "ilr_inv"], [483, 3, 1, "", "inner"], [484, 3, 1, "", "multiplicative_replacement"], [485, 3, 1, "", "perturb"], [486, 3, 1, "", "perturb_inv"], [487, 3, 1, "", "power"], [488, 3, 1, "", "sbp_basis"]], "skbio.stats.distance": [[490, 1, 1, "", "DissimilarityMatrix"], [512, 4, 1, "", "DissimilarityMatrixError"], [513, 1, 1, "", "DistanceMatrix"], [538, 4, 1, "", "DistanceMatrixError"], [539, 4, 1, "", "MissingIDError"], [540, 3, 1, "", "anosim"], [541, 3, 1, "", "bioenv"], [542, 3, 1, "", "mantel"], [543, 3, 1, "", "permanova"], [544, 3, 1, "", "permdisp"], [545, 3, 1, "", "pwmantel"], [546, 3, 1, "", "randdm"]], "skbio.stats.distance.DissimilarityMatrix": [[491, 2, 1, "", "__contains__"], [492, 2, 1, "", "__eq__"], [493, 2, 1, "", "__ge__"], [494, 2, 1, "", "__getitem__"], [495, 2, 1, "", "__gt__"], [496, 2, 1, "", "__le__"], [497, 2, 1, "", "__lt__"], [498, 2, 1, "", "__ne__"], [499, 2, 1, "", "__str__"], [500, 2, 1, "", "between"], [501, 2, 1, "", "copy"], [502, 2, 1, "", "filter"], [503, 2, 1, "", "from_iterable"], [504, 2, 1, "", "index"], [505, 2, 1, "", "plot"], [506, 2, 1, "", "read"], [507, 2, 1, "", "redundant_form"], [508, 2, 1, "", "to_data_frame"], [509, 2, 1, "", "transpose"], [510, 2, 1, "", "within"], [511, 2, 1, "", "write"]], "skbio.stats.distance.DistanceMatrix": [[514, 2, 1, "", "__contains__"], [515, 2, 1, "", "__eq__"], [516, 2, 1, "", "__ge__"], [517, 2, 1, "", "__getitem__"], [518, 2, 1, "", "__gt__"], [519, 2, 1, "", "__le__"], [520, 2, 1, "", "__lt__"], [521, 2, 1, "", "__ne__"], [522, 2, 1, "", "__str__"], [523, 2, 1, "", "between"], [524, 2, 1, "", "condensed_form"], [525, 2, 1, "", "copy"], [526, 2, 1, "", "filter"], [527, 2, 1, "", "from_iterable"], [528, 2, 1, "", "index"], [529, 2, 1, "", "permute"], [530, 2, 1, "", "plot"], [531, 2, 1, "", "read"], [532, 2, 1, "", "redundant_form"], [533, 2, 1, "", "to_data_frame"], [534, 2, 1, "", "to_series"], [535, 2, 1, "", "transpose"], [536, 2, 1, "", "within"], [537, 2, 1, "", "write"]], "skbio.stats.evolve": [[548, 3, 1, "", "hommola_cospeciation"]], "skbio.stats.gradient": [[550, 1, 1, "", "AverageGradientANOVA"], [560, 1, 1, "", "CategoryResults"], [570, 1, 1, "", "FirstDifferenceGradientANOVA"], [580, 1, 1, "", "GradientANOVA"], [590, 1, 1, "", "GradientANOVAResults"], [600, 1, 1, "", "GroupResults"], [610, 1, 1, "", "TrajectoryGradientANOVA"], [620, 1, 1, "", "WindowDifferenceGradientANOVA"]], "skbio.stats.gradient.AverageGradientANOVA": [[551, 2, 1, "", "__eq__"], [552, 2, 1, "", "__ge__"], [553, 2, 1, "", "__gt__"], [554, 2, 1, "", "__hash__"], [555, 2, 1, "", "__le__"], [556, 2, 1, "", "__lt__"], [557, 2, 1, "", "__ne__"], [558, 2, 1, "", "__str__"], [559, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.CategoryResults": [[561, 2, 1, "", "__eq__"], [562, 2, 1, "", "__ge__"], [563, 2, 1, "", "__gt__"], [564, 2, 1, "", "__hash__"], [565, 2, 1, "", "__le__"], [566, 2, 1, "", "__lt__"], [567, 2, 1, "", "__ne__"], [568, 2, 1, "", "__str__"], [560, 5, 1, "", "category"], [560, 5, 1, "", "groups"], [560, 5, 1, "", "message"], [560, 5, 1, "", "probability"], [569, 2, 1, "", "to_files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[571, 2, 1, "", "__eq__"], [572, 2, 1, "", "__ge__"], [573, 2, 1, "", "__gt__"], [574, 2, 1, "", "__hash__"], [575, 2, 1, "", "__le__"], [576, 2, 1, "", "__lt__"], [577, 2, 1, "", "__ne__"], [578, 2, 1, "", "__str__"], [579, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVA": [[581, 2, 1, "", "__eq__"], [582, 2, 1, "", "__ge__"], [583, 2, 1, "", "__gt__"], [584, 2, 1, "", "__hash__"], [585, 2, 1, "", "__le__"], [586, 2, 1, "", "__lt__"], [587, 2, 1, "", "__ne__"], [588, 2, 1, "", "__str__"], [589, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[591, 2, 1, "", "__eq__"], [592, 2, 1, "", "__ge__"], [593, 2, 1, "", "__gt__"], [594, 2, 1, "", "__hash__"], [595, 2, 1, "", "__le__"], [596, 2, 1, "", "__lt__"], [597, 2, 1, "", "__ne__"], [598, 2, 1, "", "__str__"], [590, 5, 1, "", "algorithm"], [590, 5, 1, "", "categories"], [599, 2, 1, "", "to_files"], [590, 5, 1, "", "weighted"]], "skbio.stats.gradient.GroupResults": [[601, 2, 1, "", "__eq__"], [602, 2, 1, "", "__ge__"], [603, 2, 1, "", "__gt__"], [604, 2, 1, "", "__hash__"], [605, 2, 1, "", "__le__"], [606, 2, 1, "", "__lt__"], [607, 2, 1, "", "__ne__"], [608, 2, 1, "", "__str__"], [600, 5, 1, "", "info"], [600, 5, 1, "", "mean"], [600, 5, 1, "", "message"], [600, 5, 1, "", "name"], [609, 2, 1, "", "to_files"], [600, 5, 1, "", "trajectory"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[611, 2, 1, "", "__eq__"], [612, 2, 1, "", "__ge__"], [613, 2, 1, "", "__gt__"], [614, 2, 1, "", "__hash__"], [615, 2, 1, "", "__le__"], [616, 2, 1, "", "__lt__"], [617, 2, 1, "", "__ne__"], [618, 2, 1, "", "__str__"], [619, 2, 1, "", "get_trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[621, 2, 1, "", "__eq__"], [622, 2, 1, "", "__ge__"], [623, 2, 1, "", "__gt__"], [624, 2, 1, "", "__hash__"], [625, 2, 1, "", "__le__"], [626, 2, 1, "", "__lt__"], [627, 2, 1, "", "__ne__"], [628, 2, 1, "", "__str__"], [629, 2, 1, "", "get_trajectories"]], "skbio.stats.ordination": [[632, 1, 1, "", "OrdinationResults"], [644, 3, 1, "", "ca"], [645, 3, 1, "", "cca"], [646, 3, 1, "", "corr"], [647, 3, 1, "", "e_matrix"], [648, 3, 1, "", "f_matrix"], [649, 3, 1, "", "mean_and_std"], [650, 3, 1, "", "pcoa"], [651, 3, 1, "", "pcoa_biplot"], [652, 3, 1, "", "rda"], [653, 3, 1, "", "scale"], [654, 3, 1, "", "svd_rank"]], "skbio.stats.ordination.OrdinationResults": [[633, 2, 1, "", "__eq__"], [634, 2, 1, "", "__ge__"], [635, 2, 1, "", "__gt__"], [636, 2, 1, "", "__hash__"], [637, 2, 1, "", "__le__"], [638, 2, 1, "", "__lt__"], [639, 2, 1, "", "__ne__"], [640, 2, 1, "", "__str__"], [632, 5, 1, "", "biplot_scores"], [632, 5, 1, "", "eigvals"], [632, 5, 1, "", "features"], [632, 5, 1, "", "long_method_name"], [641, 2, 1, "", "plot"], [632, 5, 1, "", "proportion_explained"], [642, 2, 1, "", "read"], [632, 5, 1, "", "sample_constraints"], [632, 5, 1, "", "samples"], [632, 5, 1, "", "short_method_name"], [643, 2, 1, "", "write"]], "skbio.stats.power": [[656, 3, 1, "", "confidence_bound"], [657, 3, 1, "", "paired_subsamples"], [658, 3, 1, "", "subsample_paired_power"], [659, 3, 1, "", "subsample_power"]], "skbio.tree": [[661, 4, 1, "", "DuplicateNodeError"], [662, 4, 1, "", "MissingNodeError"], [663, 4, 1, "", "NoLengthError"], [664, 4, 1, "", "NoParentError"], [665, 4, 1, "", "TreeError"], [666, 1, 1, "", "TreeNode"], [744, 3, 1, "", "majority_rule"], [745, 3, 1, "", "nj"]], "skbio.tree.TreeNode": [[667, 2, 1, "", "__copy__"], [668, 2, 1, "", "__deepcopy__"], [669, 2, 1, "", "__eq__"], [670, 2, 1, "", "__ge__"], [671, 2, 1, "", "__getitem__"], [672, 2, 1, "", "__gt__"], [673, 2, 1, "", "__hash__"], [674, 2, 1, "", "__iter__"], [675, 2, 1, "", "__le__"], [676, 2, 1, "", "__len__"], [677, 2, 1, "", "__lt__"], [678, 2, 1, "", "__ne__"], [679, 2, 1, "", "__str__"], [680, 2, 1, "", "accumulate_to_ancestor"], [681, 2, 1, "", "ancestors"], [682, 2, 1, "", "append"], [683, 2, 1, "", "ascii_art"], [684, 2, 1, "", "assign_ids"], [685, 2, 1, "", "assign_supports"], [686, 2, 1, "", "bifurcate"], [687, 2, 1, "", "cache_attr"], [688, 2, 1, "", "compare_rfd"], [689, 2, 1, "", "compare_subsets"], [690, 2, 1, "", "compare_tip_distances"], [691, 2, 1, "", "copy"], [692, 2, 1, "", "count"], [693, 2, 1, "", "create_caches"], [694, 2, 1, "", "deepcopy"], [695, 2, 1, "", "descending_branch_length"], [696, 2, 1, "", "distance"], [697, 2, 1, "", "extend"], [698, 2, 1, "", "find"], [699, 2, 1, "", "find_all"], [700, 2, 1, "", "find_by_func"], [701, 2, 1, "", "find_by_id"], [702, 2, 1, "", "from_linkage_matrix"], [703, 2, 1, "", "from_taxdump"], [704, 2, 1, "", "from_taxonomy"], [705, 2, 1, "", "get_max_distance"], [706, 2, 1, "", "has_children"], [707, 2, 1, "", "index_tree"], [708, 2, 1, "", "invalidate_caches"], [709, 2, 1, "", "is_root"], [710, 2, 1, "", "is_tip"], [711, 2, 1, "", "lca"], [712, 2, 1, "", "levelorder"], [713, 2, 1, "", "lowest_common_ancestor"], [714, 2, 1, "", "neighbors"], [715, 2, 1, "", "non_tips"], [716, 2, 1, "", "observed_node_counts"], [717, 2, 1, "", "pop"], [718, 2, 1, "", "postorder"], [719, 2, 1, "", "pre_and_postorder"], [720, 2, 1, "", "preorder"], [721, 2, 1, "", "prune"], [722, 2, 1, "", "read"], [723, 2, 1, "", "remove"], [724, 2, 1, "", "remove_deleted"], [725, 2, 1, "", "root"], [726, 2, 1, "", "root_at"], [727, 2, 1, "", "root_at_midpoint"], [728, 2, 1, "", "shear"], [729, 2, 1, "", "shuffle"], [730, 2, 1, "", "siblings"], [731, 2, 1, "", "subset"], [732, 2, 1, "", "subsets"], [733, 2, 1, "", "subtree"], [734, 2, 1, "", "tip_tip_distances"], [735, 2, 1, "", "tips"], [736, 2, 1, "", "to_array"], [737, 2, 1, "", "to_taxonomy"], [738, 2, 1, "", "traverse"], [739, 2, 1, "", "unpack"], [740, 2, 1, "", "unpack_by_func"], [741, 2, 1, "", "unrooted_copy"], [742, 2, 1, "", "unrooted_deepcopy"], [743, 2, 1, "", "write"]], "skbio.util": [[746, 4, 1, "", "EfficiencyWarning"], [747, 4, 1, "", "RepresentationWarning"], [748, 3, 1, "", "assert_data_frame_almost_equal"], [749, 3, 1, "", "assert_ordination_results_equal"], [750, 3, 1, "", "cardinal_to_ordinal"], [751, 1, 1, "", "classproperty"], [767, 3, 1, "", "find_duplicates"], [768, 3, 1, "", "get_data_path"], [769, 3, 1, "", "safe_md5"]], "skbio.util.classproperty": [[752, 2, 1, "", "__delete__"], [753, 2, 1, "", "__eq__"], [754, 2, 1, "", "__ge__"], [755, 2, 1, "", "__get__"], [756, 2, 1, "", "__gt__"], [757, 2, 1, "", "__hash__"], [758, 2, 1, "", "__le__"], [759, 2, 1, "", "__lt__"], [760, 2, 1, "", "__ne__"], [761, 2, 1, "", "__set__"], [762, 2, 1, "", "__set_name__"], [763, 2, 1, "", "__str__"], [764, 2, 1, "", "deleter"], [765, 2, 1, "", "getter"], [766, 2, 1, "", "setter"]], "skbio.workflow": [[770, 1, 1, "", "Workflow"], [781, 1, 1, "", "method"], [791, 1, 1, "", "requires"]], "skbio.workflow.Workflow": [[771, 2, 1, "", "__call__"], [772, 2, 1, "", "__eq__"], [773, 2, 1, "", "__ge__"], [774, 2, 1, "", "__gt__"], [775, 2, 1, "", "__hash__"], [776, 2, 1, "", "__le__"], [777, 2, 1, "", "__lt__"], [778, 2, 1, "", "__ne__"], [779, 2, 1, "", "__str__"], [780, 2, 1, "", "initialize_state"]], "skbio.workflow.method": [[782, 2, 1, "", "__call__"], [783, 2, 1, "", "__eq__"], [784, 2, 1, "", "__ge__"], [785, 2, 1, "", "__gt__"], [786, 2, 1, "", "__hash__"], [787, 2, 1, "", "__le__"], [788, 2, 1, "", "__lt__"], [789, 2, 1, "", "__ne__"], [790, 2, 1, "", "__str__"]], "skbio.workflow.requires": [[792, 2, 1, "", "__call__"], [793, 2, 1, "", "__eq__"], [794, 2, 1, "", "__ge__"], [795, 2, 1, "", "__gt__"], [796, 2, 1, "", "__hash__"], [797, 2, 1, "", "__le__"], [798, 2, 1, "", "__lt__"], [799, 2, 1, "", "__ne__"], [800, 2, 1, "", "__str__"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:exception", "5": "py:attribute"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "exception", "Python exception"], "5": ["py", "attribute", "Python attribute"]}, "titleterms": {"align": [0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 133, 142, 144], "skbio": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 804, 805, 806, 808, 809], "data": [0, 135, 489], "structur": [0, 1, 489], "optim": 0, "i": [0, 1, 146, 185, 802], "e": 0, "product": [0, 134], "readi": 0, "algorithm": 0, "slow": 0, "educ": 0, "purpos": 0, "onli": [0, 143], "gener": [0, 134, 135, 143], "function": [0, 3, 70, 103, 146, 185, 470, 473, 489, 547, 631, 655, 802, 805, 806, 808], "exampl": [0, 1], "code": 1, "guidelin": 1, "what": [1, 802], "ar": 1, "name": [1, 145], "convent": 1, "how": 1, "should": 1, "format": [1, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 802], "my": 1, "call": 1, "variabl": [1, 489], "accept": 1, "abbrevi": 1, "do": 1, "organ": 1, "modul": [1, 2], "sourc": 1, "file": [1, 134, 135, 137, 802], "write": [1, 61, 135, 137, 179, 184, 212, 268, 327, 377, 433, 469, 511, 537, 643, 743, 802], "comment": [1, 140], "test": [1, 808], "some": 1, "pointer": 1, "nose": 1, "git": 1, "author": 1, "commit": 1, "messag": 1, "ad": [2, 140], "new": [2, 146], "divers": [3, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110], "calcul": 3, "driver": 3, "input": 3, "valid": 3, "count": [3, 231, 297, 345, 396, 451, 692], "vector": 3, "specifi": 3, "metric": [3, 470], "subpackag": [3, 802, 804, 805], "io": [4, 5, 6, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 802], "util": [4, 5, 6, 185, 631, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 806, 808], "open": 4, "open_fil": [5, 6], "alignmentstructur": [7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], "__eq__": [8, 22, 36, 149, 161, 187, 198, 218, 270, 285, 333, 383, 439, 492, 515, 551, 561, 571, 581, 591, 601, 611, 621, 633, 669, 753, 772, 783, 793], "__ge__": [9, 23, 37, 150, 162, 188, 199, 219, 271, 286, 334, 384, 440, 493, 516, 552, 562, 572, 582, 592, 602, 612, 622, 634, 670, 754, 773, 784, 794], "__getitem__": [10, 38, 220, 287, 335, 385, 441, 494, 517, 671], "__gt__": [11, 24, 39, 151, 163, 189, 200, 221, 272, 288, 336, 386, 442, 495, 518, 553, 563, 573, 583, 593, 603, 613, 623, 635, 672, 756, 774, 785, 795], "__hash__": [12, 25, 152, 164, 554, 564, 574, 584, 594, 604, 614, 624, 636, 673, 757, 775, 786, 796], "__le__": [13, 26, 41, 153, 165, 190, 201, 223, 273, 290, 338, 388, 444, 496, 519, 555, 565, 575, 585, 595, 605, 615, 625, 637, 675, 758, 776, 787, 797], "__lt__": [14, 27, 43, 154, 166, 191, 202, 225, 274, 292, 340, 390, 446, 497, 520, 556, 566, 576, 586, 596, 606, 616, 626, 638, 677, 759, 777, 788, 798], "__ne__": [15, 28, 44, 155, 167, 192, 203, 226, 275, 293, 341, 391, 447, 498, 521, 557, 567, 577, 587, 597, 607, 617, 627, 639, 678, 760, 778, 789, 799], "__setstate__": [16, 29], "__str__": [17, 30, 46, 156, 168, 193, 204, 228, 276, 295, 343, 393, 449, 499, 522, 558, 568, 578, 588, 598, 608, 618, 628, 640, 679, 763, 779, 790, 800], "is_zero_bas": 18, "set_zero_bas": 19, "stripedsmithwaterman": [20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30], "__call__": [21, 771, 782, 792], "tabularmsa": [31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 135], "__bool__": [32, 214, 281, 329, 379, 435], "__contains__": [33, 215, 282, 330, 380, 436, 491, 514], "__copy__": [34, 196, 216, 283, 331, 381, 437, 667], "__deepcopy__": [35, 197, 217, 284, 332, 382, 438, 668], "__iter__": [40, 222, 289, 337, 387, 443, 674], "__len__": [42, 224, 291, 339, 389, 445, 676], "__reversed__": [45, 227, 294, 342, 392, 448], "append": [47, 682], "consensu": 48, "conserv": 49, "extend": [50, 697], "from_dict": 51, "gap_frequ": 52, "has_metadata": [53, 247, 311, 359, 412, 456], "has_positional_metadata": [54, 249, 313, 361, 414, 457], "iter_posit": 55, "join": 56, "read": [57, 134, 135, 137, 177, 182, 210, 261, 324, 373, 426, 467, 506, 531, 642, 722, 802], "reassign_index": 58, "sort": [59, 211], "to_dict": 60, "global_pairwise_align": 62, "global_pairwise_align_nucleotid": 63, "global_pairwise_align_protein": 64, "local_pairwise_align": 65, "local_pairwise_align_nucleotid": 66, "local_pairwise_align_protein": 67, "local_pairwise_align_ssw": 68, "make_identity_substitution_matrix": 69, "alpha": [70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101], "measur": [70, 103], "ac": 71, "berger_parker_d": 72, "brillouin_d": 73, "chao1": 74, "chao1_ci": 75, "domin": 76, "doubl": 77, "enspi": 78, "esty_ci": 79, "faith_pd": 80, "fisher_alpha": 81, "gini_index": 82, "goods_coverag": 83, "heip_": 84, "kempton_taylor_q": 85, "lladser_ci": 86, "lladser_p": 87, "margalef": 88, "mcintosh_d": 89, "mcintosh_": 90, "menhinick": 91, "michaelis_menten_fit": 92, "observed_otu": 93, "osd": 94, "pielou_": 95, "robbin": 96, "shannon": 97, "simpson": 98, "simpson_": 99, "singl": 100, "strong": 101, "alpha_divers": 102, "beta": [103, 104, 105], "unweighted_unifrac": 104, "weighted_unifrac": 105, "beta_divers": 106, "block_beta_divers": 107, "get_alpha_diversity_metr": 108, "get_beta_diversity_metr": 109, "partial_beta_divers": 110, "argumentoverridewarn": 111, "blast7formaterror": 112, "clustalformaterror": 113, "emblformaterror": 114, "fastaformaterror": 115, "fastqformaterror": 116, "fileformaterror": 117, "formatidentificationwarn": 118, "gff3formaterror": 119, "genbankformaterror": 120, "iosourceerror": 121, "lsmatformaterror": 122, "newickformaterror": 123, "ordinationformaterror": 124, "phylipformaterror": 125, "qseqformaterror": 126, "qualformaterror": 127, "stockholmformaterror": 128, "unrecognizedformaterror": 129, "simpl": 130, "binari": 130, "dissimilar": 130, "matrix": [130, 139, 489], "binary_dm": 130, "support": [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 802], "specif": [130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145], "blast": [131, 132], "6": 131, "blast6": 131, "column": [131, 132], "type": [131, 132], "paramet": [131, 133, 135, 136, 137, 138, 139, 140, 142, 143, 144, 145], "7": 132, "blast7": 132, "clustal": 133, "section": [133, 134, 137, 142], "embl": 134, "featur": [134, 137], "level": 134, "befor": [134, 137], "fh": 134, "header": [134, 135, 142, 144], "ft": 134, "sq": 134, "us": [134, 802], "fasta": 135, "qual": 135, "sequenc": [135, 142, 144, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 804], "reader": [135, 137, 138, 157], "writer": [135, 138, 159], "fastq": 136, "qualiti": 136, "score": 136, "variant": 136, "genbank": 137, "locat": 137, "string": 137, "origin": 137, "gff3": 138, "label": [139, 140], "squar": 139, "lsmat": 139, "newick": 140, "formal": 140, "grammar": 140, "explan": 140, "basic": 140, "symbol": 140, "applic": 140, "rule": 140, "node": [140, 145], "inform": 140, "advanc": 140, "length": 140, "inlin": 140, "whitespac": 140, "caveat": 140, "ordin": [141, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654], "result": 141, "phylip": 142, "multipl": [142, 144], "qseq": 143, "stockholm": 144, "metadata": [144, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 803], "gf": 144, "g": 144, "gr": 144, "gc": 144, "footer": 144, "taxdump": 145, "dmp": 145, "divis": 145, "gencod": 145, "o": [146, 185, 802], "registri": [146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "class": [146, 489, 549, 631, 803, 804, 806, 809], "except": [146, 489, 802, 806], "creat": 146, "scikit": [146, 801, 802], "bio": [146, 801, 802], "reserv": 146, "keyword": 146, "argument": 146, "duplicateregistrationerror": 147, "sniffer": 158, "ioregistri": [160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179], "add_format": 169, "create_format": [170, 181], "get_read": 171, "get_sniff": 172, "get_writ": 173, "list_read_format": 174, "list_write_format": 175, "monkey_patch": 176, "sniff": [178, 183], "invalidregistrationerror": 180, "interv": [186, 187, 188, 189, 190, 191, 192, 193, 194], "drop": [194, 207], "intervalmetadata": [195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212], "add": 205, "concat": [206, 230, 296, 344, 395, 450], "merg": 208, "queri": 209, "dna": [213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268], "complement": [229, 394], "definit": [232, 298, 346, 397], "degap": [233, 299, 347, 398], "degener": [234, 300, 348, 399], "distanc": [235, 301, 349, 400, 452, 470, 471, 472, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 696], "expand_degener": [236, 302, 350, 401], "find_motif": [237, 303, 351, 402], "find_with_regex": [238, 304, 352, 403, 453], "frequenc": [239, 305, 353, 404, 454], "gap": [240, 306, 354, 405], "gc_content": [241, 406], "gc_frequenc": [242, 407], "has_definit": [243, 307, 355, 408], "has_degener": [244, 308, 356, 409], "has_gap": [245, 309, 357, 410], "has_interval_metadata": [246, 310, 358, 411, 455], "has_nondegener": [248, 312, 360, 413], "index": [250, 314, 363, 415, 458, 504, 528], "is_reverse_compl": [251, 416], "iter_contigu": [252, 315, 364, 417, 459], "iter_km": [253, 316, 365, 418, 460], "kmer_frequ": [254, 317, 366, 419, 461], "lowercas": [255, 318, 367, 420, 462], "match_frequ": [256, 319, 368, 421, 463], "match": [257, 320, 369, 422, 464], "mismatch_frequ": [258, 321, 370, 423, 465], "mismatch": [259, 322, 371, 424, 466], "nondegener": [260, 323, 372, 425], "replac": [262, 325, 374, 427, 468], "reverse_compl": [263, 428], "to_regex": [264, 326, 376, 430], "transcrib": 265, "translat": [266, 278, 431], "translate_six_fram": [267, 279, 432], "geneticcod": [269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279], "from_ncbi": 277, "grammaredsequ": [280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327], "protein": [328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377], "has_stop": 362, "stop": 375, "rna": [378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433], "reverse_transcrib": 429, "ham": 471, "kmer_dist": 472, "composit": [473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488], "statist": [473, 489, 547, 805], "stat": [473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 805], "alr": 474, "alr_inv": 475, "ancom": 476, "central": 477, "closur": 478, "clr": 479, "clr_inv": 480, "ilr": 481, "ilr_inv": 482, "inner": 483, "multiplicative_replac": 484, "perturb": 485, "perturb_inv": 486, "power": [487, 655, 656, 657, 658, 659], "sbp_basi": 488, "matric": 489, "base": 489, "dissimilaritymatrix": [489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511], "distancematrix": [489, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537], "categor": 489, "continu": 489, "comparison": 489, "between": [500, 523], "copi": [501, 525, 691], "filter": [502, 526], "from_iter": [503, 527], "plot": [505, 530, 641], "redundant_form": [507, 532], "to_data_fram": [508, 533], "transpos": [509, 535], "within": [510, 536], "dissimilaritymatrixerror": 512, "condensed_form": 524, "permut": 529, "to_seri": 534, "distancematrixerror": 538, "missingiderror": 539, "anosim": 540, "bioenv": 541, "mantel": 542, "permanova": 543, "permdisp": 544, "pwmantel": 545, "randdm": 546, "evolutionari": 547, "evolv": [547, 548], "cophylogenet": 547, "method": [547, 631, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790], "hommola_cospeci": 548, "gradient": [549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629], "analys": 549, "averagegradientanova": [550, 551, 552, 553, 554, 555, 556, 557, 558, 559], "get_trajectori": [559, 579, 589, 619, 629], "categoryresult": [560, 561, 562, 563, 564, 565, 566, 567, 568, 569], "to_fil": [569, 599, 609], "firstdifferencegradientanova": [570, 571, 572, 573, 574, 575, 576, 577, 578, 579], "gradientanova": [580, 581, 582, 583, 584, 585, 586, 587, 588, 589], "gradientanovaresult": [590, 591, 592, 593, 594, 595, 596, 597, 598, 599], "groupresult": [600, 601, 602, 603, 604, 605, 606, 607, 608, 609], "trajectorygradientanova": [610, 611, 612, 613, 614, 615, 616, 617, 618, 619], "windowdifferencegradientanova": [620, 621, 622, 623, 624, 625, 626, 627, 628, 629], "isubsampl": 630, "ordinationresult": [632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643], "ca": 644, "cca": 645, "corr": 646, "e_matrix": 647, "f_matrix": 648, "mean_and_std": 649, "pcoa": 650, "pcoa_biplot": 651, "rda": 652, "scale": 653, "svd_rank": 654, "empir": 655, "estim": 655, "confidence_bound": 656, "paired_subsampl": 657, "subsample_paired_pow": 658, "subsample_pow": 659, "subsample_count": 660, "tree": [661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 806], "duplicatenodeerror": 661, "missingnodeerror": 662, "nolengtherror": 663, "noparenterror": 664, "treeerror": 665, "treenod": [666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743], "accumulate_to_ancestor": 680, "ancestor": 681, "ascii_art": 683, "assign_id": 684, "assign_support": 685, "bifurc": 686, "cache_attr": 687, "compare_rfd": 688, "compare_subset": 689, "compare_tip_dist": 690, "create_cach": 693, "deepcopi": 694, "descending_branch_length": 695, "find": 698, "find_al": 699, "find_by_func": 700, "find_by_id": 701, "from_linkage_matrix": 702, "from_taxdump": 703, "from_taxonomi": 704, "get_max_dist": 705, "has_children": 706, "index_tre": 707, "invalidate_cach": 708, "is_root": 709, "is_tip": 710, "lca": 711, "levelord": 712, "lowest_common_ancestor": 713, "neighbor": 714, "non_tip": 715, "observed_node_count": 716, "pop": 717, "postord": 718, "pre_and_postord": 719, "preorder": 720, "prune": 721, "remov": 723, "remove_delet": 724, "root": 725, "root_at": 726, "root_at_midpoint": 727, "shear": 728, "shuffl": 729, "sibl": 730, "subset": [731, 732], "subtre": 733, "tip_tip_dist": 734, "tip": 735, "to_arrai": 736, "to_taxonomi": 737, "travers": 738, "unpack": 739, "unpack_by_func": 740, "unrooted_copi": 741, "unrooted_deepcopi": 742, "majority_rul": 744, "nj": 745, "efficiencywarn": 746, "representationwarn": 747, "assert_data_frame_almost_equ": 748, "assert_ordination_results_equ": 749, "cardinal_to_ordin": 750, "classproperti": [751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766], "__delete__": 752, "__get__": 755, "__set__": 761, "__set_name__": 762, "delet": 764, "getter": 765, "setter": 766, "find_dupl": 767, "get_data_path": 768, "safe_md5": 769, "workflow": [770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 809], "initialize_st": 780, "requir": [791, 792, 793, 794, 795, 796, 797, 798, 799, 800], "api": [801, 807], "refer": 801, "user": [801, 802], "document": 801, "develop": 801, "warn": 802, "introduct": 802, "kind": 802, "can": 802, "from": 802, "represent": 806, "phylogenet": 806, "reconstruct": 806, "stabil": 807, "stabl": 807, "experiment": 807, "deprec": 807, "miscellan": 808, "construct": 809, "decor": 809}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 58}, "alltitles": {"Alignments (skbio.alignment)": [[0, "alignments-skbio-alignment"]], "Data Structures": [[0, "data-structures"]], "Optimized (i.e., production-ready) Alignment Algorithms": [[0, "optimized-i-e-production-ready-alignment-algorithms"]], "Slow (i.e., educational-purposes only) Alignment Algorithms": [[0, "slow-i-e-educational-purposes-only-alignment-algorithms"]], "General functionality": [[0, "general-functionality"]], "Data Structure Examples": [[0, "data-structure-examples"]], "Alignment Algorithm Examples": [[0, "alignment-algorithm-examples"]], "Optimized Alignment Algorithm Examples": [[0, "optimized-alignment-algorithm-examples"]], "Slow Alignment Algorithm Examples": [[0, "slow-alignment-algorithm-examples"]], "Coding guidelines": [[1, "coding-guidelines"]], "What are the naming conventions? and How should I format my code?": [[1, "what-are-the-naming-conventions-and-how-should-i-format-my-code"]], "What should I call my variables?": [[1, "what-should-i-call-my-variables"]], "Acceptable abbreviations": [[1, "acceptable-abbreviations"]], "How do I organize my modules (source files)?": [[1, "how-do-i-organize-my-modules-source-files"]], "Example of module structure": [[1, "example-of-module-structure"]], "How should I write comments?": [[1, "how-should-i-write-comments"]], "How should I test my code ?": [[1, "how-should-i-test-my-code"]], "Some pointers": [[1, "some-pointers"]], "Example of a nose test module structure": [[1, "example-of-a-nose-test-module-structure"]], "Git pointers": [[1, "git-pointers"]], "Authoring a commit message": [[1, "authoring-a-commit-message"]], "Writing a commit message": [[1, "writing-a-commit-message"]], "Adding a new module to skbio": [[2, "adding-a-new-module-to-skbio"]], "Diversity calculations (skbio.diversity)": [[3, "diversity-calculations-skbio-diversity"]], "Driver functions": [[3, "driver-functions"]], "Input validation": [[3, "input-validation"]], "Count vectors": [[3, "count-vectors"]], "Specifying a diversity metric": [[3, "specifying-a-diversity-metric"]], "Subpackages": [[3, "subpackages"], [802, "subpackages"], [804, "subpackages"], [805, "subpackages"]], "Functions": [[3, "functions"], [70, "functions"], [103, "functions"], [146, "functions"], [185, "functions"], [470, "functions"], [473, "functions"], [489, "functions"], [547, "functions"], [655, "functions"], [805, "functions"]], "skbio.io.util.open": [[4, "skbio-io-util-open"]], "skbio.io.util.open_file": [[5, "skbio-io-util-open-file"]], "skbio.io.util.open_files": [[6, "skbio-io-util-open-files"]], "skbio.alignment.AlignmentStructure": [[7, "skbio-alignment-alignmentstructure"]], "skbio.alignment.AlignmentStructure.__eq__": [[8, "skbio-alignment-alignmentstructure-eq"]], "skbio.alignment.AlignmentStructure.__ge__": [[9, "skbio-alignment-alignmentstructure-ge"]], "skbio.alignment.AlignmentStructure.__getitem__": [[10, "skbio-alignment-alignmentstructure-getitem"]], "skbio.alignment.AlignmentStructure.__gt__": [[11, "skbio-alignment-alignmentstructure-gt"]], "skbio.alignment.AlignmentStructure.__hash__": [[12, "skbio-alignment-alignmentstructure-hash"]], "skbio.alignment.AlignmentStructure.__le__": [[13, "skbio-alignment-alignmentstructure-le"]], "skbio.alignment.AlignmentStructure.__lt__": [[14, "skbio-alignment-alignmentstructure-lt"]], "skbio.alignment.AlignmentStructure.__ne__": [[15, "skbio-alignment-alignmentstructure-ne"]], "skbio.alignment.AlignmentStructure.__setstate__": [[16, "skbio-alignment-alignmentstructure-setstate"]], "skbio.alignment.AlignmentStructure.__str__": [[17, "skbio-alignment-alignmentstructure-str"]], "skbio.alignment.AlignmentStructure.is_zero_based": [[18, "skbio-alignment-alignmentstructure-is-zero-based"]], "skbio.alignment.AlignmentStructure.set_zero_based": [[19, "skbio-alignment-alignmentstructure-set-zero-based"]], "skbio.alignment.StripedSmithWaterman": [[20, "skbio-alignment-stripedsmithwaterman"]], "skbio.alignment.StripedSmithWaterman.__call__": [[21, "skbio-alignment-stripedsmithwaterman-call"]], "skbio.alignment.StripedSmithWaterman.__eq__": [[22, "skbio-alignment-stripedsmithwaterman-eq"]], "skbio.alignment.StripedSmithWaterman.__ge__": [[23, "skbio-alignment-stripedsmithwaterman-ge"]], "skbio.alignment.StripedSmithWaterman.__gt__": [[24, "skbio-alignment-stripedsmithwaterman-gt"]], "skbio.alignment.StripedSmithWaterman.__hash__": [[25, "skbio-alignment-stripedsmithwaterman-hash"]], "skbio.alignment.StripedSmithWaterman.__le__": [[26, "skbio-alignment-stripedsmithwaterman-le"]], "skbio.alignment.StripedSmithWaterman.__lt__": [[27, "skbio-alignment-stripedsmithwaterman-lt"]], "skbio.alignment.StripedSmithWaterman.__ne__": [[28, "skbio-alignment-stripedsmithwaterman-ne"]], "skbio.alignment.StripedSmithWaterman.__setstate__": [[29, "skbio-alignment-stripedsmithwaterman-setstate"]], "skbio.alignment.StripedSmithWaterman.__str__": [[30, "skbio-alignment-stripedsmithwaterman-str"]], "skbio.alignment.TabularMSA": [[31, "skbio-alignment-tabularmsa"]], "skbio.alignment.TabularMSA.__bool__": [[32, "skbio-alignment-tabularmsa-bool"]], "skbio.alignment.TabularMSA.__contains__": [[33, "skbio-alignment-tabularmsa-contains"]], "skbio.alignment.TabularMSA.__copy__": [[34, "skbio-alignment-tabularmsa-copy"]], "skbio.alignment.TabularMSA.__deepcopy__": [[35, "skbio-alignment-tabularmsa-deepcopy"]], "skbio.alignment.TabularMSA.__eq__": [[36, "skbio-alignment-tabularmsa-eq"]], "skbio.alignment.TabularMSA.__ge__": [[37, "skbio-alignment-tabularmsa-ge"]], "skbio.alignment.TabularMSA.__getitem__": [[38, "skbio-alignment-tabularmsa-getitem"]], "skbio.alignment.TabularMSA.__gt__": [[39, "skbio-alignment-tabularmsa-gt"]], "skbio.alignment.TabularMSA.__iter__": [[40, "skbio-alignment-tabularmsa-iter"]], "skbio.alignment.TabularMSA.__le__": [[41, "skbio-alignment-tabularmsa-le"]], "skbio.alignment.TabularMSA.__len__": [[42, "skbio-alignment-tabularmsa-len"]], "skbio.alignment.TabularMSA.__lt__": [[43, "skbio-alignment-tabularmsa-lt"]], "skbio.alignment.TabularMSA.__ne__": [[44, "skbio-alignment-tabularmsa-ne"]], "skbio.alignment.TabularMSA.__reversed__": [[45, "skbio-alignment-tabularmsa-reversed"]], "skbio.alignment.TabularMSA.__str__": [[46, "skbio-alignment-tabularmsa-str"]], "skbio.alignment.TabularMSA.append": [[47, "skbio-alignment-tabularmsa-append"]], "skbio.alignment.TabularMSA.consensus": [[48, "skbio-alignment-tabularmsa-consensus"]], "skbio.alignment.TabularMSA.conservation": [[49, "skbio-alignment-tabularmsa-conservation"]], "skbio.alignment.TabularMSA.extend": [[50, "skbio-alignment-tabularmsa-extend"]], "skbio.alignment.TabularMSA.from_dict": [[51, "skbio-alignment-tabularmsa-from-dict"]], "skbio.alignment.TabularMSA.gap_frequencies": [[52, "skbio-alignment-tabularmsa-gap-frequencies"]], "skbio.alignment.TabularMSA.has_metadata": [[53, "skbio-alignment-tabularmsa-has-metadata"]], "skbio.alignment.TabularMSA.has_positional_metadata": [[54, "skbio-alignment-tabularmsa-has-positional-metadata"]], "skbio.alignment.TabularMSA.iter_positions": [[55, "skbio-alignment-tabularmsa-iter-positions"]], "skbio.alignment.TabularMSA.join": [[56, "skbio-alignment-tabularmsa-join"]], "skbio.alignment.TabularMSA.read": [[57, "skbio-alignment-tabularmsa-read"]], "skbio.alignment.TabularMSA.reassign_index": [[58, "skbio-alignment-tabularmsa-reassign-index"]], "skbio.alignment.TabularMSA.sort": [[59, "skbio-alignment-tabularmsa-sort"]], "skbio.alignment.TabularMSA.to_dict": [[60, "skbio-alignment-tabularmsa-to-dict"]], "skbio.alignment.TabularMSA.write": [[61, "skbio-alignment-tabularmsa-write"]], "skbio.alignment.global_pairwise_align": [[62, "skbio-alignment-global-pairwise-align"]], "skbio.alignment.global_pairwise_align_nucleotide": [[63, "skbio-alignment-global-pairwise-align-nucleotide"]], "skbio.alignment.global_pairwise_align_protein": [[64, "skbio-alignment-global-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align": [[65, "skbio-alignment-local-pairwise-align"]], "skbio.alignment.local_pairwise_align_nucleotide": [[66, "skbio-alignment-local-pairwise-align-nucleotide"]], "skbio.alignment.local_pairwise_align_protein": [[67, "skbio-alignment-local-pairwise-align-protein"]], "skbio.alignment.local_pairwise_align_ssw": [[68, "skbio-alignment-local-pairwise-align-ssw"]], "skbio.alignment.make_identity_substitution_matrix": [[69, "skbio-alignment-make-identity-substitution-matrix"]], "Alpha diversity measures (skbio.diversity.alpha)": [[70, "alpha-diversity-measures-skbio-diversity-alpha"]], "skbio.diversity.alpha.ace": [[71, "skbio-diversity-alpha-ace"]], "skbio.diversity.alpha.berger_parker_d": [[72, "skbio-diversity-alpha-berger-parker-d"]], "skbio.diversity.alpha.brillouin_d": [[73, "skbio-diversity-alpha-brillouin-d"]], "skbio.diversity.alpha.chao1": [[74, "skbio-diversity-alpha-chao1"]], "skbio.diversity.alpha.chao1_ci": [[75, "skbio-diversity-alpha-chao1-ci"]], "skbio.diversity.alpha.dominance": [[76, "skbio-diversity-alpha-dominance"]], "skbio.diversity.alpha.doubles": [[77, "skbio-diversity-alpha-doubles"]], "skbio.diversity.alpha.enspie": [[78, "skbio-diversity-alpha-enspie"]], "skbio.diversity.alpha.esty_ci": [[79, "skbio-diversity-alpha-esty-ci"]], "skbio.diversity.alpha.faith_pd": [[80, "skbio-diversity-alpha-faith-pd"]], "skbio.diversity.alpha.fisher_alpha": [[81, "skbio-diversity-alpha-fisher-alpha"]], "skbio.diversity.alpha.gini_index": [[82, "skbio-diversity-alpha-gini-index"]], "skbio.diversity.alpha.goods_coverage": [[83, "skbio-diversity-alpha-goods-coverage"]], "skbio.diversity.alpha.heip_e": [[84, "skbio-diversity-alpha-heip-e"]], "skbio.diversity.alpha.kempton_taylor_q": [[85, "skbio-diversity-alpha-kempton-taylor-q"]], "skbio.diversity.alpha.lladser_ci": [[86, "skbio-diversity-alpha-lladser-ci"]], "skbio.diversity.alpha.lladser_pe": [[87, "skbio-diversity-alpha-lladser-pe"]], "skbio.diversity.alpha.margalef": [[88, "skbio-diversity-alpha-margalef"]], "skbio.diversity.alpha.mcintosh_d": [[89, "skbio-diversity-alpha-mcintosh-d"]], "skbio.diversity.alpha.mcintosh_e": [[90, "skbio-diversity-alpha-mcintosh-e"]], "skbio.diversity.alpha.menhinick": [[91, "skbio-diversity-alpha-menhinick"]], "skbio.diversity.alpha.michaelis_menten_fit": [[92, "skbio-diversity-alpha-michaelis-menten-fit"]], "skbio.diversity.alpha.observed_otus": [[93, "skbio-diversity-alpha-observed-otus"]], "skbio.diversity.alpha.osd": [[94, "skbio-diversity-alpha-osd"]], "skbio.diversity.alpha.pielou_e": [[95, "skbio-diversity-alpha-pielou-e"]], "skbio.diversity.alpha.robbins": [[96, "skbio-diversity-alpha-robbins"]], "skbio.diversity.alpha.shannon": [[97, "skbio-diversity-alpha-shannon"]], "skbio.diversity.alpha.simpson": [[98, "skbio-diversity-alpha-simpson"]], "skbio.diversity.alpha.simpson_e": [[99, "skbio-diversity-alpha-simpson-e"]], "skbio.diversity.alpha.singles": [[100, "skbio-diversity-alpha-singles"]], "skbio.diversity.alpha.strong": [[101, "skbio-diversity-alpha-strong"]], "skbio.diversity.alpha_diversity": [[102, "skbio-diversity-alpha-diversity"]], "Beta diversity measures (skbio.diversity.beta)": [[103, "beta-diversity-measures-skbio-diversity-beta"]], "skbio.diversity.beta.unweighted_unifrac": [[104, "skbio-diversity-beta-unweighted-unifrac"]], "skbio.diversity.beta.weighted_unifrac": [[105, "skbio-diversity-beta-weighted-unifrac"]], "skbio.diversity.beta_diversity": [[106, "skbio-diversity-beta-diversity"]], "skbio.diversity.block_beta_diversity": [[107, "skbio-diversity-block-beta-diversity"]], "skbio.diversity.get_alpha_diversity_metrics": [[108, "skbio-diversity-get-alpha-diversity-metrics"]], "skbio.diversity.get_beta_diversity_metrics": [[109, "skbio-diversity-get-beta-diversity-metrics"]], "skbio.diversity.partial_beta_diversity": [[110, "skbio-diversity-partial-beta-diversity"]], "skbio.io.ArgumentOverrideWarning": [[111, "skbio-io-argumentoverridewarning"]], "skbio.io.BLAST7FormatError": [[112, "skbio-io-blast7formaterror"]], "skbio.io.ClustalFormatError": [[113, "skbio-io-clustalformaterror"]], "skbio.io.EMBLFormatError": [[114, "skbio-io-emblformaterror"]], "skbio.io.FASTAFormatError": [[115, "skbio-io-fastaformaterror"]], "skbio.io.FASTQFormatError": [[116, "skbio-io-fastqformaterror"]], "skbio.io.FileFormatError": [[117, "skbio-io-fileformaterror"]], "skbio.io.FormatIdentificationWarning": [[118, "skbio-io-formatidentificationwarning"]], "skbio.io.GFF3FormatError": [[119, "skbio-io-gff3formaterror"]], "skbio.io.GenBankFormatError": [[120, "skbio-io-genbankformaterror"]], "skbio.io.IOSourceError": [[121, "skbio-io-iosourceerror"]], "skbio.io.LSMatFormatError": [[122, "skbio-io-lsmatformaterror"]], "skbio.io.NewickFormatError": [[123, "skbio-io-newickformaterror"]], "skbio.io.OrdinationFormatError": [[124, "skbio-io-ordinationformaterror"]], "skbio.io.PhylipFormatError": [[125, "skbio-io-phylipformaterror"]], "skbio.io.QSeqFormatError": [[126, "skbio-io-qseqformaterror"]], "skbio.io.QUALFormatError": [[127, "skbio-io-qualformaterror"]], "skbio.io.StockholmFormatError": [[128, "skbio-io-stockholmformaterror"]], "skbio.io.UnrecognizedFormatError": [[129, "skbio-io-unrecognizedformaterror"]], "Simple binary dissimilarity matrix format (skbio.io.format.binary_dm)": [[130, "simple-binary-dissimilarity-matrix-format-skbio-io-format-binary-dm"]], "Format Support": [[130, "format-support"], [131, "format-support"], [132, "format-support"], [133, "format-support"], [134, "format-support"], [135, "format-support"], [136, "format-support"], [137, "format-support"], [138, "format-support"], [139, "format-support"], [140, "format-support"], [141, "format-support"], [142, "format-support"], [143, "format-support"], [144, "format-support"], [145, "format-support"]], "Format Specification": [[130, "format-specification"], [131, "format-specification"], [132, "format-specification"], [133, "format-specification"], [134, "format-specification"], [135, "format-specification"], [136, "format-specification"], [137, "format-specification"], [138, "format-specification"], [139, "format-specification"], [140, "format-specification"], [141, "format-specification"], [142, "format-specification"], [143, "format-specification"], [144, "format-specification"], [145, "format-specification"]], "BLAST+6 format (skbio.io.format.blast6)": [[131, "blast-6-format-skbio-io-format-blast6"]], "BLAST Column Types": [[131, "blast-column-types"], [132, "blast-column-types"]], "Format Parameters": [[131, "format-parameters"], [133, "format-parameters"], [135, "format-parameters"], [136, "format-parameters"], [137, "format-parameters"], [138, "format-parameters"], [139, "format-parameters"], [140, "format-parameters"], [142, "format-parameters"], [143, "format-parameters"], [144, "format-parameters"], [145, "format-parameters"]], "BLAST+7 format (skbio.io.format.blast7)": [[132, "blast-7-format-skbio-io-format-blast7"]], "Clustal format (skbio.io.format.clustal)": [[133, "clustal-format-skbio-io-format-clustal"]], "Alignment Section": [[133, "alignment-section"], [142, "alignment-section"]], "EMBL format (skbio.io.format.embl)": [[134, "embl-format-skbio-io-format-embl"]], "Feature Level Products": [[134, "feature-level-products"]], "Sections before FH (Feature Header)": [[134, "sections-before-fh-feature-header"]], "FT section": [[134, "ft-section"]], "SQ section": [[134, "sq-section"]], "Reading EMBL Files": [[134, "reading-embl-files"]], "Reading EMBL Files using generators": [[134, "reading-embl-files-using-generators"]], "FASTA/QUAL format (skbio.io.format.fasta)": [[135, "fasta-qual-format-skbio-io-format-fasta"]], "FASTA Format": [[135, "fasta-format"]], "Sequence Header": [[135, "sequence-header"]], "Sequence Data": [[135, "sequence-data"]], "QUAL Format": [[135, "qual-format"]], "QUAL File Parameter (Readers and Writers)": [[135, "qual-file-parameter-readers-and-writers"]], "Reader-specific Parameters": [[135, "reader-specific-parameters"], [137, "reader-specific-parameters"], [138, "reader-specific-parameters"]], "Generator and TabularMSA Reader Parameters": [[135, "generator-and-tabularmsa-reader-parameters"]], "Sequence Reader Parameters": [[135, "sequence-reader-parameters"]], "Writer-specific Parameters": [[135, "writer-specific-parameters"], [138, "writer-specific-parameters"]], "Reading and Writing FASTA Files": [[135, "reading-and-writing-fasta-files"]], "Reading and Writing FASTA/QUAL Files": [[135, "reading-and-writing-fasta-qual-files"]], "FASTQ format (skbio.io.format.fastq)": [[136, "fastq-format-skbio-io-format-fastq"]], "Quality Score Variants": [[136, "quality-score-variants"]], "GenBank format (skbio.io.format.genbank)": [[137, "genbank-format-skbio-io-format-genbank"]], "Sections before FEATURES": [[137, "sections-before-features"]], "FEATURES section": [[137, "features-section"]], "Location string": [[137, "location-string"]], "ORIGIN section": [[137, "origin-section"]], "Reading and Writing GenBank Files": [[137, "reading-and-writing-genbank-files"]], "GFF3 format (skbio.io.format.gff3)": [[138, "gff3-format-skbio-io-format-gff3"]], "Labeled square matrix format (skbio.io.format.lsmat)": [[139, "labeled-square-matrix-format-skbio-io-format-lsmat"]], "Newick format (skbio.io.format.newick)": [[140, "newick-format-skbio-io-format-newick"]], "Formal Grammar": [[140, "formal-grammar"]], "Explanation": [[140, "explanation"]], "Basic Symbols": [[140, "basic-symbols"]], "Application of Rules": [[140, "application-of-rules"]], "Adding Node Information": [[140, "adding-node-information"]], "Advanced Label and Length Rules": [[140, "advanced-label-and-length-rules"]], "Inline Comments": [[140, "inline-comments"]], "Whitespace": [[140, "whitespace"]], "Caveats": [[140, "caveats"]], "Ordination results format (skbio.io.format.ordination)": [[141, "ordination-results-format-skbio-io-format-ordination"]], "PHYLIP multiple sequence alignment format (skbio.io.format.phylip)": [[142, "phylip-multiple-sequence-alignment-format-skbio-io-format-phylip"]], "Header Section": [[142, "header-section"]], "QSeq format (skbio.io.format.qseq)": [[143, "qseq-format-skbio-io-format-qseq"]], "Generators Only": [[143, "generators-only"]], "Stockholm format (skbio.io.format.stockholm)": [[144, "stockholm-format-skbio-io-format-stockholm"]], "Header": [[144, "header"]], "Multiple Sequence Alignment": [[144, "multiple-sequence-alignment"]], "Metadata": [[144, "metadata"]], "GF metadata": [[144, "gf-metadata"]], "GS metadata": [[144, "gs-metadata"]], "GR metadata": [[144, "gr-metadata"]], "GC metadata": [[144, "gc-metadata"]], "Footer": [[144, "footer"]], "Taxdump format (skbio.io.format.taxdump)": [[145, "taxdump-format-skbio-io-format-taxdump"]], "nodes.dmp": [[145, "nodes-dmp"]], "names.dmp": [[145, "names-dmp"]], "division.dmp": [[145, "division-dmp"]], "gencode.dmp": [[145, "gencode-dmp"]], "I/O Registry (skbio.io.registry)": [[146, "i-o-registry-skbio-io-registry"]], "Classes": [[146, "classes"], [489, "classes"], [549, "classes"], [631, "classes"], [803, "classes"], [804, "classes"], [806, "classes"], [809, "classes"]], "Exceptions": [[146, "exceptions"], [489, "exceptions"], [806, "exceptions"]], "Creating a new format for scikit-bio": [[146, "creating-a-new-format-for-scikit-bio"]], "Reserved Keyword Arguments": [[146, "reserved-keyword-arguments"]], "skbio.io.registry.DuplicateRegistrationError": [[147, "skbio-io-registry-duplicateregistrationerror"]], "skbio.io.registry.Format": [[148, "skbio-io-registry-format"]], "skbio.io.registry.Format.__eq__": [[149, "skbio-io-registry-format-eq"]], "skbio.io.registry.Format.__ge__": [[150, "skbio-io-registry-format-ge"]], "skbio.io.registry.Format.__gt__": [[151, "skbio-io-registry-format-gt"]], "skbio.io.registry.Format.__hash__": [[152, "skbio-io-registry-format-hash"]], "skbio.io.registry.Format.__le__": [[153, "skbio-io-registry-format-le"]], "skbio.io.registry.Format.__lt__": [[154, "skbio-io-registry-format-lt"]], "skbio.io.registry.Format.__ne__": [[155, "skbio-io-registry-format-ne"]], "skbio.io.registry.Format.__str__": [[156, "skbio-io-registry-format-str"]], "skbio.io.registry.Format.reader": [[157, "skbio-io-registry-format-reader"]], "skbio.io.registry.Format.sniffer": [[158, "skbio-io-registry-format-sniffer"]], "skbio.io.registry.Format.writer": [[159, "skbio-io-registry-format-writer"]], "skbio.io.registry.IORegistry": [[160, "skbio-io-registry-ioregistry"]], "skbio.io.registry.IORegistry.__eq__": [[161, "skbio-io-registry-ioregistry-eq"]], "skbio.io.registry.IORegistry.__ge__": [[162, "skbio-io-registry-ioregistry-ge"]], "skbio.io.registry.IORegistry.__gt__": [[163, "skbio-io-registry-ioregistry-gt"]], "skbio.io.registry.IORegistry.__hash__": [[164, "skbio-io-registry-ioregistry-hash"]], "skbio.io.registry.IORegistry.__le__": [[165, "skbio-io-registry-ioregistry-le"]], "skbio.io.registry.IORegistry.__lt__": [[166, "skbio-io-registry-ioregistry-lt"]], "skbio.io.registry.IORegistry.__ne__": [[167, "skbio-io-registry-ioregistry-ne"]], "skbio.io.registry.IORegistry.__str__": [[168, "skbio-io-registry-ioregistry-str"]], "skbio.io.registry.IORegistry.add_format": [[169, "skbio-io-registry-ioregistry-add-format"]], "skbio.io.registry.IORegistry.create_format": [[170, "skbio-io-registry-ioregistry-create-format"]], "skbio.io.registry.IORegistry.get_reader": [[171, "skbio-io-registry-ioregistry-get-reader"]], "skbio.io.registry.IORegistry.get_sniffer": [[172, "skbio-io-registry-ioregistry-get-sniffer"]], "skbio.io.registry.IORegistry.get_writer": [[173, "skbio-io-registry-ioregistry-get-writer"]], "skbio.io.registry.IORegistry.list_read_formats": [[174, "skbio-io-registry-ioregistry-list-read-formats"]], "skbio.io.registry.IORegistry.list_write_formats": [[175, "skbio-io-registry-ioregistry-list-write-formats"]], "skbio.io.registry.IORegistry.monkey_patch": [[176, "skbio-io-registry-ioregistry-monkey-patch"]], "skbio.io.registry.IORegistry.read": [[177, "skbio-io-registry-ioregistry-read"]], "skbio.io.registry.IORegistry.sniff": [[178, "skbio-io-registry-ioregistry-sniff"]], "skbio.io.registry.IORegistry.write": [[179, "skbio-io-registry-ioregistry-write"]], "skbio.io.registry.InvalidRegistrationError": [[180, "skbio-io-registry-invalidregistrationerror"]], "skbio.io.registry.create_format": [[181, "skbio-io-registry-create-format"]], "skbio.io.registry.read": [[182, "skbio-io-registry-read"]], "skbio.io.registry.sniff": [[183, "skbio-io-registry-sniff"]], "skbio.io.registry.write": [[184, "skbio-io-registry-write"]], "I/O utils (skbio.io.util)": [[185, "i-o-utils-skbio-io-util"]], "skbio.metadata.Interval": [[186, "skbio-metadata-interval"]], "skbio.metadata.Interval.__eq__": [[187, "skbio-metadata-interval-eq"]], "skbio.metadata.Interval.__ge__": [[188, "skbio-metadata-interval-ge"]], "skbio.metadata.Interval.__gt__": [[189, "skbio-metadata-interval-gt"]], "skbio.metadata.Interval.__le__": [[190, "skbio-metadata-interval-le"]], "skbio.metadata.Interval.__lt__": [[191, "skbio-metadata-interval-lt"]], "skbio.metadata.Interval.__ne__": [[192, "skbio-metadata-interval-ne"]], "skbio.metadata.Interval.__str__": [[193, "skbio-metadata-interval-str"]], "skbio.metadata.Interval.drop": [[194, "skbio-metadata-interval-drop"]], "skbio.metadata.IntervalMetadata": [[195, "skbio-metadata-intervalmetadata"]], "skbio.metadata.IntervalMetadata.__copy__": [[196, "skbio-metadata-intervalmetadata-copy"]], "skbio.metadata.IntervalMetadata.__deepcopy__": [[197, "skbio-metadata-intervalmetadata-deepcopy"]], "skbio.metadata.IntervalMetadata.__eq__": [[198, "skbio-metadata-intervalmetadata-eq"]], "skbio.metadata.IntervalMetadata.__ge__": [[199, "skbio-metadata-intervalmetadata-ge"]], "skbio.metadata.IntervalMetadata.__gt__": [[200, "skbio-metadata-intervalmetadata-gt"]], "skbio.metadata.IntervalMetadata.__le__": [[201, "skbio-metadata-intervalmetadata-le"]], "skbio.metadata.IntervalMetadata.__lt__": [[202, "skbio-metadata-intervalmetadata-lt"]], "skbio.metadata.IntervalMetadata.__ne__": [[203, "skbio-metadata-intervalmetadata-ne"]], "skbio.metadata.IntervalMetadata.__str__": [[204, "skbio-metadata-intervalmetadata-str"]], "skbio.metadata.IntervalMetadata.add": [[205, "skbio-metadata-intervalmetadata-add"]], "skbio.metadata.IntervalMetadata.concat": [[206, "skbio-metadata-intervalmetadata-concat"]], "skbio.metadata.IntervalMetadata.drop": [[207, "skbio-metadata-intervalmetadata-drop"]], "skbio.metadata.IntervalMetadata.merge": [[208, "skbio-metadata-intervalmetadata-merge"]], "skbio.metadata.IntervalMetadata.query": [[209, "skbio-metadata-intervalmetadata-query"]], "skbio.metadata.IntervalMetadata.read": [[210, "skbio-metadata-intervalmetadata-read"]], "skbio.metadata.IntervalMetadata.sort": [[211, "skbio-metadata-intervalmetadata-sort"]], "skbio.metadata.IntervalMetadata.write": [[212, "skbio-metadata-intervalmetadata-write"]], "skbio.sequence.DNA": [[213, "skbio-sequence-dna"]], "skbio.sequence.DNA.__bool__": [[214, "skbio-sequence-dna-bool"]], "skbio.sequence.DNA.__contains__": [[215, "skbio-sequence-dna-contains"]], "skbio.sequence.DNA.__copy__": [[216, "skbio-sequence-dna-copy"]], "skbio.sequence.DNA.__deepcopy__": [[217, "skbio-sequence-dna-deepcopy"]], "skbio.sequence.DNA.__eq__": [[218, "skbio-sequence-dna-eq"]], "skbio.sequence.DNA.__ge__": [[219, "skbio-sequence-dna-ge"]], "skbio.sequence.DNA.__getitem__": [[220, "skbio-sequence-dna-getitem"]], "skbio.sequence.DNA.__gt__": [[221, "skbio-sequence-dna-gt"]], "skbio.sequence.DNA.__iter__": [[222, "skbio-sequence-dna-iter"]], "skbio.sequence.DNA.__le__": [[223, "skbio-sequence-dna-le"]], "skbio.sequence.DNA.__len__": [[224, "skbio-sequence-dna-len"]], "skbio.sequence.DNA.__lt__": [[225, "skbio-sequence-dna-lt"]], "skbio.sequence.DNA.__ne__": [[226, "skbio-sequence-dna-ne"]], "skbio.sequence.DNA.__reversed__": [[227, "skbio-sequence-dna-reversed"]], "skbio.sequence.DNA.__str__": [[228, "skbio-sequence-dna-str"]], "skbio.sequence.DNA.complement": [[229, "skbio-sequence-dna-complement"]], "skbio.sequence.DNA.concat": [[230, "skbio-sequence-dna-concat"]], "skbio.sequence.DNA.count": [[231, "skbio-sequence-dna-count"]], "skbio.sequence.DNA.definites": [[232, "skbio-sequence-dna-definites"]], "skbio.sequence.DNA.degap": [[233, "skbio-sequence-dna-degap"]], "skbio.sequence.DNA.degenerates": [[234, "skbio-sequence-dna-degenerates"]], "skbio.sequence.DNA.distance": [[235, "skbio-sequence-dna-distance"]], "skbio.sequence.DNA.expand_degenerates": [[236, "skbio-sequence-dna-expand-degenerates"]], "skbio.sequence.DNA.find_motifs": [[237, "skbio-sequence-dna-find-motifs"]], "skbio.sequence.DNA.find_with_regex": [[238, "skbio-sequence-dna-find-with-regex"]], "skbio.sequence.DNA.frequencies": [[239, "skbio-sequence-dna-frequencies"]], "skbio.sequence.DNA.gaps": [[240, "skbio-sequence-dna-gaps"]], "skbio.sequence.DNA.gc_content": [[241, "skbio-sequence-dna-gc-content"]], "skbio.sequence.DNA.gc_frequency": [[242, "skbio-sequence-dna-gc-frequency"]], "skbio.sequence.DNA.has_definites": [[243, "skbio-sequence-dna-has-definites"]], "skbio.sequence.DNA.has_degenerates": [[244, "skbio-sequence-dna-has-degenerates"]], "skbio.sequence.DNA.has_gaps": [[245, "skbio-sequence-dna-has-gaps"]], "skbio.sequence.DNA.has_interval_metadata": [[246, "skbio-sequence-dna-has-interval-metadata"]], "skbio.sequence.DNA.has_metadata": [[247, "skbio-sequence-dna-has-metadata"]], "skbio.sequence.DNA.has_nondegenerates": [[248, "skbio-sequence-dna-has-nondegenerates"]], "skbio.sequence.DNA.has_positional_metadata": [[249, "skbio-sequence-dna-has-positional-metadata"]], "skbio.sequence.DNA.index": [[250, "skbio-sequence-dna-index"]], "skbio.sequence.DNA.is_reverse_complement": [[251, "skbio-sequence-dna-is-reverse-complement"]], "skbio.sequence.DNA.iter_contiguous": [[252, "skbio-sequence-dna-iter-contiguous"]], "skbio.sequence.DNA.iter_kmers": [[253, "skbio-sequence-dna-iter-kmers"]], "skbio.sequence.DNA.kmer_frequencies": [[254, "skbio-sequence-dna-kmer-frequencies"]], "skbio.sequence.DNA.lowercase": [[255, "skbio-sequence-dna-lowercase"]], "skbio.sequence.DNA.match_frequency": [[256, "skbio-sequence-dna-match-frequency"]], "skbio.sequence.DNA.matches": [[257, "skbio-sequence-dna-matches"]], "skbio.sequence.DNA.mismatch_frequency": [[258, "skbio-sequence-dna-mismatch-frequency"]], "skbio.sequence.DNA.mismatches": [[259, "skbio-sequence-dna-mismatches"]], "skbio.sequence.DNA.nondegenerates": [[260, "skbio-sequence-dna-nondegenerates"]], "skbio.sequence.DNA.read": [[261, "skbio-sequence-dna-read"]], "skbio.sequence.DNA.replace": [[262, "skbio-sequence-dna-replace"]], "skbio.sequence.DNA.reverse_complement": [[263, "skbio-sequence-dna-reverse-complement"]], "skbio.sequence.DNA.to_regex": [[264, "skbio-sequence-dna-to-regex"]], "skbio.sequence.DNA.transcribe": [[265, "skbio-sequence-dna-transcribe"]], "skbio.sequence.DNA.translate": [[266, "skbio-sequence-dna-translate"]], "skbio.sequence.DNA.translate_six_frames": [[267, "skbio-sequence-dna-translate-six-frames"]], "skbio.sequence.DNA.write": [[268, "skbio-sequence-dna-write"]], "skbio.sequence.GeneticCode": [[269, "skbio-sequence-geneticcode"]], "skbio.sequence.GeneticCode.__eq__": [[270, "skbio-sequence-geneticcode-eq"]], "skbio.sequence.GeneticCode.__ge__": [[271, "skbio-sequence-geneticcode-ge"]], "skbio.sequence.GeneticCode.__gt__": [[272, "skbio-sequence-geneticcode-gt"]], "skbio.sequence.GeneticCode.__le__": [[273, "skbio-sequence-geneticcode-le"]], "skbio.sequence.GeneticCode.__lt__": [[274, "skbio-sequence-geneticcode-lt"]], "skbio.sequence.GeneticCode.__ne__": [[275, "skbio-sequence-geneticcode-ne"]], "skbio.sequence.GeneticCode.__str__": [[276, "skbio-sequence-geneticcode-str"]], "skbio.sequence.GeneticCode.from_ncbi": [[277, "skbio-sequence-geneticcode-from-ncbi"]], "skbio.sequence.GeneticCode.translate": [[278, "skbio-sequence-geneticcode-translate"]], "skbio.sequence.GeneticCode.translate_six_frames": [[279, "skbio-sequence-geneticcode-translate-six-frames"]], "skbio.sequence.GrammaredSequence": [[280, "skbio-sequence-grammaredsequence"]], "skbio.sequence.GrammaredSequence.__bool__": [[281, "skbio-sequence-grammaredsequence-bool"]], "skbio.sequence.GrammaredSequence.__contains__": [[282, "skbio-sequence-grammaredsequence-contains"]], "skbio.sequence.GrammaredSequence.__copy__": [[283, "skbio-sequence-grammaredsequence-copy"]], "skbio.sequence.GrammaredSequence.__deepcopy__": [[284, "skbio-sequence-grammaredsequence-deepcopy"]], "skbio.sequence.GrammaredSequence.__eq__": [[285, "skbio-sequence-grammaredsequence-eq"]], "skbio.sequence.GrammaredSequence.__ge__": [[286, "skbio-sequence-grammaredsequence-ge"]], "skbio.sequence.GrammaredSequence.__getitem__": [[287, "skbio-sequence-grammaredsequence-getitem"]], "skbio.sequence.GrammaredSequence.__gt__": [[288, "skbio-sequence-grammaredsequence-gt"]], "skbio.sequence.GrammaredSequence.__iter__": [[289, "skbio-sequence-grammaredsequence-iter"]], "skbio.sequence.GrammaredSequence.__le__": [[290, "skbio-sequence-grammaredsequence-le"]], "skbio.sequence.GrammaredSequence.__len__": [[291, "skbio-sequence-grammaredsequence-len"]], "skbio.sequence.GrammaredSequence.__lt__": [[292, "skbio-sequence-grammaredsequence-lt"]], "skbio.sequence.GrammaredSequence.__ne__": [[293, "skbio-sequence-grammaredsequence-ne"]], "skbio.sequence.GrammaredSequence.__reversed__": [[294, "skbio-sequence-grammaredsequence-reversed"]], "skbio.sequence.GrammaredSequence.__str__": [[295, "skbio-sequence-grammaredsequence-str"]], "skbio.sequence.GrammaredSequence.concat": [[296, "skbio-sequence-grammaredsequence-concat"]], "skbio.sequence.GrammaredSequence.count": [[297, "skbio-sequence-grammaredsequence-count"]], "skbio.sequence.GrammaredSequence.definites": [[298, "skbio-sequence-grammaredsequence-definites"]], "skbio.sequence.GrammaredSequence.degap": [[299, "skbio-sequence-grammaredsequence-degap"]], "skbio.sequence.GrammaredSequence.degenerates": [[300, "skbio-sequence-grammaredsequence-degenerates"]], "skbio.sequence.GrammaredSequence.distance": [[301, "skbio-sequence-grammaredsequence-distance"]], "skbio.sequence.GrammaredSequence.expand_degenerates": [[302, "skbio-sequence-grammaredsequence-expand-degenerates"]], "skbio.sequence.GrammaredSequence.find_motifs": [[303, "skbio-sequence-grammaredsequence-find-motifs"]], "skbio.sequence.GrammaredSequence.find_with_regex": [[304, "skbio-sequence-grammaredsequence-find-with-regex"]], "skbio.sequence.GrammaredSequence.frequencies": [[305, "skbio-sequence-grammaredsequence-frequencies"]], "skbio.sequence.GrammaredSequence.gaps": [[306, "skbio-sequence-grammaredsequence-gaps"]], "skbio.sequence.GrammaredSequence.has_definites": [[307, "skbio-sequence-grammaredsequence-has-definites"]], "skbio.sequence.GrammaredSequence.has_degenerates": [[308, "skbio-sequence-grammaredsequence-has-degenerates"]], "skbio.sequence.GrammaredSequence.has_gaps": [[309, "skbio-sequence-grammaredsequence-has-gaps"]], "skbio.sequence.GrammaredSequence.has_interval_metadata": [[310, "skbio-sequence-grammaredsequence-has-interval-metadata"]], "skbio.sequence.GrammaredSequence.has_metadata": [[311, "skbio-sequence-grammaredsequence-has-metadata"]], "skbio.sequence.GrammaredSequence.has_nondegenerates": [[312, "skbio-sequence-grammaredsequence-has-nondegenerates"]], "skbio.sequence.GrammaredSequence.has_positional_metadata": [[313, "skbio-sequence-grammaredsequence-has-positional-metadata"]], "skbio.sequence.GrammaredSequence.index": [[314, "skbio-sequence-grammaredsequence-index"]], "skbio.sequence.GrammaredSequence.iter_contiguous": [[315, "skbio-sequence-grammaredsequence-iter-contiguous"]], "skbio.sequence.GrammaredSequence.iter_kmers": [[316, "skbio-sequence-grammaredsequence-iter-kmers"]], "skbio.sequence.GrammaredSequence.kmer_frequencies": [[317, "skbio-sequence-grammaredsequence-kmer-frequencies"]], "skbio.sequence.GrammaredSequence.lowercase": [[318, "skbio-sequence-grammaredsequence-lowercase"]], "skbio.sequence.GrammaredSequence.match_frequency": [[319, "skbio-sequence-grammaredsequence-match-frequency"]], "skbio.sequence.GrammaredSequence.matches": [[320, "skbio-sequence-grammaredsequence-matches"]], "skbio.sequence.GrammaredSequence.mismatch_frequency": [[321, "skbio-sequence-grammaredsequence-mismatch-frequency"]], "skbio.sequence.GrammaredSequence.mismatches": [[322, "skbio-sequence-grammaredsequence-mismatches"]], "skbio.sequence.GrammaredSequence.nondegenerates": [[323, "skbio-sequence-grammaredsequence-nondegenerates"]], "skbio.sequence.GrammaredSequence.read": [[324, "skbio-sequence-grammaredsequence-read"]], "skbio.sequence.GrammaredSequence.replace": [[325, "skbio-sequence-grammaredsequence-replace"]], "skbio.sequence.GrammaredSequence.to_regex": [[326, "skbio-sequence-grammaredsequence-to-regex"]], "skbio.sequence.GrammaredSequence.write": [[327, "skbio-sequence-grammaredsequence-write"]], "skbio.sequence.Protein": [[328, "skbio-sequence-protein"]], "skbio.sequence.Protein.__bool__": [[329, "skbio-sequence-protein-bool"]], "skbio.sequence.Protein.__contains__": [[330, "skbio-sequence-protein-contains"]], "skbio.sequence.Protein.__copy__": [[331, "skbio-sequence-protein-copy"]], "skbio.sequence.Protein.__deepcopy__": [[332, "skbio-sequence-protein-deepcopy"]], "skbio.sequence.Protein.__eq__": [[333, "skbio-sequence-protein-eq"]], "skbio.sequence.Protein.__ge__": [[334, "skbio-sequence-protein-ge"]], "skbio.sequence.Protein.__getitem__": [[335, "skbio-sequence-protein-getitem"]], "skbio.sequence.Protein.__gt__": [[336, "skbio-sequence-protein-gt"]], "skbio.sequence.Protein.__iter__": [[337, "skbio-sequence-protein-iter"]], "skbio.sequence.Protein.__le__": [[338, "skbio-sequence-protein-le"]], "skbio.sequence.Protein.__len__": [[339, "skbio-sequence-protein-len"]], "skbio.sequence.Protein.__lt__": [[340, "skbio-sequence-protein-lt"]], "skbio.sequence.Protein.__ne__": [[341, "skbio-sequence-protein-ne"]], "skbio.sequence.Protein.__reversed__": [[342, "skbio-sequence-protein-reversed"]], "skbio.sequence.Protein.__str__": [[343, "skbio-sequence-protein-str"]], "skbio.sequence.Protein.concat": [[344, "skbio-sequence-protein-concat"]], "skbio.sequence.Protein.count": [[345, "skbio-sequence-protein-count"]], "skbio.sequence.Protein.definites": [[346, "skbio-sequence-protein-definites"]], "skbio.sequence.Protein.degap": [[347, "skbio-sequence-protein-degap"]], "skbio.sequence.Protein.degenerates": [[348, "skbio-sequence-protein-degenerates"]], "skbio.sequence.Protein.distance": [[349, "skbio-sequence-protein-distance"]], "skbio.sequence.Protein.expand_degenerates": [[350, "skbio-sequence-protein-expand-degenerates"]], "skbio.sequence.Protein.find_motifs": [[351, "skbio-sequence-protein-find-motifs"]], "skbio.sequence.Protein.find_with_regex": [[352, "skbio-sequence-protein-find-with-regex"]], "skbio.sequence.Protein.frequencies": [[353, "skbio-sequence-protein-frequencies"]], "skbio.sequence.Protein.gaps": [[354, "skbio-sequence-protein-gaps"]], "skbio.sequence.Protein.has_definites": [[355, "skbio-sequence-protein-has-definites"]], "skbio.sequence.Protein.has_degenerates": [[356, "skbio-sequence-protein-has-degenerates"]], "skbio.sequence.Protein.has_gaps": [[357, "skbio-sequence-protein-has-gaps"]], "skbio.sequence.Protein.has_interval_metadata": [[358, "skbio-sequence-protein-has-interval-metadata"]], "skbio.sequence.Protein.has_metadata": [[359, "skbio-sequence-protein-has-metadata"]], "skbio.sequence.Protein.has_nondegenerates": [[360, "skbio-sequence-protein-has-nondegenerates"]], "skbio.sequence.Protein.has_positional_metadata": [[361, "skbio-sequence-protein-has-positional-metadata"]], "skbio.sequence.Protein.has_stops": [[362, "skbio-sequence-protein-has-stops"]], "skbio.sequence.Protein.index": [[363, "skbio-sequence-protein-index"]], "skbio.sequence.Protein.iter_contiguous": [[364, "skbio-sequence-protein-iter-contiguous"]], "skbio.sequence.Protein.iter_kmers": [[365, "skbio-sequence-protein-iter-kmers"]], "skbio.sequence.Protein.kmer_frequencies": [[366, "skbio-sequence-protein-kmer-frequencies"]], "skbio.sequence.Protein.lowercase": [[367, "skbio-sequence-protein-lowercase"]], "skbio.sequence.Protein.match_frequency": [[368, "skbio-sequence-protein-match-frequency"]], "skbio.sequence.Protein.matches": [[369, "skbio-sequence-protein-matches"]], "skbio.sequence.Protein.mismatch_frequency": [[370, "skbio-sequence-protein-mismatch-frequency"]], "skbio.sequence.Protein.mismatches": [[371, "skbio-sequence-protein-mismatches"]], "skbio.sequence.Protein.nondegenerates": [[372, "skbio-sequence-protein-nondegenerates"]], "skbio.sequence.Protein.read": [[373, "skbio-sequence-protein-read"]], "skbio.sequence.Protein.replace": [[374, "skbio-sequence-protein-replace"]], "skbio.sequence.Protein.stops": [[375, "skbio-sequence-protein-stops"]], "skbio.sequence.Protein.to_regex": [[376, "skbio-sequence-protein-to-regex"]], "skbio.sequence.Protein.write": [[377, "skbio-sequence-protein-write"]], "skbio.sequence.RNA": [[378, "skbio-sequence-rna"]], "skbio.sequence.RNA.__bool__": [[379, "skbio-sequence-rna-bool"]], "skbio.sequence.RNA.__contains__": [[380, "skbio-sequence-rna-contains"]], "skbio.sequence.RNA.__copy__": [[381, "skbio-sequence-rna-copy"]], "skbio.sequence.RNA.__deepcopy__": [[382, "skbio-sequence-rna-deepcopy"]], "skbio.sequence.RNA.__eq__": [[383, "skbio-sequence-rna-eq"]], "skbio.sequence.RNA.__ge__": [[384, "skbio-sequence-rna-ge"]], "skbio.sequence.RNA.__getitem__": [[385, "skbio-sequence-rna-getitem"]], "skbio.sequence.RNA.__gt__": [[386, "skbio-sequence-rna-gt"]], "skbio.sequence.RNA.__iter__": [[387, "skbio-sequence-rna-iter"]], "skbio.sequence.RNA.__le__": [[388, "skbio-sequence-rna-le"]], "skbio.sequence.RNA.__len__": [[389, "skbio-sequence-rna-len"]], "skbio.sequence.RNA.__lt__": [[390, "skbio-sequence-rna-lt"]], "skbio.sequence.RNA.__ne__": [[391, "skbio-sequence-rna-ne"]], "skbio.sequence.RNA.__reversed__": [[392, "skbio-sequence-rna-reversed"]], "skbio.sequence.RNA.__str__": [[393, "skbio-sequence-rna-str"]], "skbio.sequence.RNA.complement": [[394, "skbio-sequence-rna-complement"]], "skbio.sequence.RNA.concat": [[395, "skbio-sequence-rna-concat"]], "skbio.sequence.RNA.count": [[396, "skbio-sequence-rna-count"]], "skbio.sequence.RNA.definites": [[397, "skbio-sequence-rna-definites"]], "skbio.sequence.RNA.degap": [[398, "skbio-sequence-rna-degap"]], "skbio.sequence.RNA.degenerates": [[399, "skbio-sequence-rna-degenerates"]], "skbio.sequence.RNA.distance": [[400, "skbio-sequence-rna-distance"]], "skbio.sequence.RNA.expand_degenerates": [[401, "skbio-sequence-rna-expand-degenerates"]], "skbio.sequence.RNA.find_motifs": [[402, "skbio-sequence-rna-find-motifs"]], "skbio.sequence.RNA.find_with_regex": [[403, "skbio-sequence-rna-find-with-regex"]], "skbio.sequence.RNA.frequencies": [[404, "skbio-sequence-rna-frequencies"]], "skbio.sequence.RNA.gaps": [[405, "skbio-sequence-rna-gaps"]], "skbio.sequence.RNA.gc_content": [[406, "skbio-sequence-rna-gc-content"]], "skbio.sequence.RNA.gc_frequency": [[407, "skbio-sequence-rna-gc-frequency"]], "skbio.sequence.RNA.has_definites": [[408, "skbio-sequence-rna-has-definites"]], "skbio.sequence.RNA.has_degenerates": [[409, "skbio-sequence-rna-has-degenerates"]], "skbio.sequence.RNA.has_gaps": [[410, "skbio-sequence-rna-has-gaps"]], "skbio.sequence.RNA.has_interval_metadata": [[411, "skbio-sequence-rna-has-interval-metadata"]], "skbio.sequence.RNA.has_metadata": [[412, "skbio-sequence-rna-has-metadata"]], "skbio.sequence.RNA.has_nondegenerates": [[413, "skbio-sequence-rna-has-nondegenerates"]], "skbio.sequence.RNA.has_positional_metadata": [[414, "skbio-sequence-rna-has-positional-metadata"]], "skbio.sequence.RNA.index": [[415, "skbio-sequence-rna-index"]], "skbio.sequence.RNA.is_reverse_complement": [[416, "skbio-sequence-rna-is-reverse-complement"]], "skbio.sequence.RNA.iter_contiguous": [[417, "skbio-sequence-rna-iter-contiguous"]], "skbio.sequence.RNA.iter_kmers": [[418, "skbio-sequence-rna-iter-kmers"]], "skbio.sequence.RNA.kmer_frequencies": [[419, "skbio-sequence-rna-kmer-frequencies"]], "skbio.sequence.RNA.lowercase": [[420, "skbio-sequence-rna-lowercase"]], "skbio.sequence.RNA.match_frequency": [[421, "skbio-sequence-rna-match-frequency"]], "skbio.sequence.RNA.matches": [[422, "skbio-sequence-rna-matches"]], "skbio.sequence.RNA.mismatch_frequency": [[423, "skbio-sequence-rna-mismatch-frequency"]], "skbio.sequence.RNA.mismatches": [[424, "skbio-sequence-rna-mismatches"]], "skbio.sequence.RNA.nondegenerates": [[425, "skbio-sequence-rna-nondegenerates"]], "skbio.sequence.RNA.read": [[426, "skbio-sequence-rna-read"]], "skbio.sequence.RNA.replace": [[427, "skbio-sequence-rna-replace"]], "skbio.sequence.RNA.reverse_complement": [[428, "skbio-sequence-rna-reverse-complement"]], "skbio.sequence.RNA.reverse_transcribe": [[429, "skbio-sequence-rna-reverse-transcribe"]], "skbio.sequence.RNA.to_regex": [[430, "skbio-sequence-rna-to-regex"]], "skbio.sequence.RNA.translate": [[431, "skbio-sequence-rna-translate"]], "skbio.sequence.RNA.translate_six_frames": [[432, "skbio-sequence-rna-translate-six-frames"]], "skbio.sequence.RNA.write": [[433, "skbio-sequence-rna-write"]], "skbio.sequence.Sequence": [[434, "skbio-sequence-sequence"]], "skbio.sequence.Sequence.__bool__": [[435, "skbio-sequence-sequence-bool"]], "skbio.sequence.Sequence.__contains__": [[436, "skbio-sequence-sequence-contains"]], "skbio.sequence.Sequence.__copy__": [[437, "skbio-sequence-sequence-copy"]], "skbio.sequence.Sequence.__deepcopy__": [[438, "skbio-sequence-sequence-deepcopy"]], "skbio.sequence.Sequence.__eq__": [[439, "skbio-sequence-sequence-eq"]], "skbio.sequence.Sequence.__ge__": [[440, "skbio-sequence-sequence-ge"]], "skbio.sequence.Sequence.__getitem__": [[441, "skbio-sequence-sequence-getitem"]], "skbio.sequence.Sequence.__gt__": [[442, "skbio-sequence-sequence-gt"]], "skbio.sequence.Sequence.__iter__": [[443, "skbio-sequence-sequence-iter"]], "skbio.sequence.Sequence.__le__": [[444, "skbio-sequence-sequence-le"]], "skbio.sequence.Sequence.__len__": [[445, "skbio-sequence-sequence-len"]], "skbio.sequence.Sequence.__lt__": [[446, "skbio-sequence-sequence-lt"]], "skbio.sequence.Sequence.__ne__": [[447, "skbio-sequence-sequence-ne"]], "skbio.sequence.Sequence.__reversed__": [[448, "skbio-sequence-sequence-reversed"]], "skbio.sequence.Sequence.__str__": [[449, "skbio-sequence-sequence-str"]], "skbio.sequence.Sequence.concat": [[450, "skbio-sequence-sequence-concat"]], "skbio.sequence.Sequence.count": [[451, "skbio-sequence-sequence-count"]], "skbio.sequence.Sequence.distance": [[452, "skbio-sequence-sequence-distance"]], "skbio.sequence.Sequence.find_with_regex": [[453, "skbio-sequence-sequence-find-with-regex"]], "skbio.sequence.Sequence.frequencies": [[454, "skbio-sequence-sequence-frequencies"]], "skbio.sequence.Sequence.has_interval_metadata": [[455, "skbio-sequence-sequence-has-interval-metadata"]], "skbio.sequence.Sequence.has_metadata": [[456, "skbio-sequence-sequence-has-metadata"]], "skbio.sequence.Sequence.has_positional_metadata": [[457, "skbio-sequence-sequence-has-positional-metadata"]], "skbio.sequence.Sequence.index": [[458, "skbio-sequence-sequence-index"]], "skbio.sequence.Sequence.iter_contiguous": [[459, "skbio-sequence-sequence-iter-contiguous"]], "skbio.sequence.Sequence.iter_kmers": [[460, "skbio-sequence-sequence-iter-kmers"]], "skbio.sequence.Sequence.kmer_frequencies": [[461, "skbio-sequence-sequence-kmer-frequencies"]], "skbio.sequence.Sequence.lowercase": [[462, "skbio-sequence-sequence-lowercase"]], "skbio.sequence.Sequence.match_frequency": [[463, "skbio-sequence-sequence-match-frequency"]], "skbio.sequence.Sequence.matches": [[464, "skbio-sequence-sequence-matches"]], "skbio.sequence.Sequence.mismatch_frequency": [[465, "skbio-sequence-sequence-mismatch-frequency"]], "skbio.sequence.Sequence.mismatches": [[466, "skbio-sequence-sequence-mismatches"]], "skbio.sequence.Sequence.read": [[467, "skbio-sequence-sequence-read"]], "skbio.sequence.Sequence.replace": [[468, "skbio-sequence-sequence-replace"]], "skbio.sequence.Sequence.write": [[469, "skbio-sequence-sequence-write"]], "Sequence distance metrics (skbio.sequence.distance)": [[470, "sequence-distance-metrics-skbio-sequence-distance"]], "skbio.sequence.distance.hamming": [[471, "skbio-sequence-distance-hamming"]], "skbio.sequence.distance.kmer_distance": [[472, "skbio-sequence-distance-kmer-distance"]], "Composition Statistics (skbio.stats.composition)": [[473, "composition-statistics-skbio-stats-composition"]], "skbio.stats.composition.alr": [[474, "skbio-stats-composition-alr"]], "skbio.stats.composition.alr_inv": [[475, "skbio-stats-composition-alr-inv"]], "skbio.stats.composition.ancom": [[476, "skbio-stats-composition-ancom"]], "skbio.stats.composition.centralize": [[477, "skbio-stats-composition-centralize"]], "skbio.stats.composition.closure": [[478, "skbio-stats-composition-closure"]], "skbio.stats.composition.clr": [[479, "skbio-stats-composition-clr"]], "skbio.stats.composition.clr_inv": [[480, "skbio-stats-composition-clr-inv"]], "skbio.stats.composition.ilr": [[481, "skbio-stats-composition-ilr"]], "skbio.stats.composition.ilr_inv": [[482, "skbio-stats-composition-ilr-inv"]], "skbio.stats.composition.inner": [[483, "skbio-stats-composition-inner"]], "skbio.stats.composition.multiplicative_replacement": [[484, "skbio-stats-composition-multiplicative-replacement"]], "skbio.stats.composition.perturb": [[485, "skbio-stats-composition-perturb"]], "skbio.stats.composition.perturb_inv": [[486, "skbio-stats-composition-perturb-inv"]], "skbio.stats.composition.power": [[487, "skbio-stats-composition-power"]], "skbio.stats.composition.sbp_basis": [[488, "skbio-stats-composition-sbp-basis"]], "Distance matrices and distance-based statistics (skbio.stats.distance)": [[489, "distance-matrices-and-distance-based-statistics-skbio-stats-distance"]], "Data Structures: DissimilarityMatrix and DistanceMatrix": [[489, "data-structures-dissimilaritymatrix-and-distancematrix"]], "Distance-based statistics": [[489, "distance-based-statistics"]], "Categorical Variable Stats": [[489, "categorical-variable-stats"]], "Continuous Variable Stats": [[489, "continuous-variable-stats"]], "Distance Matrix Comparisons": [[489, "distance-matrix-comparisons"]], "skbio.stats.distance.DissimilarityMatrix": [[490, "skbio-stats-distance-dissimilaritymatrix"]], "skbio.stats.distance.DissimilarityMatrix.__contains__": [[491, "skbio-stats-distance-dissimilaritymatrix-contains"]], "skbio.stats.distance.DissimilarityMatrix.__eq__": [[492, "skbio-stats-distance-dissimilaritymatrix-eq"]], "skbio.stats.distance.DissimilarityMatrix.__ge__": [[493, "skbio-stats-distance-dissimilaritymatrix-ge"]], "skbio.stats.distance.DissimilarityMatrix.__getitem__": [[494, "skbio-stats-distance-dissimilaritymatrix-getitem"]], "skbio.stats.distance.DissimilarityMatrix.__gt__": [[495, "skbio-stats-distance-dissimilaritymatrix-gt"]], "skbio.stats.distance.DissimilarityMatrix.__le__": [[496, "skbio-stats-distance-dissimilaritymatrix-le"]], "skbio.stats.distance.DissimilarityMatrix.__lt__": [[497, "skbio-stats-distance-dissimilaritymatrix-lt"]], "skbio.stats.distance.DissimilarityMatrix.__ne__": [[498, "skbio-stats-distance-dissimilaritymatrix-ne"]], "skbio.stats.distance.DissimilarityMatrix.__str__": [[499, "skbio-stats-distance-dissimilaritymatrix-str"]], "skbio.stats.distance.DissimilarityMatrix.between": [[500, "skbio-stats-distance-dissimilaritymatrix-between"]], "skbio.stats.distance.DissimilarityMatrix.copy": [[501, "skbio-stats-distance-dissimilaritymatrix-copy"]], "skbio.stats.distance.DissimilarityMatrix.filter": [[502, "skbio-stats-distance-dissimilaritymatrix-filter"]], "skbio.stats.distance.DissimilarityMatrix.from_iterable": [[503, "skbio-stats-distance-dissimilaritymatrix-from-iterable"]], "skbio.stats.distance.DissimilarityMatrix.index": [[504, "skbio-stats-distance-dissimilaritymatrix-index"]], "skbio.stats.distance.DissimilarityMatrix.plot": [[505, "skbio-stats-distance-dissimilaritymatrix-plot"]], "skbio.stats.distance.DissimilarityMatrix.read": [[506, "skbio-stats-distance-dissimilaritymatrix-read"]], "skbio.stats.distance.DissimilarityMatrix.redundant_form": [[507, "skbio-stats-distance-dissimilaritymatrix-redundant-form"]], "skbio.stats.distance.DissimilarityMatrix.to_data_frame": [[508, "skbio-stats-distance-dissimilaritymatrix-to-data-frame"]], "skbio.stats.distance.DissimilarityMatrix.transpose": [[509, "skbio-stats-distance-dissimilaritymatrix-transpose"]], "skbio.stats.distance.DissimilarityMatrix.within": [[510, "skbio-stats-distance-dissimilaritymatrix-within"]], "skbio.stats.distance.DissimilarityMatrix.write": [[511, "skbio-stats-distance-dissimilaritymatrix-write"]], "skbio.stats.distance.DissimilarityMatrixError": [[512, "skbio-stats-distance-dissimilaritymatrixerror"]], "skbio.stats.distance.DistanceMatrix": [[513, "skbio-stats-distance-distancematrix"]], "skbio.stats.distance.DistanceMatrix.__contains__": [[514, "skbio-stats-distance-distancematrix-contains"]], "skbio.stats.distance.DistanceMatrix.__eq__": [[515, "skbio-stats-distance-distancematrix-eq"]], "skbio.stats.distance.DistanceMatrix.__ge__": [[516, "skbio-stats-distance-distancematrix-ge"]], "skbio.stats.distance.DistanceMatrix.__getitem__": [[517, "skbio-stats-distance-distancematrix-getitem"]], "skbio.stats.distance.DistanceMatrix.__gt__": [[518, "skbio-stats-distance-distancematrix-gt"]], "skbio.stats.distance.DistanceMatrix.__le__": [[519, "skbio-stats-distance-distancematrix-le"]], "skbio.stats.distance.DistanceMatrix.__lt__": [[520, "skbio-stats-distance-distancematrix-lt"]], "skbio.stats.distance.DistanceMatrix.__ne__": [[521, "skbio-stats-distance-distancematrix-ne"]], "skbio.stats.distance.DistanceMatrix.__str__": [[522, "skbio-stats-distance-distancematrix-str"]], "skbio.stats.distance.DistanceMatrix.between": [[523, "skbio-stats-distance-distancematrix-between"]], "skbio.stats.distance.DistanceMatrix.condensed_form": [[524, "skbio-stats-distance-distancematrix-condensed-form"]], "skbio.stats.distance.DistanceMatrix.copy": [[525, "skbio-stats-distance-distancematrix-copy"]], "skbio.stats.distance.DistanceMatrix.filter": [[526, "skbio-stats-distance-distancematrix-filter"]], "skbio.stats.distance.DistanceMatrix.from_iterable": [[527, "skbio-stats-distance-distancematrix-from-iterable"]], "skbio.stats.distance.DistanceMatrix.index": [[528, "skbio-stats-distance-distancematrix-index"]], "skbio.stats.distance.DistanceMatrix.permute": [[529, "skbio-stats-distance-distancematrix-permute"]], "skbio.stats.distance.DistanceMatrix.plot": [[530, "skbio-stats-distance-distancematrix-plot"]], "skbio.stats.distance.DistanceMatrix.read": [[531, "skbio-stats-distance-distancematrix-read"]], "skbio.stats.distance.DistanceMatrix.redundant_form": [[532, "skbio-stats-distance-distancematrix-redundant-form"]], "skbio.stats.distance.DistanceMatrix.to_data_frame": [[533, "skbio-stats-distance-distancematrix-to-data-frame"]], "skbio.stats.distance.DistanceMatrix.to_series": [[534, "skbio-stats-distance-distancematrix-to-series"]], "skbio.stats.distance.DistanceMatrix.transpose": [[535, "skbio-stats-distance-distancematrix-transpose"]], "skbio.stats.distance.DistanceMatrix.within": [[536, "skbio-stats-distance-distancematrix-within"]], "skbio.stats.distance.DistanceMatrix.write": [[537, "skbio-stats-distance-distancematrix-write"]], "skbio.stats.distance.DistanceMatrixError": [[538, "skbio-stats-distance-distancematrixerror"]], "skbio.stats.distance.MissingIDError": [[539, "skbio-stats-distance-missingiderror"]], "skbio.stats.distance.anosim": [[540, "skbio-stats-distance-anosim"]], "skbio.stats.distance.bioenv": [[541, "skbio-stats-distance-bioenv"]], "skbio.stats.distance.mantel": [[542, "skbio-stats-distance-mantel"]], "skbio.stats.distance.permanova": [[543, "skbio-stats-distance-permanova"]], "skbio.stats.distance.permdisp": [[544, "skbio-stats-distance-permdisp"]], "skbio.stats.distance.pwmantel": [[545, "skbio-stats-distance-pwmantel"]], "skbio.stats.distance.randdm": [[546, "skbio-stats-distance-randdm"]], "Evolutionary statistics (skbio.stats.evolve)": [[547, "evolutionary-statistics-skbio-stats-evolve"]], "Cophylogenetic methods": [[547, "cophylogenetic-methods"]], "skbio.stats.evolve.hommola_cospeciation": [[548, "skbio-stats-evolve-hommola-cospeciation"]], "Gradient analyses (skbio.stats.gradient)": [[549, "gradient-analyses-skbio-stats-gradient"]], "skbio.stats.gradient.AverageGradientANOVA": [[550, "skbio-stats-gradient-averagegradientanova"]], "skbio.stats.gradient.AverageGradientANOVA.__eq__": [[551, "skbio-stats-gradient-averagegradientanova-eq"]], "skbio.stats.gradient.AverageGradientANOVA.__ge__": [[552, "skbio-stats-gradient-averagegradientanova-ge"]], "skbio.stats.gradient.AverageGradientANOVA.__gt__": [[553, "skbio-stats-gradient-averagegradientanova-gt"]], "skbio.stats.gradient.AverageGradientANOVA.__hash__": [[554, "skbio-stats-gradient-averagegradientanova-hash"]], "skbio.stats.gradient.AverageGradientANOVA.__le__": [[555, "skbio-stats-gradient-averagegradientanova-le"]], "skbio.stats.gradient.AverageGradientANOVA.__lt__": [[556, "skbio-stats-gradient-averagegradientanova-lt"]], "skbio.stats.gradient.AverageGradientANOVA.__ne__": [[557, "skbio-stats-gradient-averagegradientanova-ne"]], "skbio.stats.gradient.AverageGradientANOVA.__str__": [[558, "skbio-stats-gradient-averagegradientanova-str"]], "skbio.stats.gradient.AverageGradientANOVA.get_trajectories": [[559, "skbio-stats-gradient-averagegradientanova-get-trajectories"]], "skbio.stats.gradient.CategoryResults": [[560, "skbio-stats-gradient-categoryresults"]], "skbio.stats.gradient.CategoryResults.__eq__": [[561, "skbio-stats-gradient-categoryresults-eq"]], "skbio.stats.gradient.CategoryResults.__ge__": [[562, "skbio-stats-gradient-categoryresults-ge"]], "skbio.stats.gradient.CategoryResults.__gt__": [[563, "skbio-stats-gradient-categoryresults-gt"]], "skbio.stats.gradient.CategoryResults.__hash__": [[564, "skbio-stats-gradient-categoryresults-hash"]], "skbio.stats.gradient.CategoryResults.__le__": [[565, "skbio-stats-gradient-categoryresults-le"]], "skbio.stats.gradient.CategoryResults.__lt__": [[566, "skbio-stats-gradient-categoryresults-lt"]], "skbio.stats.gradient.CategoryResults.__ne__": [[567, "skbio-stats-gradient-categoryresults-ne"]], "skbio.stats.gradient.CategoryResults.__str__": [[568, "skbio-stats-gradient-categoryresults-str"]], "skbio.stats.gradient.CategoryResults.to_files": [[569, "skbio-stats-gradient-categoryresults-to-files"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA": [[570, "skbio-stats-gradient-firstdifferencegradientanova"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__": [[571, "skbio-stats-gradient-firstdifferencegradientanova-eq"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__": [[572, "skbio-stats-gradient-firstdifferencegradientanova-ge"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__": [[573, "skbio-stats-gradient-firstdifferencegradientanova-gt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__": [[574, "skbio-stats-gradient-firstdifferencegradientanova-hash"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__": [[575, "skbio-stats-gradient-firstdifferencegradientanova-le"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__": [[576, "skbio-stats-gradient-firstdifferencegradientanova-lt"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__": [[577, "skbio-stats-gradient-firstdifferencegradientanova-ne"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__": [[578, "skbio-stats-gradient-firstdifferencegradientanova-str"]], "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories": [[579, "skbio-stats-gradient-firstdifferencegradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVA": [[580, "skbio-stats-gradient-gradientanova"]], "skbio.stats.gradient.GradientANOVA.__eq__": [[581, "skbio-stats-gradient-gradientanova-eq"]], "skbio.stats.gradient.GradientANOVA.__ge__": [[582, "skbio-stats-gradient-gradientanova-ge"]], "skbio.stats.gradient.GradientANOVA.__gt__": [[583, "skbio-stats-gradient-gradientanova-gt"]], "skbio.stats.gradient.GradientANOVA.__hash__": [[584, "skbio-stats-gradient-gradientanova-hash"]], "skbio.stats.gradient.GradientANOVA.__le__": [[585, "skbio-stats-gradient-gradientanova-le"]], "skbio.stats.gradient.GradientANOVA.__lt__": [[586, "skbio-stats-gradient-gradientanova-lt"]], "skbio.stats.gradient.GradientANOVA.__ne__": [[587, "skbio-stats-gradient-gradientanova-ne"]], "skbio.stats.gradient.GradientANOVA.__str__": [[588, "skbio-stats-gradient-gradientanova-str"]], "skbio.stats.gradient.GradientANOVA.get_trajectories": [[589, "skbio-stats-gradient-gradientanova-get-trajectories"]], "skbio.stats.gradient.GradientANOVAResults": [[590, "skbio-stats-gradient-gradientanovaresults"]], "skbio.stats.gradient.GradientANOVAResults.__eq__": [[591, "skbio-stats-gradient-gradientanovaresults-eq"]], "skbio.stats.gradient.GradientANOVAResults.__ge__": [[592, "skbio-stats-gradient-gradientanovaresults-ge"]], "skbio.stats.gradient.GradientANOVAResults.__gt__": [[593, "skbio-stats-gradient-gradientanovaresults-gt"]], "skbio.stats.gradient.GradientANOVAResults.__hash__": [[594, "skbio-stats-gradient-gradientanovaresults-hash"]], "skbio.stats.gradient.GradientANOVAResults.__le__": [[595, "skbio-stats-gradient-gradientanovaresults-le"]], "skbio.stats.gradient.GradientANOVAResults.__lt__": [[596, "skbio-stats-gradient-gradientanovaresults-lt"]], "skbio.stats.gradient.GradientANOVAResults.__ne__": [[597, "skbio-stats-gradient-gradientanovaresults-ne"]], "skbio.stats.gradient.GradientANOVAResults.__str__": [[598, "skbio-stats-gradient-gradientanovaresults-str"]], "skbio.stats.gradient.GradientANOVAResults.to_files": [[599, "skbio-stats-gradient-gradientanovaresults-to-files"]], "skbio.stats.gradient.GroupResults": [[600, "skbio-stats-gradient-groupresults"]], "skbio.stats.gradient.GroupResults.__eq__": [[601, "skbio-stats-gradient-groupresults-eq"]], "skbio.stats.gradient.GroupResults.__ge__": [[602, "skbio-stats-gradient-groupresults-ge"]], "skbio.stats.gradient.GroupResults.__gt__": [[603, "skbio-stats-gradient-groupresults-gt"]], "skbio.stats.gradient.GroupResults.__hash__": [[604, "skbio-stats-gradient-groupresults-hash"]], "skbio.stats.gradient.GroupResults.__le__": [[605, "skbio-stats-gradient-groupresults-le"]], "skbio.stats.gradient.GroupResults.__lt__": [[606, "skbio-stats-gradient-groupresults-lt"]], "skbio.stats.gradient.GroupResults.__ne__": [[607, "skbio-stats-gradient-groupresults-ne"]], "skbio.stats.gradient.GroupResults.__str__": [[608, "skbio-stats-gradient-groupresults-str"]], "skbio.stats.gradient.GroupResults.to_files": [[609, "skbio-stats-gradient-groupresults-to-files"]], "skbio.stats.gradient.TrajectoryGradientANOVA": [[610, "skbio-stats-gradient-trajectorygradientanova"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__": [[611, "skbio-stats-gradient-trajectorygradientanova-eq"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__": [[612, "skbio-stats-gradient-trajectorygradientanova-ge"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__": [[613, "skbio-stats-gradient-trajectorygradientanova-gt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__": [[614, "skbio-stats-gradient-trajectorygradientanova-hash"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__le__": [[615, "skbio-stats-gradient-trajectorygradientanova-le"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__": [[616, "skbio-stats-gradient-trajectorygradientanova-lt"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__": [[617, "skbio-stats-gradient-trajectorygradientanova-ne"]], "skbio.stats.gradient.TrajectoryGradientANOVA.__str__": [[618, "skbio-stats-gradient-trajectorygradientanova-str"]], "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories": [[619, "skbio-stats-gradient-trajectorygradientanova-get-trajectories"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA": [[620, "skbio-stats-gradient-windowdifferencegradientanova"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__": [[621, "skbio-stats-gradient-windowdifferencegradientanova-eq"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__": [[622, "skbio-stats-gradient-windowdifferencegradientanova-ge"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__": [[623, "skbio-stats-gradient-windowdifferencegradientanova-gt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__": [[624, "skbio-stats-gradient-windowdifferencegradientanova-hash"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__": [[625, "skbio-stats-gradient-windowdifferencegradientanova-le"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__": [[626, "skbio-stats-gradient-windowdifferencegradientanova-lt"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__": [[627, "skbio-stats-gradient-windowdifferencegradientanova-ne"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__": [[628, "skbio-stats-gradient-windowdifferencegradientanova-str"]], "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories": [[629, "skbio-stats-gradient-windowdifferencegradientanova-get-trajectories"]], "skbio.stats.isubsample": [[630, "skbio-stats-isubsample"]], "Ordination methods (skbio.stats.ordination)": [[631, "ordination-methods-skbio-stats-ordination"]], "Ordination Functions": [[631, "ordination-functions"]], "Utility Functions": [[631, "utility-functions"], [806, "utility-functions"]], "skbio.stats.ordination.OrdinationResults": [[632, "skbio-stats-ordination-ordinationresults"]], "skbio.stats.ordination.OrdinationResults.__eq__": [[633, "skbio-stats-ordination-ordinationresults-eq"]], "skbio.stats.ordination.OrdinationResults.__ge__": [[634, "skbio-stats-ordination-ordinationresults-ge"]], "skbio.stats.ordination.OrdinationResults.__gt__": [[635, "skbio-stats-ordination-ordinationresults-gt"]], "skbio.stats.ordination.OrdinationResults.__hash__": [[636, "skbio-stats-ordination-ordinationresults-hash"]], "skbio.stats.ordination.OrdinationResults.__le__": [[637, "skbio-stats-ordination-ordinationresults-le"]], "skbio.stats.ordination.OrdinationResults.__lt__": [[638, "skbio-stats-ordination-ordinationresults-lt"]], "skbio.stats.ordination.OrdinationResults.__ne__": [[639, "skbio-stats-ordination-ordinationresults-ne"]], "skbio.stats.ordination.OrdinationResults.__str__": [[640, "skbio-stats-ordination-ordinationresults-str"]], "skbio.stats.ordination.OrdinationResults.plot": [[641, "skbio-stats-ordination-ordinationresults-plot"]], "skbio.stats.ordination.OrdinationResults.read": [[642, "skbio-stats-ordination-ordinationresults-read"]], "skbio.stats.ordination.OrdinationResults.write": [[643, "skbio-stats-ordination-ordinationresults-write"]], "skbio.stats.ordination.ca": [[644, "skbio-stats-ordination-ca"]], "skbio.stats.ordination.cca": [[645, "skbio-stats-ordination-cca"]], "skbio.stats.ordination.corr": [[646, "skbio-stats-ordination-corr"]], "skbio.stats.ordination.e_matrix": [[647, "skbio-stats-ordination-e-matrix"]], "skbio.stats.ordination.f_matrix": [[648, "skbio-stats-ordination-f-matrix"]], "skbio.stats.ordination.mean_and_std": [[649, "skbio-stats-ordination-mean-and-std"]], "skbio.stats.ordination.pcoa": [[650, "skbio-stats-ordination-pcoa"]], "skbio.stats.ordination.pcoa_biplot": [[651, "skbio-stats-ordination-pcoa-biplot"]], "skbio.stats.ordination.rda": [[652, "skbio-stats-ordination-rda"]], "skbio.stats.ordination.scale": [[653, "skbio-stats-ordination-scale"]], "skbio.stats.ordination.svd_rank": [[654, "skbio-stats-ordination-svd-rank"]], "Empirical Power Estimation (skbio.stats.power)": [[655, "empirical-power-estimation-skbio-stats-power"]], "skbio.stats.power.confidence_bound": [[656, "skbio-stats-power-confidence-bound"]], "skbio.stats.power.paired_subsamples": [[657, "skbio-stats-power-paired-subsamples"]], "skbio.stats.power.subsample_paired_power": [[658, "skbio-stats-power-subsample-paired-power"]], "skbio.stats.power.subsample_power": [[659, "skbio-stats-power-subsample-power"]], "skbio.stats.subsample_counts": [[660, "skbio-stats-subsample-counts"]], "skbio.tree.DuplicateNodeError": [[661, "skbio-tree-duplicatenodeerror"]], "skbio.tree.MissingNodeError": [[662, "skbio-tree-missingnodeerror"]], "skbio.tree.NoLengthError": [[663, "skbio-tree-nolengtherror"]], "skbio.tree.NoParentError": [[664, "skbio-tree-noparenterror"]], "skbio.tree.TreeError": [[665, "skbio-tree-treeerror"]], "skbio.tree.TreeNode": [[666, "skbio-tree-treenode"]], "skbio.tree.TreeNode.__copy__": [[667, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.__deepcopy__": [[668, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.__eq__": [[669, "skbio-tree-treenode-eq"]], "skbio.tree.TreeNode.__ge__": [[670, "skbio-tree-treenode-ge"]], "skbio.tree.TreeNode.__getitem__": [[671, "skbio-tree-treenode-getitem"]], "skbio.tree.TreeNode.__gt__": [[672, "skbio-tree-treenode-gt"]], "skbio.tree.TreeNode.__hash__": [[673, "skbio-tree-treenode-hash"]], "skbio.tree.TreeNode.__iter__": [[674, "skbio-tree-treenode-iter"]], "skbio.tree.TreeNode.__le__": [[675, "skbio-tree-treenode-le"]], "skbio.tree.TreeNode.__len__": [[676, "skbio-tree-treenode-len"]], "skbio.tree.TreeNode.__lt__": [[677, "skbio-tree-treenode-lt"]], "skbio.tree.TreeNode.__ne__": [[678, "skbio-tree-treenode-ne"]], "skbio.tree.TreeNode.__str__": [[679, "skbio-tree-treenode-str"]], "skbio.tree.TreeNode.accumulate_to_ancestor": [[680, "skbio-tree-treenode-accumulate-to-ancestor"]], "skbio.tree.TreeNode.ancestors": [[681, "skbio-tree-treenode-ancestors"]], "skbio.tree.TreeNode.append": [[682, "skbio-tree-treenode-append"]], "skbio.tree.TreeNode.ascii_art": [[683, "skbio-tree-treenode-ascii-art"]], "skbio.tree.TreeNode.assign_ids": [[684, "skbio-tree-treenode-assign-ids"]], "skbio.tree.TreeNode.assign_supports": [[685, "skbio-tree-treenode-assign-supports"]], "skbio.tree.TreeNode.bifurcate": [[686, "skbio-tree-treenode-bifurcate"]], "skbio.tree.TreeNode.cache_attr": [[687, "skbio-tree-treenode-cache-attr"]], "skbio.tree.TreeNode.compare_rfd": [[688, "skbio-tree-treenode-compare-rfd"]], "skbio.tree.TreeNode.compare_subsets": [[689, "skbio-tree-treenode-compare-subsets"]], "skbio.tree.TreeNode.compare_tip_distances": [[690, "skbio-tree-treenode-compare-tip-distances"]], "skbio.tree.TreeNode.copy": [[691, "skbio-tree-treenode-copy"]], "skbio.tree.TreeNode.count": [[692, "skbio-tree-treenode-count"]], "skbio.tree.TreeNode.create_caches": [[693, "skbio-tree-treenode-create-caches"]], "skbio.tree.TreeNode.deepcopy": [[694, "skbio-tree-treenode-deepcopy"]], "skbio.tree.TreeNode.descending_branch_length": [[695, "skbio-tree-treenode-descending-branch-length"]], "skbio.tree.TreeNode.distance": [[696, "skbio-tree-treenode-distance"]], "skbio.tree.TreeNode.extend": [[697, "skbio-tree-treenode-extend"]], "skbio.tree.TreeNode.find": [[698, "skbio-tree-treenode-find"]], "skbio.tree.TreeNode.find_all": [[699, "skbio-tree-treenode-find-all"]], "skbio.tree.TreeNode.find_by_func": [[700, "skbio-tree-treenode-find-by-func"]], "skbio.tree.TreeNode.find_by_id": [[701, "skbio-tree-treenode-find-by-id"]], "skbio.tree.TreeNode.from_linkage_matrix": [[702, "skbio-tree-treenode-from-linkage-matrix"]], "skbio.tree.TreeNode.from_taxdump": [[703, "skbio-tree-treenode-from-taxdump"]], "skbio.tree.TreeNode.from_taxonomy": [[704, "skbio-tree-treenode-from-taxonomy"]], "skbio.tree.TreeNode.get_max_distance": [[705, "skbio-tree-treenode-get-max-distance"]], "skbio.tree.TreeNode.has_children": [[706, "skbio-tree-treenode-has-children"]], "skbio.tree.TreeNode.index_tree": [[707, "skbio-tree-treenode-index-tree"]], "skbio.tree.TreeNode.invalidate_caches": [[708, "skbio-tree-treenode-invalidate-caches"]], "skbio.tree.TreeNode.is_root": [[709, "skbio-tree-treenode-is-root"]], "skbio.tree.TreeNode.is_tip": [[710, "skbio-tree-treenode-is-tip"]], "skbio.tree.TreeNode.lca": [[711, "skbio-tree-treenode-lca"]], "skbio.tree.TreeNode.levelorder": [[712, "skbio-tree-treenode-levelorder"]], "skbio.tree.TreeNode.lowest_common_ancestor": [[713, "skbio-tree-treenode-lowest-common-ancestor"]], "skbio.tree.TreeNode.neighbors": [[714, "skbio-tree-treenode-neighbors"]], "skbio.tree.TreeNode.non_tips": [[715, "skbio-tree-treenode-non-tips"]], "skbio.tree.TreeNode.observed_node_counts": [[716, "skbio-tree-treenode-observed-node-counts"]], "skbio.tree.TreeNode.pop": [[717, "skbio-tree-treenode-pop"]], "skbio.tree.TreeNode.postorder": [[718, "skbio-tree-treenode-postorder"]], "skbio.tree.TreeNode.pre_and_postorder": [[719, "skbio-tree-treenode-pre-and-postorder"]], "skbio.tree.TreeNode.preorder": [[720, "skbio-tree-treenode-preorder"]], "skbio.tree.TreeNode.prune": [[721, "skbio-tree-treenode-prune"]], "skbio.tree.TreeNode.read": [[722, "skbio-tree-treenode-read"]], "skbio.tree.TreeNode.remove": [[723, "skbio-tree-treenode-remove"]], "skbio.tree.TreeNode.remove_deleted": [[724, "skbio-tree-treenode-remove-deleted"]], "skbio.tree.TreeNode.root": [[725, "skbio-tree-treenode-root"]], "skbio.tree.TreeNode.root_at": [[726, "skbio-tree-treenode-root-at"]], "skbio.tree.TreeNode.root_at_midpoint": [[727, "skbio-tree-treenode-root-at-midpoint"]], "skbio.tree.TreeNode.shear": [[728, "skbio-tree-treenode-shear"]], "skbio.tree.TreeNode.shuffle": [[729, "skbio-tree-treenode-shuffle"]], "skbio.tree.TreeNode.siblings": [[730, "skbio-tree-treenode-siblings"]], "skbio.tree.TreeNode.subset": [[731, "skbio-tree-treenode-subset"]], "skbio.tree.TreeNode.subsets": [[732, "skbio-tree-treenode-subsets"]], "skbio.tree.TreeNode.subtree": [[733, "skbio-tree-treenode-subtree"]], "skbio.tree.TreeNode.tip_tip_distances": [[734, "skbio-tree-treenode-tip-tip-distances"]], "skbio.tree.TreeNode.tips": [[735, "skbio-tree-treenode-tips"]], "skbio.tree.TreeNode.to_array": [[736, "skbio-tree-treenode-to-array"]], "skbio.tree.TreeNode.to_taxonomy": [[737, "skbio-tree-treenode-to-taxonomy"]], "skbio.tree.TreeNode.traverse": [[738, "skbio-tree-treenode-traverse"]], "skbio.tree.TreeNode.unpack": [[739, "skbio-tree-treenode-unpack"]], "skbio.tree.TreeNode.unpack_by_func": [[740, "skbio-tree-treenode-unpack-by-func"]], "skbio.tree.TreeNode.unrooted_copy": [[741, "skbio-tree-treenode-unrooted-copy"]], "skbio.tree.TreeNode.unrooted_deepcopy": [[742, "skbio-tree-treenode-unrooted-deepcopy"]], "skbio.tree.TreeNode.write": [[743, "skbio-tree-treenode-write"]], "skbio.tree.majority_rule": [[744, "skbio-tree-majority-rule"]], "skbio.tree.nj": [[745, "skbio-tree-nj"]], "skbio.util.EfficiencyWarning": [[746, "skbio-util-efficiencywarning"]], "skbio.util.RepresentationWarning": [[747, "skbio-util-representationwarning"]], "skbio.util.assert_data_frame_almost_equal": [[748, "skbio-util-assert-data-frame-almost-equal"]], "skbio.util.assert_ordination_results_equal": [[749, "skbio-util-assert-ordination-results-equal"]], "skbio.util.cardinal_to_ordinal": [[750, "skbio-util-cardinal-to-ordinal"]], "skbio.util.classproperty": [[751, "skbio-util-classproperty"]], "skbio.util.classproperty.__delete__": [[752, "skbio-util-classproperty-delete"]], "skbio.util.classproperty.__eq__": [[753, "skbio-util-classproperty-eq"]], "skbio.util.classproperty.__ge__": [[754, "skbio-util-classproperty-ge"]], "skbio.util.classproperty.__get__": [[755, "skbio-util-classproperty-get"]], "skbio.util.classproperty.__gt__": [[756, "skbio-util-classproperty-gt"]], "skbio.util.classproperty.__hash__": [[757, "skbio-util-classproperty-hash"]], "skbio.util.classproperty.__le__": [[758, "skbio-util-classproperty-le"]], "skbio.util.classproperty.__lt__": [[759, "skbio-util-classproperty-lt"]], "skbio.util.classproperty.__ne__": [[760, "skbio-util-classproperty-ne"]], "skbio.util.classproperty.__set__": [[761, "skbio-util-classproperty-set"]], "skbio.util.classproperty.__set_name__": [[762, "skbio-util-classproperty-set-name"]], "skbio.util.classproperty.__str__": [[763, "skbio-util-classproperty-str"]], "skbio.util.classproperty.deleter": [[764, "skbio-util-classproperty-deleter"]], "skbio.util.classproperty.getter": [[765, "skbio-util-classproperty-getter"]], "skbio.util.classproperty.setter": [[766, "skbio-util-classproperty-setter"]], "skbio.util.find_duplicates": [[767, "skbio-util-find-duplicates"]], "skbio.util.get_data_path": [[768, "skbio-util-get-data-path"]], "skbio.util.safe_md5": [[769, "skbio-util-safe-md5"]], "skbio.workflow.Workflow": [[770, "skbio-workflow-workflow"]], "skbio.workflow.Workflow.__call__": [[771, "skbio-workflow-workflow-call"]], "skbio.workflow.Workflow.__eq__": [[772, "skbio-workflow-workflow-eq"]], "skbio.workflow.Workflow.__ge__": [[773, "skbio-workflow-workflow-ge"]], "skbio.workflow.Workflow.__gt__": [[774, "skbio-workflow-workflow-gt"]], "skbio.workflow.Workflow.__hash__": [[775, "skbio-workflow-workflow-hash"]], "skbio.workflow.Workflow.__le__": [[776, "skbio-workflow-workflow-le"]], "skbio.workflow.Workflow.__lt__": [[777, "skbio-workflow-workflow-lt"]], "skbio.workflow.Workflow.__ne__": [[778, "skbio-workflow-workflow-ne"]], "skbio.workflow.Workflow.__str__": [[779, "skbio-workflow-workflow-str"]], "skbio.workflow.Workflow.initialize_state": [[780, "skbio-workflow-workflow-initialize-state"]], "skbio.workflow.method": [[781, "skbio-workflow-method"]], "skbio.workflow.method.__call__": [[782, "skbio-workflow-method-call"]], "skbio.workflow.method.__eq__": [[783, "skbio-workflow-method-eq"]], "skbio.workflow.method.__ge__": [[784, "skbio-workflow-method-ge"]], "skbio.workflow.method.__gt__": [[785, "skbio-workflow-method-gt"]], "skbio.workflow.method.__hash__": [[786, "skbio-workflow-method-hash"]], "skbio.workflow.method.__le__": [[787, "skbio-workflow-method-le"]], "skbio.workflow.method.__lt__": [[788, "skbio-workflow-method-lt"]], "skbio.workflow.method.__ne__": [[789, "skbio-workflow-method-ne"]], "skbio.workflow.method.__str__": [[790, "skbio-workflow-method-str"]], "skbio.workflow.requires": [[791, "skbio-workflow-requires"]], "skbio.workflow.requires.__call__": [[792, "skbio-workflow-requires-call"]], "skbio.workflow.requires.__eq__": [[793, "skbio-workflow-requires-eq"]], "skbio.workflow.requires.__ge__": [[794, "skbio-workflow-requires-ge"]], "skbio.workflow.requires.__gt__": [[795, "skbio-workflow-requires-gt"]], "skbio.workflow.requires.__hash__": [[796, "skbio-workflow-requires-hash"]], "skbio.workflow.requires.__le__": [[797, "skbio-workflow-requires-le"]], "skbio.workflow.requires.__lt__": [[798, "skbio-workflow-requires-lt"]], "skbio.workflow.requires.__ne__": [[799, "skbio-workflow-requires-ne"]], "skbio.workflow.requires.__str__": [[800, "skbio-workflow-requires-str"]], "scikit-bio": [[801, "scikit-bio"]], "API Reference": [[801, "api-reference"]], "User Documentation": [[801, "user-documentation"]], "Developer Documentation": [[801, "developer-documentation"]], "File I/O (skbio.io)": [[802, "file-i-o-skbio-io"]], "Supported file formats": [[802, "supported-file-formats"]], "User functions": [[802, "user-functions"]], "User exceptions and warnings": [[802, "user-exceptions-and-warnings"]], "Introduction to I/O": [[802, "introduction-to-i-o"]], "What kinds of files scikit-bio can use": [[802, "what-kinds-of-files-scikit-bio-can-use"]], "Reading files into scikit-bio": [[802, "reading-files-into-scikit-bio"]], "Writing files from scikit-bio": [[802, "writing-files-from-scikit-bio"]], "Metadata (skbio.metadata)": [[803, "metadata-skbio-metadata"]], "Sequences (skbio.sequence)": [[804, "sequences-skbio-sequence"]], "Statistics (skbio.stats)": [[805, "statistics-skbio-stats"]], "Tree representations (skbio.tree)": [[806, "tree-representations-skbio-tree"]], "Phylogenetic Reconstruction": [[806, "phylogenetic-reconstruction"]], "API Stability": [[807, "api-stability"]], "Stable": [[807, "stable"]], "Experimental": [[807, "experimental"]], "Deprecated": [[807, "deprecated"]], "Utility functionality (skbio.util)": [[808, "utility-functionality-skbio-util"]], "Testing functionality": [[808, "testing-functionality"]], "Miscellaneous functionality": [[808, "miscellaneous-functionality"]], "Constructing workflows (skbio.workflow)": [[809, "constructing-workflows-skbio-workflow"]], "Decorators": [[809, "decorators"]]}, "indexentries": {"module": [[0, "module-skbio.alignment"], [3, "module-skbio.diversity"], [70, "module-skbio.diversity.alpha"], [103, "module-skbio.diversity.beta"], [130, "module-skbio.io.format.binary_dm"], [131, "module-skbio.io.format.blast6"], [132, "module-skbio.io.format.blast7"], [133, "module-skbio.io.format.clustal"], [134, "module-skbio.io.format.embl"], [135, "module-skbio.io.format.fasta"], [136, "module-skbio.io.format.fastq"], [137, "module-skbio.io.format.genbank"], [138, "module-skbio.io.format.gff3"], [139, "module-skbio.io.format.lsmat"], [140, "module-skbio.io.format.newick"], [141, "module-skbio.io.format.ordination"], [142, "module-skbio.io.format.phylip"], [143, "module-skbio.io.format.qseq"], [144, "module-skbio.io.format.stockholm"], [145, "module-skbio.io.format.taxdump"], [146, "module-skbio.io.registry"], [185, "module-skbio.io.util"], [470, "module-skbio.sequence.distance"], [473, "module-skbio.stats.composition"], [489, "module-skbio.stats.distance"], [547, "module-skbio.stats.evolve"], [549, "module-skbio.stats.gradient"], [631, "module-skbio.stats.ordination"], [655, "module-skbio.stats.power"], [802, "module-skbio.io"], [803, "module-skbio.metadata"], [804, "module-skbio.sequence"], [805, "module-skbio.stats"], [806, "module-skbio.tree"], [808, "module-skbio.util"], [809, "module-skbio.workflow"]], "skbio.alignment": [[0, "module-skbio.alignment"]], "skbio.diversity": [[3, "module-skbio.diversity"]], "open() (in module skbio.io.util)": [[4, "skbio.io.util.open"]], "open_file() (in module skbio.io.util)": [[5, "skbio.io.util.open_file"]], "open_files() (in module skbio.io.util)": [[6, "skbio.io.util.open_files"]], "alignmentstructure (class in skbio.alignment)": [[7, "skbio.alignment.AlignmentStructure"]], "__eq__() (skbio.alignment.alignmentstructure method)": [[8, "skbio.alignment.AlignmentStructure.__eq__"]], "__ge__() (skbio.alignment.alignmentstructure method)": [[9, "skbio.alignment.AlignmentStructure.__ge__"]], "__getitem__() (skbio.alignment.alignmentstructure method)": [[10, "skbio.alignment.AlignmentStructure.__getitem__"]], "__gt__() (skbio.alignment.alignmentstructure method)": [[11, "skbio.alignment.AlignmentStructure.__gt__"]], "__hash__() (skbio.alignment.alignmentstructure method)": [[12, "skbio.alignment.AlignmentStructure.__hash__"]], "__le__() (skbio.alignment.alignmentstructure method)": [[13, "skbio.alignment.AlignmentStructure.__le__"]], "__lt__() (skbio.alignment.alignmentstructure method)": [[14, "skbio.alignment.AlignmentStructure.__lt__"]], "__ne__() (skbio.alignment.alignmentstructure method)": [[15, "skbio.alignment.AlignmentStructure.__ne__"]], "__setstate__() (skbio.alignment.alignmentstructure method)": [[16, "skbio.alignment.AlignmentStructure.__setstate__"]], "__str__() (skbio.alignment.alignmentstructure method)": [[17, "skbio.alignment.AlignmentStructure.__str__"]], "is_zero_based() (skbio.alignment.alignmentstructure method)": [[18, "skbio.alignment.AlignmentStructure.is_zero_based"]], "set_zero_based() (skbio.alignment.alignmentstructure method)": [[19, "skbio.alignment.AlignmentStructure.set_zero_based"]], "stripedsmithwaterman (class in skbio.alignment)": [[20, "skbio.alignment.StripedSmithWaterman"]], "__call__() (skbio.alignment.stripedsmithwaterman method)": [[21, "skbio.alignment.StripedSmithWaterman.__call__"]], "__eq__() (skbio.alignment.stripedsmithwaterman method)": [[22, "skbio.alignment.StripedSmithWaterman.__eq__"]], "__ge__() (skbio.alignment.stripedsmithwaterman method)": [[23, "skbio.alignment.StripedSmithWaterman.__ge__"]], "__gt__() (skbio.alignment.stripedsmithwaterman method)": [[24, "skbio.alignment.StripedSmithWaterman.__gt__"]], "__hash__() (skbio.alignment.stripedsmithwaterman method)": [[25, "skbio.alignment.StripedSmithWaterman.__hash__"]], "__le__() (skbio.alignment.stripedsmithwaterman method)": [[26, "skbio.alignment.StripedSmithWaterman.__le__"]], "__lt__() (skbio.alignment.stripedsmithwaterman method)": [[27, "skbio.alignment.StripedSmithWaterman.__lt__"]], "__ne__() (skbio.alignment.stripedsmithwaterman method)": [[28, "skbio.alignment.StripedSmithWaterman.__ne__"]], "__setstate__() (skbio.alignment.stripedsmithwaterman method)": [[29, "skbio.alignment.StripedSmithWaterman.__setstate__"]], "__str__() (skbio.alignment.stripedsmithwaterman method)": [[30, "skbio.alignment.StripedSmithWaterman.__str__"]], "tabularmsa (class in skbio.alignment)": [[31, "skbio.alignment.TabularMSA"]], "__bool__() (skbio.alignment.tabularmsa method)": [[32, "skbio.alignment.TabularMSA.__bool__"]], "__contains__() (skbio.alignment.tabularmsa method)": [[33, "skbio.alignment.TabularMSA.__contains__"]], "__copy__() (skbio.alignment.tabularmsa method)": [[34, "skbio.alignment.TabularMSA.__copy__"]], "__deepcopy__() (skbio.alignment.tabularmsa method)": [[35, "skbio.alignment.TabularMSA.__deepcopy__"]], "__eq__() (skbio.alignment.tabularmsa method)": [[36, "skbio.alignment.TabularMSA.__eq__"]], "__ge__() (skbio.alignment.tabularmsa method)": [[37, "skbio.alignment.TabularMSA.__ge__"]], "__getitem__() (skbio.alignment.tabularmsa method)": [[38, "skbio.alignment.TabularMSA.__getitem__"]], "__gt__() (skbio.alignment.tabularmsa method)": [[39, "skbio.alignment.TabularMSA.__gt__"]], "__iter__() (skbio.alignment.tabularmsa method)": [[40, "skbio.alignment.TabularMSA.__iter__"]], "__le__() (skbio.alignment.tabularmsa method)": [[41, "skbio.alignment.TabularMSA.__le__"]], "__len__() (skbio.alignment.tabularmsa method)": [[42, "skbio.alignment.TabularMSA.__len__"]], "__lt__() (skbio.alignment.tabularmsa method)": [[43, "skbio.alignment.TabularMSA.__lt__"]], "__ne__() (skbio.alignment.tabularmsa method)": [[44, "skbio.alignment.TabularMSA.__ne__"]], "__reversed__() (skbio.alignment.tabularmsa method)": [[45, "skbio.alignment.TabularMSA.__reversed__"]], "__str__() (skbio.alignment.tabularmsa method)": [[46, "skbio.alignment.TabularMSA.__str__"]], "append() (skbio.alignment.tabularmsa method)": [[47, "skbio.alignment.TabularMSA.append"]], "consensus() (skbio.alignment.tabularmsa method)": [[48, "skbio.alignment.TabularMSA.consensus"]], "conservation() (skbio.alignment.tabularmsa method)": [[49, "skbio.alignment.TabularMSA.conservation"]], "extend() (skbio.alignment.tabularmsa method)": [[50, "skbio.alignment.TabularMSA.extend"]], "from_dict() (skbio.alignment.tabularmsa class method)": [[51, "skbio.alignment.TabularMSA.from_dict"]], "gap_frequencies() (skbio.alignment.tabularmsa method)": [[52, "skbio.alignment.TabularMSA.gap_frequencies"]], "has_metadata() (skbio.alignment.tabularmsa method)": [[53, "skbio.alignment.TabularMSA.has_metadata"]], "has_positional_metadata() (skbio.alignment.tabularmsa method)": [[54, "skbio.alignment.TabularMSA.has_positional_metadata"]], "iter_positions() (skbio.alignment.tabularmsa method)": [[55, "skbio.alignment.TabularMSA.iter_positions"]], "join() (skbio.alignment.tabularmsa method)": [[56, "skbio.alignment.TabularMSA.join"]], "read() (skbio.alignment.tabularmsa class method)": [[57, "skbio.alignment.TabularMSA.read"]], "reassign_index() (skbio.alignment.tabularmsa method)": [[58, "skbio.alignment.TabularMSA.reassign_index"]], "sort() (skbio.alignment.tabularmsa method)": [[59, "skbio.alignment.TabularMSA.sort"]], "to_dict() (skbio.alignment.tabularmsa method)": [[60, "skbio.alignment.TabularMSA.to_dict"]], "write() (skbio.alignment.tabularmsa method)": [[61, "skbio.alignment.TabularMSA.write"]], "global_pairwise_align() (in module skbio.alignment)": [[62, "skbio.alignment.global_pairwise_align"]], "global_pairwise_align_nucleotide() (in module skbio.alignment)": [[63, "skbio.alignment.global_pairwise_align_nucleotide"]], "global_pairwise_align_protein() (in module skbio.alignment)": [[64, "skbio.alignment.global_pairwise_align_protein"]], "local_pairwise_align() (in module skbio.alignment)": [[65, "skbio.alignment.local_pairwise_align"]], "local_pairwise_align_nucleotide() (in module skbio.alignment)": [[66, "skbio.alignment.local_pairwise_align_nucleotide"]], "local_pairwise_align_protein() (in module skbio.alignment)": [[67, "skbio.alignment.local_pairwise_align_protein"]], "local_pairwise_align_ssw() (in module skbio.alignment)": [[68, "skbio.alignment.local_pairwise_align_ssw"]], "make_identity_substitution_matrix() (in module skbio.alignment)": [[69, "skbio.alignment.make_identity_substitution_matrix"]], "skbio.diversity.alpha": [[70, "module-skbio.diversity.alpha"]], "ace() (in module skbio.diversity.alpha)": [[71, "skbio.diversity.alpha.ace"]], "berger_parker_d() (in module skbio.diversity.alpha)": [[72, "skbio.diversity.alpha.berger_parker_d"]], "brillouin_d() (in module skbio.diversity.alpha)": [[73, "skbio.diversity.alpha.brillouin_d"]], "chao1() (in module skbio.diversity.alpha)": [[74, "skbio.diversity.alpha.chao1"]], "chao1_ci() (in module skbio.diversity.alpha)": [[75, "skbio.diversity.alpha.chao1_ci"]], "dominance() (in module skbio.diversity.alpha)": [[76, "skbio.diversity.alpha.dominance"]], "doubles() (in module skbio.diversity.alpha)": [[77, "skbio.diversity.alpha.doubles"]], "enspie() (in module skbio.diversity.alpha)": [[78, "skbio.diversity.alpha.enspie"]], "esty_ci() (in module skbio.diversity.alpha)": [[79, "skbio.diversity.alpha.esty_ci"]], "faith_pd() (in module skbio.diversity.alpha)": [[80, "skbio.diversity.alpha.faith_pd"]], "fisher_alpha() (in module skbio.diversity.alpha)": [[81, "skbio.diversity.alpha.fisher_alpha"]], "gini_index() (in module skbio.diversity.alpha)": [[82, "skbio.diversity.alpha.gini_index"]], "goods_coverage() (in module skbio.diversity.alpha)": [[83, "skbio.diversity.alpha.goods_coverage"]], "heip_e() (in module skbio.diversity.alpha)": [[84, "skbio.diversity.alpha.heip_e"]], "kempton_taylor_q() (in module skbio.diversity.alpha)": [[85, "skbio.diversity.alpha.kempton_taylor_q"]], "lladser_ci() (in module skbio.diversity.alpha)": [[86, "skbio.diversity.alpha.lladser_ci"]], "lladser_pe() (in module skbio.diversity.alpha)": [[87, "skbio.diversity.alpha.lladser_pe"]], "margalef() (in module skbio.diversity.alpha)": [[88, "skbio.diversity.alpha.margalef"]], "mcintosh_d() (in module skbio.diversity.alpha)": [[89, "skbio.diversity.alpha.mcintosh_d"]], "mcintosh_e() (in module skbio.diversity.alpha)": [[90, "skbio.diversity.alpha.mcintosh_e"]], "menhinick() (in module skbio.diversity.alpha)": [[91, "skbio.diversity.alpha.menhinick"]], "michaelis_menten_fit() (in module skbio.diversity.alpha)": [[92, "skbio.diversity.alpha.michaelis_menten_fit"]], "observed_otus() (in module skbio.diversity.alpha)": [[93, "skbio.diversity.alpha.observed_otus"]], "osd() (in module skbio.diversity.alpha)": [[94, "skbio.diversity.alpha.osd"]], "pielou_e() (in module skbio.diversity.alpha)": [[95, "skbio.diversity.alpha.pielou_e"]], "robbins() (in module skbio.diversity.alpha)": [[96, "skbio.diversity.alpha.robbins"]], "shannon() (in module skbio.diversity.alpha)": [[97, "skbio.diversity.alpha.shannon"]], "simpson() (in module skbio.diversity.alpha)": [[98, "skbio.diversity.alpha.simpson"]], "simpson_e() (in module skbio.diversity.alpha)": [[99, "skbio.diversity.alpha.simpson_e"]], "singles() (in module skbio.diversity.alpha)": [[100, "skbio.diversity.alpha.singles"]], "strong() (in module skbio.diversity.alpha)": [[101, "skbio.diversity.alpha.strong"]], "alpha_diversity() (in module skbio.diversity)": [[102, "skbio.diversity.alpha_diversity"]], "skbio.diversity.beta": [[103, "module-skbio.diversity.beta"]], "unweighted_unifrac() (in module skbio.diversity.beta)": [[104, "skbio.diversity.beta.unweighted_unifrac"]], "weighted_unifrac() (in module skbio.diversity.beta)": [[105, "skbio.diversity.beta.weighted_unifrac"]], "beta_diversity() (in module skbio.diversity)": [[106, "skbio.diversity.beta_diversity"]], "block_beta_diversity() (in module skbio.diversity)": [[107, "skbio.diversity.block_beta_diversity"]], "get_alpha_diversity_metrics() (in module skbio.diversity)": [[108, "skbio.diversity.get_alpha_diversity_metrics"]], "get_beta_diversity_metrics() (in module skbio.diversity)": [[109, "skbio.diversity.get_beta_diversity_metrics"]], "partial_beta_diversity() (in module skbio.diversity)": [[110, "skbio.diversity.partial_beta_diversity"]], "argumentoverridewarning": [[111, "skbio.io.ArgumentOverrideWarning"]], "blast7formaterror": [[112, "skbio.io.BLAST7FormatError"]], "clustalformaterror": [[113, "skbio.io.ClustalFormatError"]], "emblformaterror": [[114, "skbio.io.EMBLFormatError"]], "fastaformaterror": [[115, "skbio.io.FASTAFormatError"]], "fastqformaterror": [[116, "skbio.io.FASTQFormatError"]], "fileformaterror": [[117, "skbio.io.FileFormatError"]], "formatidentificationwarning": [[118, "skbio.io.FormatIdentificationWarning"]], "gff3formaterror": [[119, "skbio.io.GFF3FormatError"]], "genbankformaterror": [[120, "skbio.io.GenBankFormatError"]], "iosourceerror": [[121, "skbio.io.IOSourceError"]], "lsmatformaterror": [[122, "skbio.io.LSMatFormatError"]], "newickformaterror": [[123, "skbio.io.NewickFormatError"]], "ordinationformaterror": [[124, "skbio.io.OrdinationFormatError"]], "phylipformaterror": [[125, "skbio.io.PhylipFormatError"]], "qseqformaterror": [[126, "skbio.io.QSeqFormatError"]], "qualformaterror": [[127, "skbio.io.QUALFormatError"]], "stockholmformaterror": [[128, "skbio.io.StockholmFormatError"]], "unrecognizedformaterror": [[129, "skbio.io.UnrecognizedFormatError"]], "skbio.io.format.binary_dm": [[130, "module-skbio.io.format.binary_dm"]], "skbio.io.format.blast6": [[131, "module-skbio.io.format.blast6"]], "skbio.io.format.blast7": [[132, "module-skbio.io.format.blast7"]], "skbio.io.format.clustal": [[133, "module-skbio.io.format.clustal"]], "skbio.io.format.embl": [[134, "module-skbio.io.format.embl"]], "skbio.io.format.fasta": [[135, "module-skbio.io.format.fasta"]], "skbio.io.format.fastq": [[136, "module-skbio.io.format.fastq"]], "skbio.io.format.genbank": [[137, "module-skbio.io.format.genbank"]], "skbio.io.format.gff3": [[138, "module-skbio.io.format.gff3"]], "skbio.io.format.lsmat": [[139, "module-skbio.io.format.lsmat"]], "skbio.io.format.newick": [[140, "module-skbio.io.format.newick"]], "skbio.io.format.ordination": [[141, "module-skbio.io.format.ordination"]], "skbio.io.format.phylip": [[142, "module-skbio.io.format.phylip"]], "skbio.io.format.qseq": [[143, "module-skbio.io.format.qseq"]], "skbio.io.format.stockholm": [[144, "module-skbio.io.format.stockholm"]], "skbio.io.format.taxdump": [[145, "module-skbio.io.format.taxdump"]], "skbio.io.registry": [[146, "module-skbio.io.registry"]], "duplicateregistrationerror": [[147, "skbio.io.registry.DuplicateRegistrationError"]], "format (class in skbio.io.registry)": [[148, "skbio.io.registry.Format"]], "__eq__() (skbio.io.registry.format method)": [[149, "skbio.io.registry.Format.__eq__"]], "__ge__() (skbio.io.registry.format method)": [[150, "skbio.io.registry.Format.__ge__"]], "__gt__() (skbio.io.registry.format method)": [[151, "skbio.io.registry.Format.__gt__"]], "__hash__() (skbio.io.registry.format method)": [[152, "skbio.io.registry.Format.__hash__"]], "__le__() (skbio.io.registry.format method)": [[153, "skbio.io.registry.Format.__le__"]], "__lt__() (skbio.io.registry.format method)": [[154, "skbio.io.registry.Format.__lt__"]], "__ne__() (skbio.io.registry.format method)": [[155, "skbio.io.registry.Format.__ne__"]], "__str__() (skbio.io.registry.format method)": [[156, "skbio.io.registry.Format.__str__"]], "reader() (skbio.io.registry.format method)": [[157, "skbio.io.registry.Format.reader"]], "sniffer() (skbio.io.registry.format method)": [[158, "skbio.io.registry.Format.sniffer"]], "writer() (skbio.io.registry.format method)": [[159, "skbio.io.registry.Format.writer"]], "ioregistry (class in skbio.io.registry)": [[160, "skbio.io.registry.IORegistry"]], "__eq__() (skbio.io.registry.ioregistry method)": [[161, "skbio.io.registry.IORegistry.__eq__"]], "__ge__() (skbio.io.registry.ioregistry method)": [[162, "skbio.io.registry.IORegistry.__ge__"]], "__gt__() (skbio.io.registry.ioregistry method)": [[163, "skbio.io.registry.IORegistry.__gt__"]], "__hash__() (skbio.io.registry.ioregistry method)": [[164, "skbio.io.registry.IORegistry.__hash__"]], "__le__() (skbio.io.registry.ioregistry method)": [[165, "skbio.io.registry.IORegistry.__le__"]], "__lt__() (skbio.io.registry.ioregistry method)": [[166, "skbio.io.registry.IORegistry.__lt__"]], "__ne__() (skbio.io.registry.ioregistry method)": [[167, "skbio.io.registry.IORegistry.__ne__"]], "__str__() (skbio.io.registry.ioregistry method)": [[168, "skbio.io.registry.IORegistry.__str__"]], "add_format() (skbio.io.registry.ioregistry method)": [[169, "skbio.io.registry.IORegistry.add_format"]], "create_format() (skbio.io.registry.ioregistry method)": [[170, "skbio.io.registry.IORegistry.create_format"]], "get_reader() (skbio.io.registry.ioregistry method)": [[171, "skbio.io.registry.IORegistry.get_reader"]], "get_sniffer() (skbio.io.registry.ioregistry method)": [[172, "skbio.io.registry.IORegistry.get_sniffer"]], "get_writer() (skbio.io.registry.ioregistry method)": [[173, "skbio.io.registry.IORegistry.get_writer"]], "list_read_formats() (skbio.io.registry.ioregistry method)": [[174, "skbio.io.registry.IORegistry.list_read_formats"]], "list_write_formats() (skbio.io.registry.ioregistry method)": [[175, "skbio.io.registry.IORegistry.list_write_formats"]], "monkey_patch() (skbio.io.registry.ioregistry method)": [[176, "skbio.io.registry.IORegistry.monkey_patch"]], "read() (skbio.io.registry.ioregistry method)": [[177, "skbio.io.registry.IORegistry.read"]], "sniff() (skbio.io.registry.ioregistry method)": [[178, "skbio.io.registry.IORegistry.sniff"]], "write() (skbio.io.registry.ioregistry method)": [[179, "skbio.io.registry.IORegistry.write"]], "invalidregistrationerror": [[180, "skbio.io.registry.InvalidRegistrationError"]], "create_format() (in module skbio.io.registry)": [[181, "skbio.io.registry.create_format"]], "read() (in module skbio.io.registry)": [[182, "skbio.io.registry.read"]], "sniff() (in module skbio.io.registry)": [[183, "skbio.io.registry.sniff"]], "write() (in module skbio.io.registry)": [[184, "skbio.io.registry.write"]], "skbio.io.util": [[185, "module-skbio.io.util"]], "interval (class in skbio.metadata)": [[186, "skbio.metadata.Interval"]], "__eq__() (skbio.metadata.interval method)": [[187, "skbio.metadata.Interval.__eq__"]], "__ge__() (skbio.metadata.interval method)": [[188, "skbio.metadata.Interval.__ge__"]], "__gt__() (skbio.metadata.interval method)": [[189, "skbio.metadata.Interval.__gt__"]], "__le__() (skbio.metadata.interval method)": [[190, "skbio.metadata.Interval.__le__"]], "__lt__() (skbio.metadata.interval method)": [[191, "skbio.metadata.Interval.__lt__"]], "__ne__() (skbio.metadata.interval method)": [[192, "skbio.metadata.Interval.__ne__"]], "__str__() (skbio.metadata.interval method)": [[193, "skbio.metadata.Interval.__str__"]], "drop() (skbio.metadata.interval method)": [[194, "skbio.metadata.Interval.drop"]], "intervalmetadata (class in skbio.metadata)": [[195, "skbio.metadata.IntervalMetadata"]], "__copy__() (skbio.metadata.intervalmetadata method)": [[196, "skbio.metadata.IntervalMetadata.__copy__"]], "__deepcopy__() (skbio.metadata.intervalmetadata method)": [[197, "skbio.metadata.IntervalMetadata.__deepcopy__"]], "__eq__() (skbio.metadata.intervalmetadata method)": [[198, "skbio.metadata.IntervalMetadata.__eq__"]], "__ge__() (skbio.metadata.intervalmetadata method)": [[199, "skbio.metadata.IntervalMetadata.__ge__"]], "__gt__() (skbio.metadata.intervalmetadata method)": [[200, "skbio.metadata.IntervalMetadata.__gt__"]], "__le__() (skbio.metadata.intervalmetadata method)": [[201, "skbio.metadata.IntervalMetadata.__le__"]], "__lt__() (skbio.metadata.intervalmetadata method)": [[202, "skbio.metadata.IntervalMetadata.__lt__"]], "__ne__() (skbio.metadata.intervalmetadata method)": [[203, "skbio.metadata.IntervalMetadata.__ne__"]], "__str__() (skbio.metadata.intervalmetadata method)": [[204, "skbio.metadata.IntervalMetadata.__str__"]], "add() (skbio.metadata.intervalmetadata method)": [[205, "skbio.metadata.IntervalMetadata.add"]], "concat() (skbio.metadata.intervalmetadata class method)": [[206, "skbio.metadata.IntervalMetadata.concat"]], "drop() (skbio.metadata.intervalmetadata method)": [[207, "skbio.metadata.IntervalMetadata.drop"]], "merge() (skbio.metadata.intervalmetadata method)": [[208, "skbio.metadata.IntervalMetadata.merge"]], "query() (skbio.metadata.intervalmetadata method)": [[209, "skbio.metadata.IntervalMetadata.query"]], "read() (skbio.metadata.intervalmetadata class method)": [[210, "skbio.metadata.IntervalMetadata.read"]], "sort() (skbio.metadata.intervalmetadata method)": [[211, "skbio.metadata.IntervalMetadata.sort"]], "write() (skbio.metadata.intervalmetadata method)": [[212, "skbio.metadata.IntervalMetadata.write"]], "dna (class in skbio.sequence)": [[213, "skbio.sequence.DNA"]], "__bool__() (skbio.sequence.dna method)": [[214, "skbio.sequence.DNA.__bool__"]], "__contains__() (skbio.sequence.dna method)": [[215, "skbio.sequence.DNA.__contains__"]], "__copy__() (skbio.sequence.dna method)": [[216, "skbio.sequence.DNA.__copy__"]], "__deepcopy__() (skbio.sequence.dna method)": [[217, "skbio.sequence.DNA.__deepcopy__"]], "__eq__() (skbio.sequence.dna method)": [[218, "skbio.sequence.DNA.__eq__"]], "__ge__() (skbio.sequence.dna method)": [[219, "skbio.sequence.DNA.__ge__"]], "__getitem__() (skbio.sequence.dna method)": [[220, "skbio.sequence.DNA.__getitem__"]], "__gt__() (skbio.sequence.dna method)": [[221, "skbio.sequence.DNA.__gt__"]], "__iter__() (skbio.sequence.dna method)": [[222, "skbio.sequence.DNA.__iter__"]], "__le__() (skbio.sequence.dna method)": [[223, "skbio.sequence.DNA.__le__"]], "__len__() (skbio.sequence.dna method)": [[224, "skbio.sequence.DNA.__len__"]], "__lt__() (skbio.sequence.dna method)": [[225, "skbio.sequence.DNA.__lt__"]], "__ne__() (skbio.sequence.dna method)": [[226, "skbio.sequence.DNA.__ne__"]], "__reversed__() (skbio.sequence.dna method)": [[227, "skbio.sequence.DNA.__reversed__"]], "__str__() (skbio.sequence.dna method)": [[228, "skbio.sequence.DNA.__str__"]], "complement() (skbio.sequence.dna method)": [[229, "skbio.sequence.DNA.complement"]], "concat() (skbio.sequence.dna class method)": [[230, "skbio.sequence.DNA.concat"]], "count() (skbio.sequence.dna method)": [[231, "skbio.sequence.DNA.count"]], "definites() (skbio.sequence.dna method)": [[232, "skbio.sequence.DNA.definites"]], "degap() (skbio.sequence.dna method)": [[233, "skbio.sequence.DNA.degap"]], "degenerates() (skbio.sequence.dna method)": [[234, "skbio.sequence.DNA.degenerates"]], "distance() (skbio.sequence.dna method)": [[235, "skbio.sequence.DNA.distance"]], "expand_degenerates() (skbio.sequence.dna method)": [[236, "skbio.sequence.DNA.expand_degenerates"]], "find_motifs() (skbio.sequence.dna method)": [[237, "skbio.sequence.DNA.find_motifs"]], "find_with_regex() (skbio.sequence.dna method)": [[238, "skbio.sequence.DNA.find_with_regex"]], "frequencies() (skbio.sequence.dna method)": [[239, "skbio.sequence.DNA.frequencies"]], "gaps() (skbio.sequence.dna method)": [[240, "skbio.sequence.DNA.gaps"]], "gc_content() (skbio.sequence.dna method)": [[241, "skbio.sequence.DNA.gc_content"]], "gc_frequency() (skbio.sequence.dna method)": [[242, "skbio.sequence.DNA.gc_frequency"]], "has_definites() (skbio.sequence.dna method)": [[243, "skbio.sequence.DNA.has_definites"]], "has_degenerates() (skbio.sequence.dna method)": [[244, "skbio.sequence.DNA.has_degenerates"]], "has_gaps() (skbio.sequence.dna method)": [[245, "skbio.sequence.DNA.has_gaps"]], "has_interval_metadata() (skbio.sequence.dna method)": [[246, "skbio.sequence.DNA.has_interval_metadata"]], "has_metadata() (skbio.sequence.dna method)": [[247, "skbio.sequence.DNA.has_metadata"]], "has_nondegenerates() (skbio.sequence.dna method)": [[248, "skbio.sequence.DNA.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.dna method)": [[249, "skbio.sequence.DNA.has_positional_metadata"]], "index() (skbio.sequence.dna method)": [[250, "skbio.sequence.DNA.index"]], "is_reverse_complement() (skbio.sequence.dna method)": [[251, "skbio.sequence.DNA.is_reverse_complement"]], "iter_contiguous() (skbio.sequence.dna method)": [[252, "skbio.sequence.DNA.iter_contiguous"]], "iter_kmers() (skbio.sequence.dna method)": [[253, "skbio.sequence.DNA.iter_kmers"]], "kmer_frequencies() (skbio.sequence.dna method)": [[254, "skbio.sequence.DNA.kmer_frequencies"]], "lowercase() (skbio.sequence.dna method)": [[255, "skbio.sequence.DNA.lowercase"]], "match_frequency() (skbio.sequence.dna method)": [[256, "skbio.sequence.DNA.match_frequency"]], "matches() (skbio.sequence.dna method)": [[257, "skbio.sequence.DNA.matches"]], "mismatch_frequency() (skbio.sequence.dna method)": [[258, "skbio.sequence.DNA.mismatch_frequency"]], "mismatches() (skbio.sequence.dna method)": [[259, "skbio.sequence.DNA.mismatches"]], "nondegenerates() (skbio.sequence.dna method)": [[260, "skbio.sequence.DNA.nondegenerates"]], "read() (skbio.sequence.dna class method)": [[261, "skbio.sequence.DNA.read"]], "replace() (skbio.sequence.dna method)": [[262, "skbio.sequence.DNA.replace"]], "reverse_complement() (skbio.sequence.dna method)": [[263, "skbio.sequence.DNA.reverse_complement"]], "to_regex() (skbio.sequence.dna method)": [[264, "skbio.sequence.DNA.to_regex"]], "transcribe() (skbio.sequence.dna method)": [[265, "skbio.sequence.DNA.transcribe"]], "translate() (skbio.sequence.dna method)": [[266, "skbio.sequence.DNA.translate"]], "translate_six_frames() (skbio.sequence.dna method)": [[267, "skbio.sequence.DNA.translate_six_frames"]], "write() (skbio.sequence.dna method)": [[268, "skbio.sequence.DNA.write"]], "geneticcode (class in skbio.sequence)": [[269, "skbio.sequence.GeneticCode"]], "__eq__() (skbio.sequence.geneticcode method)": [[270, "skbio.sequence.GeneticCode.__eq__"]], "__ge__() (skbio.sequence.geneticcode method)": [[271, "skbio.sequence.GeneticCode.__ge__"]], "__gt__() (skbio.sequence.geneticcode method)": [[272, "skbio.sequence.GeneticCode.__gt__"]], "__le__() (skbio.sequence.geneticcode method)": [[273, "skbio.sequence.GeneticCode.__le__"]], "__lt__() (skbio.sequence.geneticcode method)": [[274, "skbio.sequence.GeneticCode.__lt__"]], "__ne__() (skbio.sequence.geneticcode method)": [[275, "skbio.sequence.GeneticCode.__ne__"]], "__str__() (skbio.sequence.geneticcode method)": [[276, "skbio.sequence.GeneticCode.__str__"]], "from_ncbi() (skbio.sequence.geneticcode class method)": [[277, "skbio.sequence.GeneticCode.from_ncbi"]], "translate() (skbio.sequence.geneticcode method)": [[278, "skbio.sequence.GeneticCode.translate"]], "translate_six_frames() (skbio.sequence.geneticcode method)": [[279, "skbio.sequence.GeneticCode.translate_six_frames"]], "grammaredsequence (class in skbio.sequence)": [[280, "skbio.sequence.GrammaredSequence"]], "__bool__() (skbio.sequence.grammaredsequence method)": [[281, "skbio.sequence.GrammaredSequence.__bool__"]], "__contains__() (skbio.sequence.grammaredsequence method)": [[282, "skbio.sequence.GrammaredSequence.__contains__"]], "__copy__() (skbio.sequence.grammaredsequence method)": [[283, "skbio.sequence.GrammaredSequence.__copy__"]], "__deepcopy__() (skbio.sequence.grammaredsequence method)": [[284, "skbio.sequence.GrammaredSequence.__deepcopy__"]], "__eq__() (skbio.sequence.grammaredsequence method)": [[285, "skbio.sequence.GrammaredSequence.__eq__"]], "__ge__() (skbio.sequence.grammaredsequence method)": [[286, "skbio.sequence.GrammaredSequence.__ge__"]], "__getitem__() (skbio.sequence.grammaredsequence method)": [[287, "skbio.sequence.GrammaredSequence.__getitem__"]], "__gt__() (skbio.sequence.grammaredsequence method)": [[288, "skbio.sequence.GrammaredSequence.__gt__"]], "__iter__() (skbio.sequence.grammaredsequence method)": [[289, "skbio.sequence.GrammaredSequence.__iter__"]], "__le__() (skbio.sequence.grammaredsequence method)": [[290, "skbio.sequence.GrammaredSequence.__le__"]], "__len__() (skbio.sequence.grammaredsequence method)": [[291, "skbio.sequence.GrammaredSequence.__len__"]], "__lt__() (skbio.sequence.grammaredsequence method)": [[292, "skbio.sequence.GrammaredSequence.__lt__"]], "__ne__() (skbio.sequence.grammaredsequence method)": [[293, "skbio.sequence.GrammaredSequence.__ne__"]], "__reversed__() (skbio.sequence.grammaredsequence method)": [[294, "skbio.sequence.GrammaredSequence.__reversed__"]], "__str__() (skbio.sequence.grammaredsequence method)": [[295, "skbio.sequence.GrammaredSequence.__str__"]], "concat() (skbio.sequence.grammaredsequence class method)": [[296, "skbio.sequence.GrammaredSequence.concat"]], "count() (skbio.sequence.grammaredsequence method)": [[297, "skbio.sequence.GrammaredSequence.count"]], "definites() (skbio.sequence.grammaredsequence method)": [[298, "skbio.sequence.GrammaredSequence.definites"]], "degap() (skbio.sequence.grammaredsequence method)": [[299, "skbio.sequence.GrammaredSequence.degap"]], "degenerates() (skbio.sequence.grammaredsequence method)": [[300, "skbio.sequence.GrammaredSequence.degenerates"]], "distance() (skbio.sequence.grammaredsequence method)": [[301, "skbio.sequence.GrammaredSequence.distance"]], "expand_degenerates() (skbio.sequence.grammaredsequence method)": [[302, "skbio.sequence.GrammaredSequence.expand_degenerates"]], "find_motifs() (skbio.sequence.grammaredsequence method)": [[303, "skbio.sequence.GrammaredSequence.find_motifs"]], "find_with_regex() (skbio.sequence.grammaredsequence method)": [[304, "skbio.sequence.GrammaredSequence.find_with_regex"]], "frequencies() (skbio.sequence.grammaredsequence method)": [[305, "skbio.sequence.GrammaredSequence.frequencies"]], "gaps() (skbio.sequence.grammaredsequence method)": [[306, "skbio.sequence.GrammaredSequence.gaps"]], "has_definites() (skbio.sequence.grammaredsequence method)": [[307, "skbio.sequence.GrammaredSequence.has_definites"]], "has_degenerates() (skbio.sequence.grammaredsequence method)": [[308, "skbio.sequence.GrammaredSequence.has_degenerates"]], "has_gaps() (skbio.sequence.grammaredsequence method)": [[309, "skbio.sequence.GrammaredSequence.has_gaps"]], "has_interval_metadata() (skbio.sequence.grammaredsequence method)": [[310, "skbio.sequence.GrammaredSequence.has_interval_metadata"]], "has_metadata() (skbio.sequence.grammaredsequence method)": [[311, "skbio.sequence.GrammaredSequence.has_metadata"]], "has_nondegenerates() (skbio.sequence.grammaredsequence method)": [[312, "skbio.sequence.GrammaredSequence.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.grammaredsequence method)": [[313, "skbio.sequence.GrammaredSequence.has_positional_metadata"]], "index() (skbio.sequence.grammaredsequence method)": [[314, "skbio.sequence.GrammaredSequence.index"]], "iter_contiguous() (skbio.sequence.grammaredsequence method)": [[315, "skbio.sequence.GrammaredSequence.iter_contiguous"]], "iter_kmers() (skbio.sequence.grammaredsequence method)": [[316, "skbio.sequence.GrammaredSequence.iter_kmers"]], "kmer_frequencies() (skbio.sequence.grammaredsequence method)": [[317, "skbio.sequence.GrammaredSequence.kmer_frequencies"]], "lowercase() (skbio.sequence.grammaredsequence method)": [[318, "skbio.sequence.GrammaredSequence.lowercase"]], "match_frequency() (skbio.sequence.grammaredsequence method)": [[319, "skbio.sequence.GrammaredSequence.match_frequency"]], "matches() (skbio.sequence.grammaredsequence method)": [[320, "skbio.sequence.GrammaredSequence.matches"]], "mismatch_frequency() (skbio.sequence.grammaredsequence method)": [[321, "skbio.sequence.GrammaredSequence.mismatch_frequency"]], "mismatches() (skbio.sequence.grammaredsequence method)": [[322, "skbio.sequence.GrammaredSequence.mismatches"]], "nondegenerates() (skbio.sequence.grammaredsequence method)": [[323, "skbio.sequence.GrammaredSequence.nondegenerates"]], "read() (skbio.sequence.grammaredsequence class method)": [[324, "skbio.sequence.GrammaredSequence.read"]], "replace() (skbio.sequence.grammaredsequence method)": [[325, "skbio.sequence.GrammaredSequence.replace"]], "to_regex() (skbio.sequence.grammaredsequence method)": [[326, "skbio.sequence.GrammaredSequence.to_regex"]], "write() (skbio.sequence.grammaredsequence method)": [[327, "skbio.sequence.GrammaredSequence.write"]], "protein (class in skbio.sequence)": [[328, "skbio.sequence.Protein"]], "__bool__() (skbio.sequence.protein method)": [[329, "skbio.sequence.Protein.__bool__"]], "__contains__() (skbio.sequence.protein method)": [[330, "skbio.sequence.Protein.__contains__"]], "__copy__() (skbio.sequence.protein method)": [[331, "skbio.sequence.Protein.__copy__"]], "__deepcopy__() (skbio.sequence.protein method)": [[332, "skbio.sequence.Protein.__deepcopy__"]], "__eq__() (skbio.sequence.protein method)": [[333, "skbio.sequence.Protein.__eq__"]], "__ge__() (skbio.sequence.protein method)": [[334, "skbio.sequence.Protein.__ge__"]], "__getitem__() (skbio.sequence.protein method)": [[335, "skbio.sequence.Protein.__getitem__"]], "__gt__() (skbio.sequence.protein method)": [[336, "skbio.sequence.Protein.__gt__"]], "__iter__() (skbio.sequence.protein method)": [[337, "skbio.sequence.Protein.__iter__"]], "__le__() (skbio.sequence.protein method)": [[338, "skbio.sequence.Protein.__le__"]], "__len__() (skbio.sequence.protein method)": [[339, "skbio.sequence.Protein.__len__"]], "__lt__() (skbio.sequence.protein method)": [[340, "skbio.sequence.Protein.__lt__"]], "__ne__() (skbio.sequence.protein method)": [[341, "skbio.sequence.Protein.__ne__"]], "__reversed__() (skbio.sequence.protein method)": [[342, "skbio.sequence.Protein.__reversed__"]], "__str__() (skbio.sequence.protein method)": [[343, "skbio.sequence.Protein.__str__"]], "concat() (skbio.sequence.protein class method)": [[344, "skbio.sequence.Protein.concat"]], "count() (skbio.sequence.protein method)": [[345, "skbio.sequence.Protein.count"]], "definites() (skbio.sequence.protein method)": [[346, "skbio.sequence.Protein.definites"]], "degap() (skbio.sequence.protein method)": [[347, "skbio.sequence.Protein.degap"]], "degenerates() (skbio.sequence.protein method)": [[348, "skbio.sequence.Protein.degenerates"]], "distance() (skbio.sequence.protein method)": [[349, "skbio.sequence.Protein.distance"]], "expand_degenerates() (skbio.sequence.protein method)": [[350, "skbio.sequence.Protein.expand_degenerates"]], "find_motifs() (skbio.sequence.protein method)": [[351, "skbio.sequence.Protein.find_motifs"]], "find_with_regex() (skbio.sequence.protein method)": [[352, "skbio.sequence.Protein.find_with_regex"]], "frequencies() (skbio.sequence.protein method)": [[353, "skbio.sequence.Protein.frequencies"]], "gaps() (skbio.sequence.protein method)": [[354, "skbio.sequence.Protein.gaps"]], "has_definites() (skbio.sequence.protein method)": [[355, "skbio.sequence.Protein.has_definites"]], "has_degenerates() (skbio.sequence.protein method)": [[356, "skbio.sequence.Protein.has_degenerates"]], "has_gaps() (skbio.sequence.protein method)": [[357, "skbio.sequence.Protein.has_gaps"]], "has_interval_metadata() (skbio.sequence.protein method)": [[358, "skbio.sequence.Protein.has_interval_metadata"]], "has_metadata() (skbio.sequence.protein method)": [[359, "skbio.sequence.Protein.has_metadata"]], "has_nondegenerates() (skbio.sequence.protein method)": [[360, "skbio.sequence.Protein.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.protein method)": [[361, "skbio.sequence.Protein.has_positional_metadata"]], "has_stops() (skbio.sequence.protein method)": [[362, "skbio.sequence.Protein.has_stops"]], "index() (skbio.sequence.protein method)": [[363, "skbio.sequence.Protein.index"]], "iter_contiguous() (skbio.sequence.protein method)": [[364, "skbio.sequence.Protein.iter_contiguous"]], "iter_kmers() (skbio.sequence.protein method)": [[365, "skbio.sequence.Protein.iter_kmers"]], "kmer_frequencies() (skbio.sequence.protein method)": [[366, "skbio.sequence.Protein.kmer_frequencies"]], "lowercase() (skbio.sequence.protein method)": [[367, "skbio.sequence.Protein.lowercase"]], "match_frequency() (skbio.sequence.protein method)": [[368, "skbio.sequence.Protein.match_frequency"]], "matches() (skbio.sequence.protein method)": [[369, "skbio.sequence.Protein.matches"]], "mismatch_frequency() (skbio.sequence.protein method)": [[370, "skbio.sequence.Protein.mismatch_frequency"]], "mismatches() (skbio.sequence.protein method)": [[371, "skbio.sequence.Protein.mismatches"]], "nondegenerates() (skbio.sequence.protein method)": [[372, "skbio.sequence.Protein.nondegenerates"]], "read() (skbio.sequence.protein class method)": [[373, "skbio.sequence.Protein.read"]], "replace() (skbio.sequence.protein method)": [[374, "skbio.sequence.Protein.replace"]], "stops() (skbio.sequence.protein method)": [[375, "skbio.sequence.Protein.stops"]], "to_regex() (skbio.sequence.protein method)": [[376, "skbio.sequence.Protein.to_regex"]], "write() (skbio.sequence.protein method)": [[377, "skbio.sequence.Protein.write"]], "rna (class in skbio.sequence)": [[378, "skbio.sequence.RNA"]], "__bool__() (skbio.sequence.rna method)": [[379, "skbio.sequence.RNA.__bool__"]], "__contains__() (skbio.sequence.rna method)": [[380, "skbio.sequence.RNA.__contains__"]], "__copy__() (skbio.sequence.rna method)": [[381, "skbio.sequence.RNA.__copy__"]], "__deepcopy__() (skbio.sequence.rna method)": [[382, "skbio.sequence.RNA.__deepcopy__"]], "__eq__() (skbio.sequence.rna method)": [[383, "skbio.sequence.RNA.__eq__"]], "__ge__() (skbio.sequence.rna method)": [[384, "skbio.sequence.RNA.__ge__"]], "__getitem__() (skbio.sequence.rna method)": [[385, "skbio.sequence.RNA.__getitem__"]], "__gt__() (skbio.sequence.rna method)": [[386, "skbio.sequence.RNA.__gt__"]], "__iter__() (skbio.sequence.rna method)": [[387, "skbio.sequence.RNA.__iter__"]], "__le__() (skbio.sequence.rna method)": [[388, "skbio.sequence.RNA.__le__"]], "__len__() (skbio.sequence.rna method)": [[389, "skbio.sequence.RNA.__len__"]], "__lt__() (skbio.sequence.rna method)": [[390, "skbio.sequence.RNA.__lt__"]], "__ne__() (skbio.sequence.rna method)": [[391, "skbio.sequence.RNA.__ne__"]], "__reversed__() (skbio.sequence.rna method)": [[392, "skbio.sequence.RNA.__reversed__"]], "__str__() (skbio.sequence.rna method)": [[393, "skbio.sequence.RNA.__str__"]], "complement() (skbio.sequence.rna method)": [[394, "skbio.sequence.RNA.complement"]], "concat() (skbio.sequence.rna class method)": [[395, "skbio.sequence.RNA.concat"]], "count() (skbio.sequence.rna method)": [[396, "skbio.sequence.RNA.count"]], "definites() (skbio.sequence.rna method)": [[397, "skbio.sequence.RNA.definites"]], "degap() (skbio.sequence.rna method)": [[398, "skbio.sequence.RNA.degap"]], "degenerates() (skbio.sequence.rna method)": [[399, "skbio.sequence.RNA.degenerates"]], "distance() (skbio.sequence.rna method)": [[400, "skbio.sequence.RNA.distance"]], "expand_degenerates() (skbio.sequence.rna method)": [[401, "skbio.sequence.RNA.expand_degenerates"]], "find_motifs() (skbio.sequence.rna method)": [[402, "skbio.sequence.RNA.find_motifs"]], "find_with_regex() (skbio.sequence.rna method)": [[403, "skbio.sequence.RNA.find_with_regex"]], "frequencies() (skbio.sequence.rna method)": [[404, "skbio.sequence.RNA.frequencies"]], "gaps() (skbio.sequence.rna method)": [[405, "skbio.sequence.RNA.gaps"]], "gc_content() (skbio.sequence.rna method)": [[406, "skbio.sequence.RNA.gc_content"]], "gc_frequency() (skbio.sequence.rna method)": [[407, "skbio.sequence.RNA.gc_frequency"]], "has_definites() (skbio.sequence.rna method)": [[408, "skbio.sequence.RNA.has_definites"]], "has_degenerates() (skbio.sequence.rna method)": [[409, "skbio.sequence.RNA.has_degenerates"]], "has_gaps() (skbio.sequence.rna method)": [[410, "skbio.sequence.RNA.has_gaps"]], "has_interval_metadata() (skbio.sequence.rna method)": [[411, "skbio.sequence.RNA.has_interval_metadata"]], "has_metadata() (skbio.sequence.rna method)": [[412, "skbio.sequence.RNA.has_metadata"]], "has_nondegenerates() (skbio.sequence.rna method)": [[413, "skbio.sequence.RNA.has_nondegenerates"]], "has_positional_metadata() (skbio.sequence.rna method)": [[414, "skbio.sequence.RNA.has_positional_metadata"]], "index() (skbio.sequence.rna method)": [[415, "skbio.sequence.RNA.index"]], "is_reverse_complement() (skbio.sequence.rna method)": [[416, "skbio.sequence.RNA.is_reverse_complement"]], "iter_contiguous() (skbio.sequence.rna method)": [[417, "skbio.sequence.RNA.iter_contiguous"]], "iter_kmers() (skbio.sequence.rna method)": [[418, "skbio.sequence.RNA.iter_kmers"]], "kmer_frequencies() (skbio.sequence.rna method)": [[419, "skbio.sequence.RNA.kmer_frequencies"]], "lowercase() (skbio.sequence.rna method)": [[420, "skbio.sequence.RNA.lowercase"]], "match_frequency() (skbio.sequence.rna method)": [[421, "skbio.sequence.RNA.match_frequency"]], "matches() (skbio.sequence.rna method)": [[422, "skbio.sequence.RNA.matches"]], "mismatch_frequency() (skbio.sequence.rna method)": [[423, "skbio.sequence.RNA.mismatch_frequency"]], "mismatches() (skbio.sequence.rna method)": [[424, "skbio.sequence.RNA.mismatches"]], "nondegenerates() (skbio.sequence.rna method)": [[425, "skbio.sequence.RNA.nondegenerates"]], "read() (skbio.sequence.rna class method)": [[426, "skbio.sequence.RNA.read"]], "replace() (skbio.sequence.rna method)": [[427, "skbio.sequence.RNA.replace"]], "reverse_complement() (skbio.sequence.rna method)": [[428, "skbio.sequence.RNA.reverse_complement"]], "reverse_transcribe() (skbio.sequence.rna method)": [[429, "skbio.sequence.RNA.reverse_transcribe"]], "to_regex() (skbio.sequence.rna method)": [[430, "skbio.sequence.RNA.to_regex"]], "translate() (skbio.sequence.rna method)": [[431, "skbio.sequence.RNA.translate"]], "translate_six_frames() (skbio.sequence.rna method)": [[432, "skbio.sequence.RNA.translate_six_frames"]], "write() (skbio.sequence.rna method)": [[433, "skbio.sequence.RNA.write"]], "sequence (class in skbio.sequence)": [[434, "skbio.sequence.Sequence"]], "__bool__() (skbio.sequence.sequence method)": [[435, "skbio.sequence.Sequence.__bool__"]], "__contains__() (skbio.sequence.sequence method)": [[436, "skbio.sequence.Sequence.__contains__"]], "__copy__() (skbio.sequence.sequence method)": [[437, "skbio.sequence.Sequence.__copy__"]], "__deepcopy__() (skbio.sequence.sequence method)": [[438, "skbio.sequence.Sequence.__deepcopy__"]], "__eq__() (skbio.sequence.sequence method)": [[439, "skbio.sequence.Sequence.__eq__"]], "__ge__() (skbio.sequence.sequence method)": [[440, "skbio.sequence.Sequence.__ge__"]], "__getitem__() (skbio.sequence.sequence method)": [[441, "skbio.sequence.Sequence.__getitem__"]], "__gt__() (skbio.sequence.sequence method)": [[442, "skbio.sequence.Sequence.__gt__"]], "__iter__() (skbio.sequence.sequence method)": [[443, "skbio.sequence.Sequence.__iter__"]], "__le__() (skbio.sequence.sequence method)": [[444, "skbio.sequence.Sequence.__le__"]], "__len__() (skbio.sequence.sequence method)": [[445, "skbio.sequence.Sequence.__len__"]], "__lt__() (skbio.sequence.sequence method)": [[446, "skbio.sequence.Sequence.__lt__"]], "__ne__() (skbio.sequence.sequence method)": [[447, "skbio.sequence.Sequence.__ne__"]], "__reversed__() (skbio.sequence.sequence method)": [[448, "skbio.sequence.Sequence.__reversed__"]], "__str__() (skbio.sequence.sequence method)": [[449, "skbio.sequence.Sequence.__str__"]], "concat() (skbio.sequence.sequence class method)": [[450, "skbio.sequence.Sequence.concat"]], "count() (skbio.sequence.sequence method)": [[451, "skbio.sequence.Sequence.count"]], "distance() (skbio.sequence.sequence method)": [[452, "skbio.sequence.Sequence.distance"]], "find_with_regex() (skbio.sequence.sequence method)": [[453, "skbio.sequence.Sequence.find_with_regex"]], "frequencies() (skbio.sequence.sequence method)": [[454, "skbio.sequence.Sequence.frequencies"]], "has_interval_metadata() (skbio.sequence.sequence method)": [[455, "skbio.sequence.Sequence.has_interval_metadata"]], "has_metadata() (skbio.sequence.sequence method)": [[456, "skbio.sequence.Sequence.has_metadata"]], "has_positional_metadata() (skbio.sequence.sequence method)": [[457, "skbio.sequence.Sequence.has_positional_metadata"]], "index() (skbio.sequence.sequence method)": [[458, "skbio.sequence.Sequence.index"]], "iter_contiguous() (skbio.sequence.sequence method)": [[459, "skbio.sequence.Sequence.iter_contiguous"]], "iter_kmers() (skbio.sequence.sequence method)": [[460, "skbio.sequence.Sequence.iter_kmers"]], "kmer_frequencies() (skbio.sequence.sequence method)": [[461, "skbio.sequence.Sequence.kmer_frequencies"]], "lowercase() (skbio.sequence.sequence method)": [[462, "skbio.sequence.Sequence.lowercase"]], "match_frequency() (skbio.sequence.sequence method)": [[463, "skbio.sequence.Sequence.match_frequency"]], "matches() (skbio.sequence.sequence method)": [[464, "skbio.sequence.Sequence.matches"]], "mismatch_frequency() (skbio.sequence.sequence method)": [[465, "skbio.sequence.Sequence.mismatch_frequency"]], "mismatches() (skbio.sequence.sequence method)": [[466, "skbio.sequence.Sequence.mismatches"]], "read() (skbio.sequence.sequence class method)": [[467, "skbio.sequence.Sequence.read"]], "replace() (skbio.sequence.sequence method)": [[468, "skbio.sequence.Sequence.replace"]], "write() (skbio.sequence.sequence method)": [[469, "skbio.sequence.Sequence.write"]], "skbio.sequence.distance": [[470, "module-skbio.sequence.distance"]], "hamming() (in module skbio.sequence.distance)": [[471, "skbio.sequence.distance.hamming"]], "kmer_distance() (in module skbio.sequence.distance)": [[472, "skbio.sequence.distance.kmer_distance"]], "skbio.stats.composition": [[473, "module-skbio.stats.composition"]], "alr() (in module skbio.stats.composition)": [[474, "skbio.stats.composition.alr"]], "alr_inv() (in module skbio.stats.composition)": [[475, "skbio.stats.composition.alr_inv"]], "ancom() (in module skbio.stats.composition)": [[476, "skbio.stats.composition.ancom"]], "centralize() (in module skbio.stats.composition)": [[477, "skbio.stats.composition.centralize"]], "closure() (in module skbio.stats.composition)": [[478, "skbio.stats.composition.closure"]], "clr() (in module skbio.stats.composition)": [[479, "skbio.stats.composition.clr"]], "clr_inv() (in module skbio.stats.composition)": [[480, "skbio.stats.composition.clr_inv"]], "ilr() (in module skbio.stats.composition)": [[481, "skbio.stats.composition.ilr"]], "ilr_inv() (in module skbio.stats.composition)": [[482, "skbio.stats.composition.ilr_inv"]], "inner() (in module skbio.stats.composition)": [[483, "skbio.stats.composition.inner"]], "multiplicative_replacement() (in module skbio.stats.composition)": [[484, "skbio.stats.composition.multiplicative_replacement"]], "perturb() (in module skbio.stats.composition)": [[485, "skbio.stats.composition.perturb"]], "perturb_inv() (in module skbio.stats.composition)": [[486, "skbio.stats.composition.perturb_inv"]], "power() (in module skbio.stats.composition)": [[487, "skbio.stats.composition.power"]], "sbp_basis() (in module skbio.stats.composition)": [[488, "skbio.stats.composition.sbp_basis"]], "skbio.stats.distance": [[489, "module-skbio.stats.distance"]], "dissimilaritymatrix (class in skbio.stats.distance)": [[490, "skbio.stats.distance.DissimilarityMatrix"]], "__contains__() (skbio.stats.distance.dissimilaritymatrix method)": [[491, "skbio.stats.distance.DissimilarityMatrix.__contains__"]], "__eq__() (skbio.stats.distance.dissimilaritymatrix method)": [[492, "skbio.stats.distance.DissimilarityMatrix.__eq__"]], "__ge__() (skbio.stats.distance.dissimilaritymatrix method)": [[493, "skbio.stats.distance.DissimilarityMatrix.__ge__"]], "__getitem__() (skbio.stats.distance.dissimilaritymatrix method)": [[494, "skbio.stats.distance.DissimilarityMatrix.__getitem__"]], "__gt__() (skbio.stats.distance.dissimilaritymatrix method)": [[495, "skbio.stats.distance.DissimilarityMatrix.__gt__"]], "__le__() (skbio.stats.distance.dissimilaritymatrix method)": [[496, "skbio.stats.distance.DissimilarityMatrix.__le__"]], "__lt__() (skbio.stats.distance.dissimilaritymatrix method)": [[497, "skbio.stats.distance.DissimilarityMatrix.__lt__"]], "__ne__() (skbio.stats.distance.dissimilaritymatrix method)": [[498, "skbio.stats.distance.DissimilarityMatrix.__ne__"]], "__str__() (skbio.stats.distance.dissimilaritymatrix method)": [[499, "skbio.stats.distance.DissimilarityMatrix.__str__"]], "between() (skbio.stats.distance.dissimilaritymatrix method)": [[500, "skbio.stats.distance.DissimilarityMatrix.between"]], "copy() (skbio.stats.distance.dissimilaritymatrix method)": [[501, "skbio.stats.distance.DissimilarityMatrix.copy"]], "filter() (skbio.stats.distance.dissimilaritymatrix method)": [[502, "skbio.stats.distance.DissimilarityMatrix.filter"]], "from_iterable() (skbio.stats.distance.dissimilaritymatrix class method)": [[503, "skbio.stats.distance.DissimilarityMatrix.from_iterable"]], "index() (skbio.stats.distance.dissimilaritymatrix method)": [[504, "skbio.stats.distance.DissimilarityMatrix.index"]], "plot() (skbio.stats.distance.dissimilaritymatrix method)": [[505, "skbio.stats.distance.DissimilarityMatrix.plot"]], "read() (skbio.stats.distance.dissimilaritymatrix class method)": [[506, "skbio.stats.distance.DissimilarityMatrix.read"]], "redundant_form() (skbio.stats.distance.dissimilaritymatrix method)": [[507, "skbio.stats.distance.DissimilarityMatrix.redundant_form"]], "to_data_frame() (skbio.stats.distance.dissimilaritymatrix method)": [[508, "skbio.stats.distance.DissimilarityMatrix.to_data_frame"]], "transpose() (skbio.stats.distance.dissimilaritymatrix method)": [[509, "skbio.stats.distance.DissimilarityMatrix.transpose"]], "within() (skbio.stats.distance.dissimilaritymatrix method)": [[510, "skbio.stats.distance.DissimilarityMatrix.within"]], "write() (skbio.stats.distance.dissimilaritymatrix method)": [[511, "skbio.stats.distance.DissimilarityMatrix.write"]], "dissimilaritymatrixerror": [[512, "skbio.stats.distance.DissimilarityMatrixError"]], "distancematrix (class in skbio.stats.distance)": [[513, "skbio.stats.distance.DistanceMatrix"]], "__contains__() (skbio.stats.distance.distancematrix method)": [[514, "skbio.stats.distance.DistanceMatrix.__contains__"]], "__eq__() (skbio.stats.distance.distancematrix method)": [[515, "skbio.stats.distance.DistanceMatrix.__eq__"]], "__ge__() (skbio.stats.distance.distancematrix method)": [[516, "skbio.stats.distance.DistanceMatrix.__ge__"]], "__getitem__() (skbio.stats.distance.distancematrix method)": [[517, "skbio.stats.distance.DistanceMatrix.__getitem__"]], "__gt__() (skbio.stats.distance.distancematrix method)": [[518, "skbio.stats.distance.DistanceMatrix.__gt__"]], "__le__() (skbio.stats.distance.distancematrix method)": [[519, "skbio.stats.distance.DistanceMatrix.__le__"]], "__lt__() (skbio.stats.distance.distancematrix method)": [[520, "skbio.stats.distance.DistanceMatrix.__lt__"]], "__ne__() (skbio.stats.distance.distancematrix method)": [[521, "skbio.stats.distance.DistanceMatrix.__ne__"]], "__str__() (skbio.stats.distance.distancematrix method)": [[522, "skbio.stats.distance.DistanceMatrix.__str__"]], "between() (skbio.stats.distance.distancematrix method)": [[523, "skbio.stats.distance.DistanceMatrix.between"]], "condensed_form() (skbio.stats.distance.distancematrix method)": [[524, "skbio.stats.distance.DistanceMatrix.condensed_form"]], "copy() (skbio.stats.distance.distancematrix method)": [[525, "skbio.stats.distance.DistanceMatrix.copy"]], "filter() (skbio.stats.distance.distancematrix method)": [[526, "skbio.stats.distance.DistanceMatrix.filter"]], "from_iterable() (skbio.stats.distance.distancematrix class method)": [[527, "skbio.stats.distance.DistanceMatrix.from_iterable"]], "index() (skbio.stats.distance.distancematrix method)": [[528, "skbio.stats.distance.DistanceMatrix.index"]], "permute() (skbio.stats.distance.distancematrix method)": [[529, "skbio.stats.distance.DistanceMatrix.permute"]], "plot() (skbio.stats.distance.distancematrix method)": [[530, "skbio.stats.distance.DistanceMatrix.plot"]], "read() (skbio.stats.distance.distancematrix class method)": [[531, "skbio.stats.distance.DistanceMatrix.read"]], "redundant_form() (skbio.stats.distance.distancematrix method)": [[532, "skbio.stats.distance.DistanceMatrix.redundant_form"]], "to_data_frame() (skbio.stats.distance.distancematrix method)": [[533, "skbio.stats.distance.DistanceMatrix.to_data_frame"]], "to_series() (skbio.stats.distance.distancematrix method)": [[534, "skbio.stats.distance.DistanceMatrix.to_series"]], "transpose() (skbio.stats.distance.distancematrix method)": [[535, "skbio.stats.distance.DistanceMatrix.transpose"]], "within() (skbio.stats.distance.distancematrix method)": [[536, "skbio.stats.distance.DistanceMatrix.within"]], "write() (skbio.stats.distance.distancematrix method)": [[537, "skbio.stats.distance.DistanceMatrix.write"]], "distancematrixerror": [[538, "skbio.stats.distance.DistanceMatrixError"]], "missingiderror": [[539, "skbio.stats.distance.MissingIDError"]], "anosim() (in module skbio.stats.distance)": [[540, "skbio.stats.distance.anosim"]], "bioenv() (in module skbio.stats.distance)": [[541, "skbio.stats.distance.bioenv"]], "mantel() (in module skbio.stats.distance)": [[542, "skbio.stats.distance.mantel"]], "permanova() (in module skbio.stats.distance)": [[543, "skbio.stats.distance.permanova"]], "permdisp() (in module skbio.stats.distance)": [[544, "skbio.stats.distance.permdisp"]], "pwmantel() (in module skbio.stats.distance)": [[545, "skbio.stats.distance.pwmantel"]], "randdm() (in module skbio.stats.distance)": [[546, "skbio.stats.distance.randdm"]], "skbio.stats.evolve": [[547, "module-skbio.stats.evolve"]], "hommola_cospeciation() (in module skbio.stats.evolve)": [[548, "skbio.stats.evolve.hommola_cospeciation"]], "skbio.stats.gradient": [[549, "module-skbio.stats.gradient"]], "averagegradientanova (class in skbio.stats.gradient)": [[550, "skbio.stats.gradient.AverageGradientANOVA"]], "__eq__() (skbio.stats.gradient.averagegradientanova method)": [[551, "skbio.stats.gradient.AverageGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.averagegradientanova method)": [[552, "skbio.stats.gradient.AverageGradientANOVA.__ge__"]], "__gt__() (skbio.stats.gradient.averagegradientanova method)": [[553, "skbio.stats.gradient.AverageGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.averagegradientanova method)": [[554, "skbio.stats.gradient.AverageGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.averagegradientanova method)": [[555, "skbio.stats.gradient.AverageGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.averagegradientanova method)": [[556, "skbio.stats.gradient.AverageGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.averagegradientanova method)": [[557, "skbio.stats.gradient.AverageGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.averagegradientanova method)": [[558, "skbio.stats.gradient.AverageGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.averagegradientanova method)": [[559, "skbio.stats.gradient.AverageGradientANOVA.get_trajectories"]], "categoryresults (class in skbio.stats.gradient)": [[560, "skbio.stats.gradient.CategoryResults"]], "category (skbio.stats.gradient.categoryresults attribute)": [[560, "skbio.stats.gradient.CategoryResults.category"]], "groups (skbio.stats.gradient.categoryresults attribute)": [[560, "skbio.stats.gradient.CategoryResults.groups"]], "message (skbio.stats.gradient.categoryresults attribute)": [[560, "skbio.stats.gradient.CategoryResults.message"]], "probability (skbio.stats.gradient.categoryresults attribute)": [[560, "skbio.stats.gradient.CategoryResults.probability"]], "__eq__() (skbio.stats.gradient.categoryresults method)": [[561, "skbio.stats.gradient.CategoryResults.__eq__"]], "__ge__() (skbio.stats.gradient.categoryresults method)": [[562, "skbio.stats.gradient.CategoryResults.__ge__"]], "__gt__() (skbio.stats.gradient.categoryresults method)": [[563, "skbio.stats.gradient.CategoryResults.__gt__"]], "__hash__() (skbio.stats.gradient.categoryresults method)": [[564, "skbio.stats.gradient.CategoryResults.__hash__"]], "__le__() (skbio.stats.gradient.categoryresults method)": [[565, "skbio.stats.gradient.CategoryResults.__le__"]], "__lt__() (skbio.stats.gradient.categoryresults method)": [[566, "skbio.stats.gradient.CategoryResults.__lt__"]], "__ne__() (skbio.stats.gradient.categoryresults method)": [[567, "skbio.stats.gradient.CategoryResults.__ne__"]], "__str__() (skbio.stats.gradient.categoryresults method)": [[568, "skbio.stats.gradient.CategoryResults.__str__"]], "to_files() (skbio.stats.gradient.categoryresults method)": [[569, "skbio.stats.gradient.CategoryResults.to_files"]], "firstdifferencegradientanova (class in skbio.stats.gradient)": [[570, "skbio.stats.gradient.FirstDifferenceGradientANOVA"]], "__eq__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[571, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[572, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ge__"]], "__gt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[573, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[574, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[575, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[576, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[577, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.firstdifferencegradientanova method)": [[578, "skbio.stats.gradient.FirstDifferenceGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.firstdifferencegradientanova method)": [[579, "skbio.stats.gradient.FirstDifferenceGradientANOVA.get_trajectories"]], "gradientanova (class in skbio.stats.gradient)": [[580, "skbio.stats.gradient.GradientANOVA"]], "__eq__() (skbio.stats.gradient.gradientanova method)": [[581, "skbio.stats.gradient.GradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.gradientanova method)": [[582, "skbio.stats.gradient.GradientANOVA.__ge__"]], "__gt__() (skbio.stats.gradient.gradientanova method)": [[583, "skbio.stats.gradient.GradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.gradientanova method)": [[584, "skbio.stats.gradient.GradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.gradientanova method)": [[585, "skbio.stats.gradient.GradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.gradientanova method)": [[586, "skbio.stats.gradient.GradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.gradientanova method)": [[587, "skbio.stats.gradient.GradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.gradientanova method)": [[588, "skbio.stats.gradient.GradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.gradientanova method)": [[589, "skbio.stats.gradient.GradientANOVA.get_trajectories"]], "gradientanovaresults (class in skbio.stats.gradient)": [[590, "skbio.stats.gradient.GradientANOVAResults"]], "algorithm (skbio.stats.gradient.gradientanovaresults attribute)": [[590, "skbio.stats.gradient.GradientANOVAResults.algorithm"]], "categories (skbio.stats.gradient.gradientanovaresults attribute)": [[590, "skbio.stats.gradient.GradientANOVAResults.categories"]], "weighted (skbio.stats.gradient.gradientanovaresults attribute)": [[590, "skbio.stats.gradient.GradientANOVAResults.weighted"]], "__eq__() (skbio.stats.gradient.gradientanovaresults method)": [[591, "skbio.stats.gradient.GradientANOVAResults.__eq__"]], "__ge__() (skbio.stats.gradient.gradientanovaresults method)": [[592, "skbio.stats.gradient.GradientANOVAResults.__ge__"]], "__gt__() (skbio.stats.gradient.gradientanovaresults method)": [[593, "skbio.stats.gradient.GradientANOVAResults.__gt__"]], "__hash__() (skbio.stats.gradient.gradientanovaresults method)": [[594, "skbio.stats.gradient.GradientANOVAResults.__hash__"]], "__le__() (skbio.stats.gradient.gradientanovaresults method)": [[595, "skbio.stats.gradient.GradientANOVAResults.__le__"]], "__lt__() (skbio.stats.gradient.gradientanovaresults method)": [[596, "skbio.stats.gradient.GradientANOVAResults.__lt__"]], "__ne__() (skbio.stats.gradient.gradientanovaresults method)": [[597, "skbio.stats.gradient.GradientANOVAResults.__ne__"]], "__str__() (skbio.stats.gradient.gradientanovaresults method)": [[598, "skbio.stats.gradient.GradientANOVAResults.__str__"]], "to_files() (skbio.stats.gradient.gradientanovaresults method)": [[599, "skbio.stats.gradient.GradientANOVAResults.to_files"]], "groupresults (class in skbio.stats.gradient)": [[600, "skbio.stats.gradient.GroupResults"]], "info (skbio.stats.gradient.groupresults attribute)": [[600, "skbio.stats.gradient.GroupResults.info"]], "mean (skbio.stats.gradient.groupresults attribute)": [[600, "skbio.stats.gradient.GroupResults.mean"]], "message (skbio.stats.gradient.groupresults attribute)": [[600, "skbio.stats.gradient.GroupResults.message"]], "name (skbio.stats.gradient.groupresults attribute)": [[600, "skbio.stats.gradient.GroupResults.name"]], "trajectory (skbio.stats.gradient.groupresults attribute)": [[600, "skbio.stats.gradient.GroupResults.trajectory"]], "__eq__() (skbio.stats.gradient.groupresults method)": [[601, "skbio.stats.gradient.GroupResults.__eq__"]], "__ge__() (skbio.stats.gradient.groupresults method)": [[602, "skbio.stats.gradient.GroupResults.__ge__"]], "__gt__() (skbio.stats.gradient.groupresults method)": [[603, "skbio.stats.gradient.GroupResults.__gt__"]], "__hash__() (skbio.stats.gradient.groupresults method)": [[604, "skbio.stats.gradient.GroupResults.__hash__"]], "__le__() (skbio.stats.gradient.groupresults method)": [[605, "skbio.stats.gradient.GroupResults.__le__"]], "__lt__() (skbio.stats.gradient.groupresults method)": [[606, "skbio.stats.gradient.GroupResults.__lt__"]], "__ne__() (skbio.stats.gradient.groupresults method)": [[607, "skbio.stats.gradient.GroupResults.__ne__"]], "__str__() (skbio.stats.gradient.groupresults method)": [[608, "skbio.stats.gradient.GroupResults.__str__"]], "to_files() (skbio.stats.gradient.groupresults method)": [[609, "skbio.stats.gradient.GroupResults.to_files"]], "trajectorygradientanova (class in skbio.stats.gradient)": [[610, "skbio.stats.gradient.TrajectoryGradientANOVA"]], "__eq__() (skbio.stats.gradient.trajectorygradientanova method)": [[611, "skbio.stats.gradient.TrajectoryGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.trajectorygradientanova method)": [[612, "skbio.stats.gradient.TrajectoryGradientANOVA.__ge__"]], "__gt__() (skbio.stats.gradient.trajectorygradientanova method)": [[613, "skbio.stats.gradient.TrajectoryGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.trajectorygradientanova method)": [[614, "skbio.stats.gradient.TrajectoryGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.trajectorygradientanova method)": [[615, "skbio.stats.gradient.TrajectoryGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.trajectorygradientanova method)": [[616, "skbio.stats.gradient.TrajectoryGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.trajectorygradientanova method)": [[617, "skbio.stats.gradient.TrajectoryGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.trajectorygradientanova method)": [[618, "skbio.stats.gradient.TrajectoryGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.trajectorygradientanova method)": [[619, "skbio.stats.gradient.TrajectoryGradientANOVA.get_trajectories"]], "windowdifferencegradientanova (class in skbio.stats.gradient)": [[620, "skbio.stats.gradient.WindowDifferenceGradientANOVA"]], "__eq__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[621, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__eq__"]], "__ge__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[622, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ge__"]], "__gt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[623, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__gt__"]], "__hash__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[624, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__hash__"]], "__le__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[625, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__le__"]], "__lt__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[626, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__lt__"]], "__ne__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[627, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__ne__"]], "__str__() (skbio.stats.gradient.windowdifferencegradientanova method)": [[628, "skbio.stats.gradient.WindowDifferenceGradientANOVA.__str__"]], "get_trajectories() (skbio.stats.gradient.windowdifferencegradientanova method)": [[629, "skbio.stats.gradient.WindowDifferenceGradientANOVA.get_trajectories"]], "isubsample() (in module skbio.stats)": [[630, "skbio.stats.isubsample"]], "skbio.stats.ordination": [[631, "module-skbio.stats.ordination"]], "ordinationresults (class in skbio.stats.ordination)": [[632, "skbio.stats.ordination.OrdinationResults"]], "biplot_scores (skbio.stats.ordination.ordinationresults attribute)": [[632, "skbio.stats.ordination.OrdinationResults.biplot_scores"]], "eigvals (skbio.stats.ordination.ordinationresults attribute)": [[632, "skbio.stats.ordination.OrdinationResults.eigvals"]], "features (skbio.stats.ordination.ordinationresults attribute)": [[632, "skbio.stats.ordination.OrdinationResults.features"]], "long_method_name (skbio.stats.ordination.ordinationresults attribute)": [[632, "skbio.stats.ordination.OrdinationResults.long_method_name"]], "proportion_explained (skbio.stats.ordination.ordinationresults attribute)": [[632, "skbio.stats.ordination.OrdinationResults.proportion_explained"]], "sample_constraints (skbio.stats.ordination.ordinationresults attribute)": [[632, "skbio.stats.ordination.OrdinationResults.sample_constraints"]], "samples (skbio.stats.ordination.ordinationresults attribute)": [[632, "skbio.stats.ordination.OrdinationResults.samples"]], "short_method_name (skbio.stats.ordination.ordinationresults attribute)": [[632, "skbio.stats.ordination.OrdinationResults.short_method_name"]], "__eq__() (skbio.stats.ordination.ordinationresults method)": [[633, "skbio.stats.ordination.OrdinationResults.__eq__"]], "__ge__() (skbio.stats.ordination.ordinationresults method)": [[634, "skbio.stats.ordination.OrdinationResults.__ge__"]], "__gt__() (skbio.stats.ordination.ordinationresults method)": [[635, "skbio.stats.ordination.OrdinationResults.__gt__"]], "__hash__() (skbio.stats.ordination.ordinationresults method)": [[636, "skbio.stats.ordination.OrdinationResults.__hash__"]], "__le__() (skbio.stats.ordination.ordinationresults method)": [[637, "skbio.stats.ordination.OrdinationResults.__le__"]], "__lt__() (skbio.stats.ordination.ordinationresults method)": [[638, "skbio.stats.ordination.OrdinationResults.__lt__"]], "__ne__() (skbio.stats.ordination.ordinationresults method)": [[639, "skbio.stats.ordination.OrdinationResults.__ne__"]], "__str__() (skbio.stats.ordination.ordinationresults method)": [[640, "skbio.stats.ordination.OrdinationResults.__str__"]], "plot() (skbio.stats.ordination.ordinationresults method)": [[641, "skbio.stats.ordination.OrdinationResults.plot"]], "read() (skbio.stats.ordination.ordinationresults class method)": [[642, "skbio.stats.ordination.OrdinationResults.read"]], "write() (skbio.stats.ordination.ordinationresults method)": [[643, "skbio.stats.ordination.OrdinationResults.write"]], "ca() (in module skbio.stats.ordination)": [[644, "skbio.stats.ordination.ca"]], "cca() (in module skbio.stats.ordination)": [[645, "skbio.stats.ordination.cca"]], "corr() (in module skbio.stats.ordination)": [[646, "skbio.stats.ordination.corr"]], "e_matrix() (in module skbio.stats.ordination)": [[647, "skbio.stats.ordination.e_matrix"]], "f_matrix() (in module skbio.stats.ordination)": [[648, "skbio.stats.ordination.f_matrix"]], "mean_and_std() (in module skbio.stats.ordination)": [[649, "skbio.stats.ordination.mean_and_std"]], "pcoa() (in module skbio.stats.ordination)": [[650, "skbio.stats.ordination.pcoa"]], "pcoa_biplot() (in module skbio.stats.ordination)": [[651, "skbio.stats.ordination.pcoa_biplot"]], "rda() (in module skbio.stats.ordination)": [[652, "skbio.stats.ordination.rda"]], "scale() (in module skbio.stats.ordination)": [[653, "skbio.stats.ordination.scale"]], "svd_rank() (in module skbio.stats.ordination)": [[654, "skbio.stats.ordination.svd_rank"]], "skbio.stats.power": [[655, "module-skbio.stats.power"]], "confidence_bound() (in module skbio.stats.power)": [[656, "skbio.stats.power.confidence_bound"]], "paired_subsamples() (in module skbio.stats.power)": [[657, "skbio.stats.power.paired_subsamples"]], "subsample_paired_power() (in module skbio.stats.power)": [[658, "skbio.stats.power.subsample_paired_power"]], "subsample_power() (in module skbio.stats.power)": [[659, "skbio.stats.power.subsample_power"]], "subsample_counts() (in module skbio.stats)": [[660, "skbio.stats.subsample_counts"]], "duplicatenodeerror": [[661, "skbio.tree.DuplicateNodeError"]], "missingnodeerror": [[662, "skbio.tree.MissingNodeError"]], "nolengtherror": [[663, "skbio.tree.NoLengthError"]], "noparenterror": [[664, "skbio.tree.NoParentError"]], "treeerror": [[665, "skbio.tree.TreeError"]], "treenode (class in skbio.tree)": [[666, "skbio.tree.TreeNode"]], "__copy__() (skbio.tree.treenode method)": [[667, "skbio.tree.TreeNode.__copy__"]], "__deepcopy__() (skbio.tree.treenode method)": [[668, "skbio.tree.TreeNode.__deepcopy__"]], "__eq__() (skbio.tree.treenode method)": [[669, "skbio.tree.TreeNode.__eq__"]], "__ge__() (skbio.tree.treenode method)": [[670, "skbio.tree.TreeNode.__ge__"]], "__getitem__() (skbio.tree.treenode method)": [[671, "skbio.tree.TreeNode.__getitem__"]], "__gt__() (skbio.tree.treenode method)": [[672, "skbio.tree.TreeNode.__gt__"]], "__hash__() (skbio.tree.treenode method)": [[673, "skbio.tree.TreeNode.__hash__"]], "__iter__() (skbio.tree.treenode method)": [[674, "skbio.tree.TreeNode.__iter__"]], "__le__() (skbio.tree.treenode method)": [[675, "skbio.tree.TreeNode.__le__"]], "__len__() (skbio.tree.treenode method)": [[676, "skbio.tree.TreeNode.__len__"]], "__lt__() (skbio.tree.treenode method)": [[677, "skbio.tree.TreeNode.__lt__"]], "__ne__() (skbio.tree.treenode method)": [[678, "skbio.tree.TreeNode.__ne__"]], "__str__() (skbio.tree.treenode method)": [[679, "skbio.tree.TreeNode.__str__"]], "accumulate_to_ancestor() (skbio.tree.treenode method)": [[680, "skbio.tree.TreeNode.accumulate_to_ancestor"]], "ancestors() (skbio.tree.treenode method)": [[681, "skbio.tree.TreeNode.ancestors"]], "append() (skbio.tree.treenode method)": [[682, "skbio.tree.TreeNode.append"]], "ascii_art() (skbio.tree.treenode method)": [[683, "skbio.tree.TreeNode.ascii_art"]], "assign_ids() (skbio.tree.treenode method)": [[684, "skbio.tree.TreeNode.assign_ids"]], "assign_supports() (skbio.tree.treenode method)": [[685, "skbio.tree.TreeNode.assign_supports"]], "bifurcate() (skbio.tree.treenode method)": [[686, "skbio.tree.TreeNode.bifurcate"]], "cache_attr() (skbio.tree.treenode method)": [[687, "skbio.tree.TreeNode.cache_attr"]], "compare_rfd() (skbio.tree.treenode method)": [[688, "skbio.tree.TreeNode.compare_rfd"]], "compare_subsets() (skbio.tree.treenode method)": [[689, "skbio.tree.TreeNode.compare_subsets"]], "compare_tip_distances() (skbio.tree.treenode method)": [[690, "skbio.tree.TreeNode.compare_tip_distances"]], "copy() (skbio.tree.treenode method)": [[691, "skbio.tree.TreeNode.copy"]], "count() (skbio.tree.treenode method)": [[692, "skbio.tree.TreeNode.count"]], "create_caches() (skbio.tree.treenode method)": [[693, "skbio.tree.TreeNode.create_caches"]], "deepcopy() (skbio.tree.treenode method)": [[694, "skbio.tree.TreeNode.deepcopy"]], "descending_branch_length() (skbio.tree.treenode method)": [[695, "skbio.tree.TreeNode.descending_branch_length"]], "distance() (skbio.tree.treenode method)": [[696, "skbio.tree.TreeNode.distance"]], "extend() (skbio.tree.treenode method)": [[697, "skbio.tree.TreeNode.extend"]], "find() (skbio.tree.treenode method)": [[698, "skbio.tree.TreeNode.find"]], "find_all() (skbio.tree.treenode method)": [[699, "skbio.tree.TreeNode.find_all"]], "find_by_func() (skbio.tree.treenode method)": [[700, "skbio.tree.TreeNode.find_by_func"]], "find_by_id() (skbio.tree.treenode method)": [[701, "skbio.tree.TreeNode.find_by_id"]], "from_linkage_matrix() (skbio.tree.treenode class method)": [[702, "skbio.tree.TreeNode.from_linkage_matrix"]], "from_taxdump() (skbio.tree.treenode class method)": [[703, "skbio.tree.TreeNode.from_taxdump"]], "from_taxonomy() (skbio.tree.treenode class method)": [[704, "skbio.tree.TreeNode.from_taxonomy"]], "get_max_distance() (skbio.tree.treenode method)": [[705, "skbio.tree.TreeNode.get_max_distance"]], "has_children() (skbio.tree.treenode method)": [[706, "skbio.tree.TreeNode.has_children"]], "index_tree() (skbio.tree.treenode method)": [[707, "skbio.tree.TreeNode.index_tree"]], "invalidate_caches() (skbio.tree.treenode method)": [[708, "skbio.tree.TreeNode.invalidate_caches"]], "is_root() (skbio.tree.treenode method)": [[709, "skbio.tree.TreeNode.is_root"]], "is_tip() (skbio.tree.treenode method)": [[710, "skbio.tree.TreeNode.is_tip"]], "lca() (skbio.tree.treenode method)": [[711, "skbio.tree.TreeNode.lca"]], "levelorder() (skbio.tree.treenode method)": [[712, "skbio.tree.TreeNode.levelorder"]], "lowest_common_ancestor() (skbio.tree.treenode method)": [[713, "skbio.tree.TreeNode.lowest_common_ancestor"]], "neighbors() (skbio.tree.treenode method)": [[714, "skbio.tree.TreeNode.neighbors"]], "non_tips() (skbio.tree.treenode method)": [[715, "skbio.tree.TreeNode.non_tips"]], "observed_node_counts() (skbio.tree.treenode method)": [[716, "skbio.tree.TreeNode.observed_node_counts"]], "pop() (skbio.tree.treenode method)": [[717, "skbio.tree.TreeNode.pop"]], "postorder() (skbio.tree.treenode method)": [[718, "skbio.tree.TreeNode.postorder"]], "pre_and_postorder() (skbio.tree.treenode method)": [[719, "skbio.tree.TreeNode.pre_and_postorder"]], "preorder() (skbio.tree.treenode method)": [[720, "skbio.tree.TreeNode.preorder"]], "prune() (skbio.tree.treenode method)": [[721, "skbio.tree.TreeNode.prune"]], "read() (skbio.tree.treenode class method)": [[722, "skbio.tree.TreeNode.read"]], "remove() (skbio.tree.treenode method)": [[723, "skbio.tree.TreeNode.remove"]], "remove_deleted() (skbio.tree.treenode method)": [[724, "skbio.tree.TreeNode.remove_deleted"]], "root() (skbio.tree.treenode method)": [[725, "skbio.tree.TreeNode.root"]], "root_at() (skbio.tree.treenode method)": [[726, "skbio.tree.TreeNode.root_at"]], "root_at_midpoint() (skbio.tree.treenode method)": [[727, "skbio.tree.TreeNode.root_at_midpoint"]], "shear() (skbio.tree.treenode method)": [[728, "skbio.tree.TreeNode.shear"]], "shuffle() (skbio.tree.treenode method)": [[729, "skbio.tree.TreeNode.shuffle"]], "siblings() (skbio.tree.treenode method)": [[730, "skbio.tree.TreeNode.siblings"]], "subset() (skbio.tree.treenode method)": [[731, "skbio.tree.TreeNode.subset"]], "subsets() (skbio.tree.treenode method)": [[732, "skbio.tree.TreeNode.subsets"]], "subtree() (skbio.tree.treenode method)": [[733, "skbio.tree.TreeNode.subtree"]], "tip_tip_distances() (skbio.tree.treenode method)": [[734, "skbio.tree.TreeNode.tip_tip_distances"]], "tips() (skbio.tree.treenode method)": [[735, "skbio.tree.TreeNode.tips"]], "to_array() (skbio.tree.treenode method)": [[736, "skbio.tree.TreeNode.to_array"]], "to_taxonomy() (skbio.tree.treenode method)": [[737, "skbio.tree.TreeNode.to_taxonomy"]], "traverse() (skbio.tree.treenode method)": [[738, "skbio.tree.TreeNode.traverse"]], "unpack() (skbio.tree.treenode method)": [[739, "skbio.tree.TreeNode.unpack"]], "unpack_by_func() (skbio.tree.treenode method)": [[740, "skbio.tree.TreeNode.unpack_by_func"]], "unrooted_copy() (skbio.tree.treenode method)": [[741, "skbio.tree.TreeNode.unrooted_copy"]], "unrooted_deepcopy() (skbio.tree.treenode method)": [[742, "skbio.tree.TreeNode.unrooted_deepcopy"]], "write() (skbio.tree.treenode method)": [[743, "skbio.tree.TreeNode.write"]], "majority_rule() (in module skbio.tree)": [[744, "skbio.tree.majority_rule"]], "nj() (in module skbio.tree)": [[745, "skbio.tree.nj"]], "efficiencywarning": [[746, "skbio.util.EfficiencyWarning"]], "representationwarning": [[747, "skbio.util.RepresentationWarning"]], "assert_data_frame_almost_equal() (in module skbio.util)": [[748, "skbio.util.assert_data_frame_almost_equal"]], "assert_ordination_results_equal() (in module skbio.util)": [[749, "skbio.util.assert_ordination_results_equal"]], "cardinal_to_ordinal() (in module skbio.util)": [[750, "skbio.util.cardinal_to_ordinal"]], "classproperty (class in skbio.util)": [[751, "skbio.util.classproperty"]], "__delete__() (skbio.util.classproperty method)": [[752, "skbio.util.classproperty.__delete__"]], "__eq__() (skbio.util.classproperty method)": [[753, "skbio.util.classproperty.__eq__"]], "__ge__() (skbio.util.classproperty method)": [[754, "skbio.util.classproperty.__ge__"]], "__get__() (skbio.util.classproperty method)": [[755, "skbio.util.classproperty.__get__"]], "__gt__() (skbio.util.classproperty method)": [[756, "skbio.util.classproperty.__gt__"]], "__hash__() (skbio.util.classproperty method)": [[757, "skbio.util.classproperty.__hash__"]], "__le__() (skbio.util.classproperty method)": [[758, "skbio.util.classproperty.__le__"]], "__lt__() (skbio.util.classproperty method)": [[759, "skbio.util.classproperty.__lt__"]], "__ne__() (skbio.util.classproperty method)": [[760, "skbio.util.classproperty.__ne__"]], "__set__() (skbio.util.classproperty method)": [[761, "skbio.util.classproperty.__set__"]], "__set_name__() (skbio.util.classproperty method)": [[762, "skbio.util.classproperty.__set_name__"]], "__str__() (skbio.util.classproperty method)": [[763, "skbio.util.classproperty.__str__"]], "deleter() (skbio.util.classproperty method)": [[764, "skbio.util.classproperty.deleter"]], "getter() (skbio.util.classproperty method)": [[765, "skbio.util.classproperty.getter"]], "setter() (skbio.util.classproperty method)": [[766, "skbio.util.classproperty.setter"]], "find_duplicates() (in module skbio.util)": [[767, "skbio.util.find_duplicates"]], "get_data_path() (in module skbio.util)": [[768, "skbio.util.get_data_path"]], "safe_md5() (in module skbio.util)": [[769, "skbio.util.safe_md5"]], "workflow (class in skbio.workflow)": [[770, "skbio.workflow.Workflow"]], "__call__() (skbio.workflow.workflow method)": [[771, "skbio.workflow.Workflow.__call__"]], "__eq__() (skbio.workflow.workflow method)": [[772, "skbio.workflow.Workflow.__eq__"]], "__ge__() (skbio.workflow.workflow method)": [[773, "skbio.workflow.Workflow.__ge__"]], "__gt__() (skbio.workflow.workflow method)": [[774, "skbio.workflow.Workflow.__gt__"]], "__hash__() (skbio.workflow.workflow method)": [[775, "skbio.workflow.Workflow.__hash__"]], "__le__() (skbio.workflow.workflow method)": [[776, "skbio.workflow.Workflow.__le__"]], "__lt__() (skbio.workflow.workflow method)": [[777, "skbio.workflow.Workflow.__lt__"]], "__ne__() (skbio.workflow.workflow method)": [[778, "skbio.workflow.Workflow.__ne__"]], "__str__() (skbio.workflow.workflow method)": [[779, "skbio.workflow.Workflow.__str__"]], "initialize_state() (skbio.workflow.workflow method)": [[780, "skbio.workflow.Workflow.initialize_state"]], "method (class in skbio.workflow)": [[781, "skbio.workflow.method"]], "__call__() (skbio.workflow.method method)": [[782, "skbio.workflow.method.__call__"]], "__eq__() (skbio.workflow.method method)": [[783, "skbio.workflow.method.__eq__"]], "__ge__() (skbio.workflow.method method)": [[784, "skbio.workflow.method.__ge__"]], "__gt__() (skbio.workflow.method method)": [[785, "skbio.workflow.method.__gt__"]], "__hash__() (skbio.workflow.method method)": [[786, "skbio.workflow.method.__hash__"]], "__le__() (skbio.workflow.method method)": [[787, "skbio.workflow.method.__le__"]], "__lt__() (skbio.workflow.method method)": [[788, "skbio.workflow.method.__lt__"]], "__ne__() (skbio.workflow.method method)": [[789, "skbio.workflow.method.__ne__"]], "__str__() (skbio.workflow.method method)": [[790, "skbio.workflow.method.__str__"]], "requires (class in skbio.workflow)": [[791, "skbio.workflow.requires"]], "__call__() (skbio.workflow.requires method)": [[792, "skbio.workflow.requires.__call__"]], "__eq__() (skbio.workflow.requires method)": [[793, "skbio.workflow.requires.__eq__"]], "__ge__() (skbio.workflow.requires method)": [[794, "skbio.workflow.requires.__ge__"]], "__gt__() (skbio.workflow.requires method)": [[795, "skbio.workflow.requires.__gt__"]], "__hash__() (skbio.workflow.requires method)": [[796, "skbio.workflow.requires.__hash__"]], "__le__() (skbio.workflow.requires method)": [[797, "skbio.workflow.requires.__le__"]], "__lt__() (skbio.workflow.requires method)": [[798, "skbio.workflow.requires.__lt__"]], "__ne__() (skbio.workflow.requires method)": [[799, "skbio.workflow.requires.__ne__"]], "__str__() (skbio.workflow.requires method)": [[800, "skbio.workflow.requires.__str__"]], "skbio.io": [[802, "module-skbio.io"]], "skbio.metadata": [[803, "module-skbio.metadata"]], "skbio.sequence": [[804, "module-skbio.sequence"]], "skbio.stats": [[805, "module-skbio.stats"]], "skbio.tree": [[806, "module-skbio.tree"]], "skbio.util": [[808, "module-skbio.util"]], "skbio.workflow": [[809, "module-skbio.workflow"]]}})