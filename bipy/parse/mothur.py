#!/usr/bin/env python
r"""
Mothur Parsing (:mod:`bipy.parse.mothur`)
=========================================

.. currentmodule:: bipy.parse.mothur

This module provides a convenience function to parse Mothur's ``list`` files.

Functions
---------

.. autosummary::
   :toctree: generated/

   parse_otu_list

"""
from __future__ import division

#-----------------------------------------------------------------------------
# Copyright (c) 2013--, bipy development team.
#
# Distributed under the terms of the Modified BSD License.
#
# The full license is in the file COPYING.txt, distributed with this software.
#-----------------------------------------------------------------------------

from record_finder import is_empty


def parse_otu_list(lines, precision=0.0049):
    r"""Parser for Mothur .list file

    To ensure all distances are of type float, the parser returns a
    distance of 0.0 for the unique groups.  However, if some sequences
    are very similar, Mothur [1]_. may return a grouping at zero distance.
    What Mothur really means by this, however, is that the clustering
    is at the level of Mothur's precision.  In this case, the parser
    returns the distance explicitly.

    If you are parsing otu's with a non-default precision, you must
    specify the precision here to ensure that the parsed distances are
    in order.

    Returns an iterator over (distance, otu_list)

    Parameters
    ----------
    lines : file like object
        lines with the .list file as generated by Mothur

    precision : float, optional
        float value to replace 0.0 by

    Returns
    -------

    generator : generator of tuples
        yields tuples with distances and OTU lists


    References
    ----------
    .. [1] http://www.mothur.org

    Examples
    --------

    >>> from StringIO import StringIO
    >>> from bipy.parse.mothur import parse_otu_list
    >>> fd = StringIO("unique\t3\tcccccc\tbbbbbb\taaaaaa\n"
    ...               "0.62\t2\tbbbbbb,cccccc\taaaaaa\n"
    ...               "0.67\t1\taaaaaa,bbbbbb,cccccc\n")
    >>> for element in parse_otu_list(fd):
    ...    print element[0]
    0.0
    0.62
    0.67

    """
    for line in lines:
        if is_empty(line):
            continue
        tokens = line.strip().split('\t')

        distance_str = tokens.pop(0)
        if distance_str.lstrip().lower().startswith('u'):
            distance = 0.0
        elif distance_str == '0.0':
            distance = float(precision)
        else:
            distance = float(distance_str)

        num_otus = int(tokens.pop(0))
        otu_list = [t.split(',') for t in tokens]

        yield (distance, otu_list)
